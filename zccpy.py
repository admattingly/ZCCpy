# Copyright (C) 2025 Agilify Strategy and Innovation Pty Limited <https://www.agilify.com.au>

# Use subject to GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

import ctypes
import struct
import sys
import textwrap

_wrapper = textwrap.TextWrapper(width=78, initial_indent='    ', subsequent_indent='    ')

_plat = sys.platform

_ZCT_DOUBLE = 1             # IEEE754 double-precision floating point
_ZCT_CHAR   = 2             # character string padded with blanks, if necessary
_ZCT_INT    = 16            # integer
_ZCT_BIN    = 5             # binary bytes
_ZCT_KEYID  = 245           # key identifier which can be string or binary
_ZCT_PAND   = 246           # character PAN data that may be preceded by 2-byte binary length in range 10 to 19

_ZCD_IN     = 1             # input only
_ZCD_OUT    = 2             # output only
_ZCD_BOTH   = 3             # input and output

_ZCO_MAN    = 0             # mandatory
_ZCO_OPT    = 1             # optional

_ZCL_VAR    = -1            # variable length, depending on lengthParm * multiplier

# special processing flags 
_ZCS_OLDMK    = 0x00010000  # key identifier or length is different on output, otherwise suppress output of field
_ZCS_NDSWPINT = 0x00020000  # if rule_array contains NUM-DECT or SIZEWPIN send this field back as an integer (PARMMASK gives 1-based index of rule_array parameter)
_ZCS_NULL2SP  = 0x00040000  # convert any nulls in ZCT_CHAR field to spaces
_ZCS_RKL      = 0x00080000  # lengthen the CSNDRKL key_labels reply field because key_labels_count doesn't include card serial numbers (Ugh!)
_ZCS_ROUNDN   = 0x00100000  # round field length to multiple of 'n' bytes (n given by PARMMASK)
_ZCS_HEXCHAR  = 0x00200000  # if rule_array contains HEX-? send field back as CHAR (PARMMASK gives 1-based index of rule_array parameter)
_ZCS_LENSET   = 0x00400000  # set output length of ZCL_VAR field (PARMMASK gives 1-based index of length field)
_ZCS_IGNORE   = 0x00800000  # don't load an input value into this field - leave it blank/null
_ZCS_PARMMASK = 0x0000ffff  # space for any parameter index or other data required for special processing

def zcpack(values: str, n: int = 8) -> str:
    """
    Concatenates a string of space-separated values into a string where each value occupies n characters.
    Each value in the input string is truncated to n characters or left-justified and padded with spaces to n characters.
    
    Arguments:
        values  (str):  String of space-separated values
        n       (int):  Packed length of each input value in the output string (default is 8)
        
    Returns:
                (str)
    """
    words = values.split()
    slots = [word.ljust(n)[:n] for word in words]
    return ''.join(slots)

_cp = {
    'linux': 'utf-8',
    'zos': 'cp1047'
}

#
# Integer means 8-byte value in machine byte order, except for z/OS where it is a 4-byte value (even in AMODE 64)
#
_intlen = 8
if _plat == 'zos':
    _intlen = 4

_space = {
    'linux': 0x20,
    'zos': 0x40
}

_dll = {
    'linux': 'libcsulcca.so',
    'zos': 'CSFDLL64'
}

#--- cut here ---
_verb = {
    'csuaacm': {
        'linux': {
            'name': 'CSUAACM',
            'description': 'Access Control Maintenance',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('name', 0, 0, 0, 0, 0, 0, 0),
                ('output_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('output_data', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csuaact': {
        'linux': {
            'name': 'CSUAACT',
            'description': 'Access Control Tracking',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('role_id_length', 0, 0, 0, 0, 0, 0, 0),
                ('role_id', 0, 0, 0, 0, 0, 0, 0),
                ('output_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('output_data', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csuacfq': {
        'linux': {
            'name': 'CSUACFQ',
            'description': 'Cryptographic Facility Query',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_BOTH, _ZCO_MAN, 160, 0, 0, 0),
                ('verb_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('verb_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 7, 1, 0)
            )
        ]
    },
    'csuacfv': {
        'linux': {
            'name': 'CSUACFV',
            'description': 'Cryptographic Facility Version',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('version_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('version_data', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csuacra': {
        'linux': {
            'name': 'CSUACRA',
            'description': 'Cryptographic Resource Allocate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('resource_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('resource_name', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csuacrd': {
        'linux': {
            'name': 'CSUACRD',
            'description': 'Cryptographic Resource Deallocate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_countrule_array', 0, 0, 0, 0, 0, 0, 0),
                ('resource_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('resource_name', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbksi': {
        'linux': {
            'name': 'CSNBKSI',
            'description': 'Key Storage Initialization',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_storage_file_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_storage_file_name', 0, 0, 0, 0, 0, 0, 0),
                ('key_storage_description_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_storage_description', 0, 0, 0, 0, 0, 0, 0),
                ('clear_master_key', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csualgq': {
        'linux': {
            'name': 'CSUALGQ',
            'description': 'Log Query',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('log_number_or_level', 0, 0, 0, 0, 0, 0, 0),
                ('reserved0', 0, 0, 0, 0, 0, 0, 0),
                ('log_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('log_data', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbmkp': {
        'linux': {
            'name': 'CSNBMKP',
            'description': 'Master Key Process',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_part', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csuarnt': {
        'linux': {
            'name': 'CSUARNT',
            'description': 'Random Number Tests',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0)  # CAUTION: might be mandatory
            )
        ]
    },
    'csnbcki': {
        'linux': {
            'name': 'CSNBCKI',
            'description': 'Clear Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECKI',
            'description': 'Clear Key Import',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('target_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 64, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbcvg': {
        'linux': {
            'name': 'CSNBCVG',
            'description': 'Control Vector Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECVG',
            'description': 'Control Vector Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('control_vector', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 16, 0, 0, 0)
            )
        ]
    },
    'csnbcvt': {
        'linux': {
            'name': 'CSNBCVT',
            'description': 'Control Vector Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECVT',
            'description': 'Control Vector Translate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('source_key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('array_key_left_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('mask_array_left', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 56, 0, 0, 0),
                ('array_key_right_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('mask_array_right', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 56, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 8, 0),
                ('target_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('source_key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('array_key_left', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('mask_array_left', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 56, 0, 0, 0),
                ('array_key_right', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('mask_array_right', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 56, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 8, 0),
                ('target_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbcve': {
        'linux': {
            'name': 'CSNBCVE',
            'description': 'Cryptographic Variable Encipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECVE',
            'description': 'Cryptographic Variable Encipher',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('c_variable_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('plain_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 6, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('c_variable_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('plaintext', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('ciphertext', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 6, 1, 0)
            )
        ]
    },
    'csnbdkx': {
        'linux': {
            'name': 'CSNBDKX',
            'description': 'Data Key Export',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDKX',
            'description': 'Data Key Export',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('exporter_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('target_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbdkm': {
        'linux': {
            'name': 'CSNBDKM',
            'description': 'Data Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDKM',
            'description': 'Data Key Import',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('source_key_token', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('importer_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('target_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbdkg': {
        'linux': {
            'name': 'CSNBDKG',
            'description': 'Diversified Key Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDKG',
            'description': 'Diversified Key Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('generating_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0),
                ('data_decrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('generated_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbdkg2': {
        'linux': {
            'name': 'CSNBDKG2',
            'description': 'Diversified Key Generate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDKG2',
            'description': 'Diversified Key Generate2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('generating_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('generating_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('input_initial_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_initial_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('generated_key_identifier1_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('generated_key_identifier1', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('generated_key_identifier2_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier2', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            )
        ]
    },
    'csnbddk': {
        'linux': {
            'name': 'CSNBDDK',
            'description': 'Diversify Directed Key',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDDK',
            'description': 'Diversify Directed Key',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('kdk_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('kdk_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_type_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_type_vector', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('additional_derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('additional_derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('random_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('random_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('kdk_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('kdk_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_type_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_type_vector', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('additional_derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('additional_derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('random_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('random_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0)
            )
        ]
    },
    'csndedh': {
        'linux': {
            'name': 'CSNDEDH',
            'description': 'EC Diffie-Hellman',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFEDH',
            'description': 'ECC Diffie-Hellman',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('private_kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('hybrid_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('hybrid_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('party_info_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('party_info', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('key_bit_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('hybrid_ciphertext_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('hybrid_ciphertext', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 20, 1, 0),
                ('reserved_3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 22, 1, 0),
                ('reserved_4_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved_5_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_5', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('output_kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 28, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 30, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('private_kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('hybrid_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('hybrid_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('party_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('party_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('key_bit_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('hybrid_ciphertext_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('hybrid_ciphertext', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 20, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 22, 1, 0),
                ('reserved4_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved5_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved5', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('output_kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 28, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 30, 1, 0)
            )
        ]
    },
    'csnbkex': {
        'linux': {
            'name': 'CSNBKEX',
            'description': 'Key Export',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKEX',
            'description': 'Key Export',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('exporter_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('target_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkgn': {
        'linux': {
            'name': 'CSNBKGN',
            'description': 'Key Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKGN',
            'description': 'Key Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_form', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_length', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('key_type_1', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('key_type_2', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('kek_key_identifier_1', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('kek_key_identifier_2', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('generated_key_identifier_1', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0),
                ('generated_key_identifier_2', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkgn2': {
        'linux': {
            'name': 'CSNBKGN2',
            'description': 'Key Generate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKGN2',
            'description': 'Key Generate2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('clear_key_bit_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_type_1', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('key_type_2', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('key_name_1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_name_1', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('key_name_2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_name_2', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('user_associated_data_1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('user_associated_data_1', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('user_associated_data_2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('user_associated_data_2', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('key_encrypting_key_identifier_1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_encrypting_key_identifier_1', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 18, 1, _ZCS_OLDMK),
                ('key_encrypting_key_identifier_2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_encrypting_key_identifier_2', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 20, 1, _ZCS_OLDMK),
                ('generated_key_identifier_1_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier_1', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 22, 1, 0),
                ('generated_key_identifier_2_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier_2', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 24, 1, 0)
            )
        ]
    },
    'csnbkim': {
        'linux': {
            'name': 'CSNBKIM',
            'description': 'Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKIM',
            'description': 'Key Import',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('importer_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('target_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkpi': {
        'linux': {
            'name': 'CSNBKPI',
            'description': 'Key Part Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKPI',
            'description': 'Key Part Import',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_part', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 24, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkpi2': {
        'linux': {
            'name': 'CSNBKPI2',
            'description': 'Key Part Import2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKPI2',
            'description': 'Key Part Import2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_part_bit_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_part', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 256, 0, 0, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csnbkyt': {
        'linux': {
            'name': 'CSNBKYT',
            'description': 'Key Test',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKYT',
            'description': 'Key Test',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('value_1', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0),
                ('value_2', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('random_number', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0),
                ('verification_pattern', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0)
            )
        ]
    },
    'csnbkyt2': {
        'linux': {
            'name': 'CSNBKYT2',
            'description': 'Key Test2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKYT2',
            'description': 'Key Test2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_encrypting_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('verification_pattern_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('verification_pattern', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbkytx': {
        'linux': {
            'name': 'CSNBKYTX',
            'description': 'Key Test Extended',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKYTX',
            'description': 'Key Test Extended',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('random_number', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0),
                ('verification_pattern', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0),
                ('kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK)
            )
        ]
    },
    'csnbktb': {
        'linux': {
            'name': 'CSNBKTB',
            'description': 'Key Token Build',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKTB',
            'description': 'Key Token Build',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 64, 0, 0, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 8, 0),
                ('key_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 32, 0, 0, 0),
                ('reserved_1', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_2', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('token_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('control_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 16, 0, 0, 0),
                ('reserved_4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('reserved_5', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_6', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('master_key_verification_pattern', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 64, 0, 0, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 8, 0),
                ('key_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 32, 0, 0, 0),
                ('master_key_version_number', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_register_number', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('token_data_1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('control_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 16, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('pad_character', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cryptographic_period_start', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('master_key_verification_pattern', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0)
            )
        ]
    },
    'csnbktb2': {
        'linux': {
            'name': 'CSNBKTB2',
            'description': 'Key Token Build2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKTB2',
            'description': 'Key Token Build2',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_key_bit_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_key_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 256, 0, 0, 0),
                ('key_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('user_associated_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('user_associated_data', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('token_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('token_data', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('verb_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('verb_data', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('target_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_key_bit_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_key_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 256, 0, 0, 0),
                ('key_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('user_associated_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('user_associated_data', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('token_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('token_data', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('service_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('service_data', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('target_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            )
        ]
    },
    'csnbktc': {
        'linux': {
            'name': 'CSNBKTC',
            'description': 'Key Token Change',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_identifier', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbktc2': {
        'linux': {
            'name': 'CSNBKTC2',
            'description': 'Key Token Change2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_identifier_lengthkey_identifier', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbktp': {
        'linux': {
            'name': 'CSNBKTP',
            'description': 'Key Token Parse',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('key_token', 0, 0, 0, 0, 0, 0, 0),
                ('key_type', 0, 0, 0, 0, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 8, 0),  # CAUTION: might be mandatory
                ('key_value', 0, 0, 0, 0, 0, 0, 0),
                ('masterkey_verification_pattern_v03', 0, 0, 0, 0, 0, 0, 0),
                ('reserved_2', 0, 0, 0, 0, 0, 0, 0),
                ('reserved_3', 0, 0, 0, 0, 0, 0, 0),
                ('control_vector', 0, 0, 0, 0, 0, 0, 0),
                ('reserved_4', 0, 0, 0, 0, 0, 0, 0),
                ('reserved_5', 0, 0, 0, 0, 0, 0, 0),
                ('reserved_6', 0, 0, 0, 0, 0, 0, 0),
                ('master_key_verification_pattern_v00', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbktp2': {
        'linux': {
            'name': 'CSNBKTP2',
            'description': 'Key Token Parse2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0),
                ('key_type', 0, 0, 0, 0, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 8, 0),  # CAUTION: might be mandatory
                ('key_material_state', 0, 0, 0, 0, 0, 0, 0),
                ('payload_bit_length', 0, 0, 0, 0, 0, 0, 0),
                ('payload', 0, 0, 0, 0, 0, 0, 0),
                ('key_verification_pattern_type', 0, 0, 0, 0, 0, 0, 0),
                ('key_verification_pattern_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_verification_pattern', 0, 0, 0, 0, 0, 0, 0),
                ('key_wrapping_method', 0, 0, 0, 0, 0, 0, 0),
                ('key_hash_algorithm', 0, 0, 0, 0, 0, 0, 0),
                ('key_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_name', 0, 0, 0, 0, 0, 0, 0),
                ('tlv_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('tlv_data', 0, 0, 0, 0, 0, 0, 0),
                ('user_associated_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('user_associated_data', 0, 0, 0, 0, 0, 0, 0),
                ('verb_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('verb_data', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbktr': {
        'linux': {
            'name': 'CSNBKTR',
            'description': 'Key Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKTR',
            'description': 'Key Translate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('input_key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('input_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, 0),
                ('output_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, 0),
                ('output_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbktr2': {
        'linux': {
            'name': 'CSNBKTR2',
            'description': 'Key Translate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKTR2',
            'description': 'Key Translate2',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_key_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('input_kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('output_kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('output_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('input_kek_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('output_kek_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('output_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbckm': {
        'linux': {
            'name': 'CSNBCKM',
            'description': 'Multiple Clear Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECKM',
            'description': 'Multiple Clear Key Import',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('clear_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 32, 0, 0, 0),
                ('target_key_identifier', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('clear_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 32, 0, 0, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbmms': {
        'linux': {
            'name': 'CSNBMMS',
            'description': 'Multi-MAC Scheme',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEMMS',
            'description': 'Multi-MAC Scheme',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('generating_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('generating_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('derivation_data0_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('derivation_data0', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('derivation_data1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('derivation_data2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('mac_values_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('mac_values', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('input_initial_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_initial_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('final_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('final_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 27, 1, 0)
            )
        ]
    },
    'csndpkd': {
        'linux': {
            'name': 'CSNDPKD',
            'description': 'PKA Decrypt',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKD',
            'description': 'PKA Decrypt',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('pka_enciphered_keyvalue_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pka_enciphered_keyvalue', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('data_structure_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_structure', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('pka_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pka_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('target_keyvalue_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('target_keyvalue', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('pka_enciphered_keyvalue_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pka_enciphered_keyvalue', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('data_structure_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_structure', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('target_keyvalue_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('target_keyvalue', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csndpke': {
        'linux': {
            'name': 'CSNDPKE',
            'description': 'PKA Encrypt',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKE',
            'description': 'PKA Encrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('keyvalue_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('keyvalue', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('sym_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('sym_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('pka_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pka_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pka_enciphered_keyvalue_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('pka_enciphered_keyvalue', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbpex': {
        'linux': {
            'name': 'CSNBPEX',
            'description': 'Prohibit Export',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPEX',
            'description': 'Prohibit Export',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK)
            )
        ]
    },
    'csnbpexx': {
        'linux': {
            'name': 'CSNBPEXX',
            'description': 'Prohibit Export Extended',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPEXX',
            'description': 'Prohibit Export Extended',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('source_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, 0),
                ('kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK)
            )
        ]
    },
    'csnbrka': {
        'linux': {
            'name': 'CSNBRKA',
            'description': 'Restrict Key Attribute',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNERKA',
            'description': 'Restrict Key Attribute',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('opt_parameter1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_parameter1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('opt_parameter2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_parameter2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbrng': {
        'linux': {
            'name': 'CSNBRNG',
            'description': 'Random Number Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNERNG',
            'description': 'Random Number Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('form', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 8, 0, 0, 0)
            )
        ]
    },
    'csnbrngl': {
        'linux': {
            'name': 'CSNBRNGL',
            'description': 'Random Number Generate Long',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNERNGL',
            'description': 'Random Number Generate Long',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('random_number_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csndrkx': {
        'linux': {
            'name': 'CSNDRKX',
            'description': 'Remote Key Export',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFRKX',
            'description': 'Remote Key Export',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('trusted_block_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('trusted_block_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('certificate_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('certificate', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('certificate_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('certificate_parms', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('rule_id_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_id', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('importer_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('importer_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 19, 1, _ZCS_OLDMK),
                ('asym_encrypted_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('asym_encrypted_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('sym_encrypted_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('sym_encrypted_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('extra_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('extra_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('key_check_parameters_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_check_parameters', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('key_check_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_check_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 29, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('trusted_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('trusted_block_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('certificate_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('certificate', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('certificate_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('certificate_parms', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('transport_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('rule_id_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_id', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('importer_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('importer_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('source_key_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 19, 1, _ZCS_OLDMK),
                ('asym_encrypted_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('asym_encrypted_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('sym_encrypted_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('sym_encrypted_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('extra_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('extra_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('key_check_parameters_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_check_parameters', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('key_check_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_check_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 29, 1, 0)
            )
        ]
    },
    'csndsyx': {
        'linux': {
            'name': 'CSNDSYX',
            'description': 'Symmetric Key Export',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFSYX',
            'description': 'Symmetric Key Export',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('transporter_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transporter_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('enciphered_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('enciphered_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csndsxd': {
        'linux': {
            'name': 'CSNDSXD',
            'description': 'Symmetric Key Export with Data',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFSXD',
            'description': 'Symmetric Key Export with Data',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('data_offset', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('rsa_public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0),
                ('rsa_enciphered_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_enciphered_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 14, 1, 0)
            )
        ]
    },
    'csndsyg': {
        'linux': {
            'name': 'CSNDSYG',
            'description': 'Symmetric Key Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFSYG',
            'description': 'Symmetric Key Generate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('rsa_public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0),
                ('local_enciphered_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('local_enciphered_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('rsa_enciphered_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_enciphered_key', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('rsa_public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0),
                ('local_enciphered_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('local_enciphered_key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('rsa_enciphered_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_enciphered_key', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csndsyi': {
        'linux': {
            'name': 'CSNDSYI',
            'description': 'Symmetric Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFSYI',
            'description': 'Symmetric Key Import',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('rsa_enciphered_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_enciphered_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('rsa_private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rsa_private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('target_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csndsyi2': {
        'linux': {
            'name': 'CSNDSYI2',
            'description': 'Symmetric Key Import2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFSYI2',
            'description': 'Symmetric Key Import2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('enciphered_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('enciphered_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('key_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('target_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csndtbc': {
        'linux': {
            'name': 'CSNDTBC',
            'description': 'Trusted Block Create',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFTBC',
            'description': 'Trusted Block Create',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_block_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_block_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('trusted_block_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('trusted_block_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_block_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_block_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('trusted_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('trusted_block_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csnbukd': {
        'linux': {
            'name': 'CSNBUKD',
            'description': 'Unique Key Derive',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEUKD',
            'description': 'Unique Key Derive',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('base_derivation_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('base_derivation_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('generated_key_identifier1_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier1', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('generated_key_identifier2_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier2', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('generated_key_identifier3_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier3', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('reserved4_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('reserved5_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved5', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 27, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('base_derivation_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('base_derivation_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('generated_key_identifier1_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier1', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('generated_key_identifier2_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier2', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('generated_key_identifier3_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier3', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved4_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('reserved5_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved5', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('reserved6_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved6', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 27, 1, 0)
            )
        ]
    },
    'csnbdec': {
        'linux': {
            'name': 'CSNBDEC',
            'description': 'Decipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDEC',
            'description': 'Decipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 8, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 18, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 6, 1, 0)
            )
        ]
    },
    'csnbenc': {
        'linux': {
            'name': 'CSNBENC',
            'description': 'Encipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEENC',
            'description': 'Encipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 1, _ZCS_ROUNDN + 8),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 8, 0),
                ('pad_character', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 18, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 6, 1, _ZCS_ROUNDN + 8)
            )
        ]
    },
    'csnbsad': {
        'linux': {
            'name': 'CSNBSAD',
            'description': 'Symmetric Algorithm Decipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNESAD',
            'description': 'Symmetric Algorithm Decipher',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_parms', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('block_size', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('ciphertext_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('ciphertext', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('cleartext_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cleartext', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('optional_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 20, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_parms', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('block_size', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('cipher_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('clear_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('optional_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 20, 1, 0)
            )
        ]
    },
    'csnbsae': {
        'linux': {
            'name': 'CSNBSAE',
            'description': 'Symmetric Algorithm Encipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNESAE',
            'description': 'Symmetric Algorithm Encipher',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_parms', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('block_size', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('cleartext_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cleartext', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('ciphertext_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('ciphertext', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('optional_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 20, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_parms', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('block_size', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('clear_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('cipher_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('optional_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 20, 1, 0)
            )
        ]
    },
    'csnbctt2': {
        'linux': {
            'name': 'CSNBCTT2',
            'description': 'Cipher Text Translate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECTT2',
            'description': 'Cipher Text Translate2',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_in_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier_in', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('init_vector_in_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('init_vector_in', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('cipher_text_in_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text_in', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('key_identifier_out_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier_out', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('init_vector_out_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('init_vector_out', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('cipher_text_out_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text_out', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_in_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier_in', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('initialization_vector_in_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector_in', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('cipher_text_in_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text_in', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('key_identifier_out_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier_out', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('initialization_vector_out_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector_out', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('cipher_text_out_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text_out', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0)
            )
        ]
    },
    'csnbhmg': {
        'linux': {
            'name': 'CSNBHMG',
            'description': 'HMAC Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEHMG',
            'description': 'HMAC Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbhmv': {
        'linux': {
            'name': 'CSNBHMV',
            'description': 'HMAC Verify',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEHMV',
            'description': 'HMAC Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbmgn': {
        'linux': {
            'name': 'CSNBMGN',
            'description': 'MAC Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEMGN',
            'description': 'MAC Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 6, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 8, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 128, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 9, 0, 0, _ZCS_HEXCHAR + 9)
            )
        ]
    },
    'csnbmgn2': {
        'linux': {
            'name': 'CSNBMGN2',
            'description': 'MAC Generate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEMGN2',
            'description': 'MAC Generate2',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('message_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('message_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbmvr': {
        'linux': {
            'name': 'CSNBMVR',
            'description': 'MAC Verify',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEMVR',
            'description': 'MAC Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 6, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 8, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 128, 0, 0, 0),
                ('mac', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 9, 0, 0, 0)
            )
        ]
    },
    'csnbmvr2': {
        'linux': {
            'name': 'CSNBMVR2',
            'description': 'MAC Verify2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEMVR2',
            'description': 'MAC Verify2',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('message_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('message_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnbmdg': {
        'linux': {
            'name': 'CSNBMDG',
            'description': 'MDC Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEMDG',
            'description': 'MDC Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 8, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 128, 0, 0, 0),
                ('mdc', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 16, 0, 0, 0)
            )
        ]
    },
    'csnbowh': {
        'linux': {
            'name': 'CSNBOWH',
            'description': 'One-Way Hash',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEOWH',
            'description': 'One-Way Hash Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('hash_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('hash', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csnbakrc': {
        'linux': {
            'name': 'CSNBAKRC',
            'description': 'AES Key Record Create',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbakrd': {
        'linux': {
            'name': 'CSNBAKRD',
            'description': 'AES Key Record Delete',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbakrl': {
        'linux': {
            'name': 'CSNBAKRL',
            'description': 'AES Key Record List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name', 0, 0, 0, 0, 0, 0, 0),
                ('security_server_name', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbakrr': {
        'linux': {
            'name': 'CSNBAKRR',
            'description': 'AES Key Record Read',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbakrw': {
        'linux': {
            'name': 'CSNBAKRW',
            'description': 'AES Key Record Write',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbkrc': {
        'linux': {
            'name': 'CSNBKRC',
            'description': 'DES Key Record Create',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKRC',
            'description': 'CKDS Key Record Create',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkrd': {
        'linux': {
            'name': 'CSNBKRD',
            'description': 'DES Key Record Delete',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKRD',
            'description': 'CKDS Key Record Delete',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkrl': {
        'linux': {
            'name': 'CSNBKRL',
            'description': 'DES Key Record List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name', 0, 0, 0, 0, 0, 0, 0),
                ('security_server_name', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbkrr': {
        'linux': {
            'name': 'CSNBKRR',
            'description': 'DES Key Record Read',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKRR',
            'description': 'CKDS Key Record Read',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csnbkrw': {
        'linux': {
            'name': 'CSNBKRW',
            'description': 'DES Key Record Write',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEKRW',
            'description': 'CKDS Key Record Write',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csndkrc': {
        'linux': {
            'name': 'CSNDKRC',
            'description': 'PKA Key Record Create',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFKRC',
            'description': 'PKDS Key Record Create',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('token', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csndkrd': {
        'linux': {
            'name': 'CSNDKRD',
            'description': 'PKA Key Record Delete',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFKRD',
            'description': 'PKDS Key Record Delete',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csndkrl': {
        'linux': {
            'name': 'CSNDKRL',
            'description': 'PKA Key Record List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name', 0, 0, 0, 0, 0, 0, 0),
                ('security_server_name', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csndkrr': {
        'linux': {
            'name': 'CSNDKRR',
            'description': 'PKA Key Record Read',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFKRR',
            'description': 'PKDS Key Record Read',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csndkrw': {
        'linux': {
            'name': 'CSNDKRW',
            'description': 'PKA Key Record Write',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFKRW',
            'description': 'PKDS Key Record Write',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csnbckrc': {
        'linux': {
            'name': 'CSNBCKRC',
            'description': 'Combined Key Record Create',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2', 0, 0, 0, 0, 0, 0, 0),
                ('reserved3_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved3', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbckrd': {
        'linux': {
            'name': 'CSNBCKRD',
            'description': 'Combined Key Record Delete',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbckrl': {
        'linux': {
            'name': 'CSNBCKRL',
            'description': 'Combined Key Record List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name_length', 0, 0, 0, 0, 0, 0, 0),
                ('dataset_name', 0, 0, 0, 0, 0, 0, 0),
                ('reserved_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbckrr': {
        'linux': {
            'name': 'CSNBCKRR',
            'description': 'Combined Key Record Read',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbckrw': {
        'linux': {
            'name': 'CSNBCKRW',
            'description': 'Combined Key Record Write',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_label', 0, 0, 0, 0, 0, 0, 0),
                ('key_token_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_token', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csndrkd': {
        'linux': {
            'name': 'CSNDRKD',
            'description': 'Retained Key Delete',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFRKD',
            'description': 'Retained Key Delete',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csndrkl': {
        'linux': {
            'name': 'CSNDRKL',
            'description': 'Retained Key List',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFRKL',
            'description': 'Retained Key List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label_mask', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('retained_keys_count', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('key_labels_count', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_labels', _ZCT_CHAR, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 9, 64, _ZCS_RKL)
            )
        ]
    },
    'csnbapg': {
        'linux': {
            'name': 'CSNBAPG',
            'description': 'Authentication Parameter Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEAPG',
            'description': 'Authentication Parameter Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('inbound_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('inbound_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('issuer_domestic_code', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 5, 0, 0, 0),
                ('card_secure_code', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 12, 0, 0, 0),
                ('ap_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('ap_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('ap_value', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 8, 0, 0, 0)
            )
        ]
    },
    'csnbcpe': {
        'linux': {
            'name': 'CSNBCPE',
            'description': 'Clear PIN Encrypt',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECPE',
            'description': 'Clear PIN Encrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 725, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 6, 8, 0),
                ('clear_pin', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('sequence_number', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 16, 0, 0, 0)
            )
        ]
    },
    'csnbpgn': {
        'linux': {
            'name': 'CSNBPGN',
            'description': 'Clear PIN Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPGN',
            'description': 'Clear PIN Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('pin_generating_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0),
                ('pin_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pin_check_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 48, 0, 0, 0),
                ('returned_result', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 16, 0, 0, 0)
            )
        ]
    },
    'csnbcpa': {
        'linux': {
            'name': 'CSNBCPA',
            'description': 'Clear PIN Generate Alternate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECPA',
            'description': 'Clear PIN Generate Alternate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('pin_encryption_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 725, 0, 0, 0),
                ('pin_generation_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 8, 0),
                ('pin_check_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('data_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 48, 0, 0, 0),
                ('returned_pvv', _ZCT_CHAR, _ZCD_OUT, _ZCO_MAN, 16, 0, 0, 0)
            )
        ]
    },
    'csnbcsg': {
        'linux': {
            'name': 'CSNBCSG',
            'description': 'CVV Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECSG',
            'description': 'VISA CVV Service Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 19, 0, 0, 0),
                ('expiration_date', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('service_code', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 3, 0, 0, 0),
                ('cvv_key_a_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('cvv_key_b_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('cvv_value', _ZCT_CHAR, _ZCD_OUT, _ZCO_MAN, 5, 0, 0, 0)
            )
        ]
    },
    'csnbckc': {
        'linux': {
            'name': 'CSNBCKC',
            'description': 'CVV Key Combine',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECKC',
            'description': 'CVV Key Combine',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_a_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_a_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_b_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_b_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csnbcsv': {
        'linux': {
            'name': 'CSNBCSV',
            'description': 'CVV Verify',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNECSV',
            'description': 'VISA CVV Service Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 19, 0, 0, 0),
                ('expiration_date', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('service_code', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 3, 0, 0, 0),
                ('cvv_key_a_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('cvv_key_b_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('cvv_value', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 5, 0, 0, 0)
            )
        ]
    },
    'csnbepg': {
        'linux': {
            'name': 'CSNBEPG',
            'description': 'Encrypted PIN Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEEPG',
            'description': 'Encrypted PIN Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('pin_generating_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('outbound_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 725, 0, 0, _ZCS_OLDMK),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 8, 0),
                ('pin_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 48, 0, 0, 0),
                ('pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('sequence_number', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 16, 0, 0, 0)
            )
        ]
    },
    'csnbptr': {
        'linux': {
            'name': 'CSNBPTR',
            'description': 'Encrypted PIN Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPTR',
            'description': 'Encrypted PIN Translate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('input_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('output_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('input_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('input_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 12, 0, 0, 0),
                ('input_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 8, 0),
                ('output_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('output_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 12, 0, 0, 0),
                ('sequence_number', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pin_block_out', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 8, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('input_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('output_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('input_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('pan_data_in', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 12, 0, 0, 0),
                ('pin_block_in', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 8, 0),
                ('output_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('pan_data_out', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 12, 0, 0, 0),
                ('sequence_number', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pin_block_out', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 8, 0, 0, 0)
            )
        ]
    },
    'csnbptr2': {
        'linux': {
            'name': 'CSNBPTR2',
            'description': 'Encrypted PIN Translate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPTR2',
            'description': 'Encrypted PIN Translate2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('output_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('authentication_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('authentication_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('input_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('input_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('input_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('output_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 19, 1, 0),
                ('output_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('authentication_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('authentication_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('output_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 25, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            )
        ]
    },
    'csnbptre': {
        'linux': {
            'name': 'CSNBPTRE',
            'description': 'Encrypted PIN Translate Enhanced',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPTRE',
            'description': 'Encrypted PIN Translate Enhanced',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('output_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('pan_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('input_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('input_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('output_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 19, 1, 0),
                ('sequence_number', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 22, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('output_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('pan_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('input_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('input_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('output_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 19, 1, 0),
                ('sequence_number', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 22, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0)
            )
        ]
    },
    'csnbpvr': {
        'linux': {
            'name': 'CSNBPVR',
            'description': 'Encrypted PIN Verify',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPVR',
            'description': 'Encrypted PIN Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('input_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 725, 0, 0, _ZCS_OLDMK),
                ('pin_verifying_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('input_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, 48, 0, 0, 0),
                ('pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 8, 0),
                ('pin_check_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 48, 0, 0, 0)
            )
        ]
    },
    'csnbpvr2': {
        'linux': {
            'name': 'CSNBPVR2',
            'description': 'Encrypted PIN Verify2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPVR2',
            'description': 'Encrypted PIN Verify2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('reference_pin_rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reference_pin_rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 8, 0),
                ('pin_check_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 10, 1, _ZCS_OLDMK),
                ('reference_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('reference_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 12, 1, _ZCS_OLDMK),
                ('input_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 14, 1, 0),
                ('input_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 16, 1, 0),
                ('reference_pin_profile_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('reference_pin_profile', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 18, 1, 0),
                ('reference_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('reference_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 20, 1, 0),
                ('input_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('reference_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 28, 1, 0),
                ('reserved4_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 30, 1, 0)
            )
        ]
    },
    'csnbfped': {
        'linux': {
            'name': 'CSNBFPED',
            'description': 'FPE Decipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEFPED',
            'description': 'FPE Decipher',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('enc_pan_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_pan', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('enc_cardholder_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_cardholder_name', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('enc_dtrack1_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack1_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('enc_dtrack2_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack2_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('clear_pan_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_pan', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('clear_cardholder_name_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_cardholder_name', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('clear_dtrack1_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack1_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('clear_dtrack2_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack2_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('dukpt_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('dukpt_pin_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('enc_pan_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_pan', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('enc_ch_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_ch_name', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('enc_dtrack1_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack1_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('enc_dtrack2_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack2_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('clear_pan_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_pan', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('clear_ch_name_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_ch_name', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('clear_dtrack1_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack1_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('clear_dtrack2_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack2_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('dukpt_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('dukpt_pin_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            )
        ]
    },
    'csnbfpee': {
        'linux': {
            'name': 'CSNBFPEE',
            'description': 'FPE Encipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEFPEE',
            'description': 'FPE Encipher',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_pan_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_pan', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('clear_cardholder_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_cardholder_name', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('clear_dtrack1_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack1_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('clear_dtrack2_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack2_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('enc_pan_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_pan', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('enc_cardholder_name_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_cardholder_name', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('enc_dtrack1_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack1_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('enc_dtrack2_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack2_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('dukpt_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('dukpt_pin_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_pan_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_pan', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('clear_ch_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_ch_name', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('clear_dtrack1_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack1_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('clear_dtrack2_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_dtrack2_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('enc_pan_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_pan', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('enc_ch_name_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_ch_name', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('enc_dtrack1_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack1_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('enc_dtrack2_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('enc_dtrack2_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('dukpt_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('dukpt_pin_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            )
        ]
    },
    'csnbfpet': {
        'linux': {
            'name': 'CSNBFPET',
            'description': 'FPE Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEFPET',
            'description': 'FPE Translate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_pan_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_pan', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('input_cardholder_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_cardholder_name', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('input_dtrack1_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_dtrack1_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('input_dtrack2_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_dtrack2_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('input_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('output_pan_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_pan', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('output_cardholder_name_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_cardholder_name', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('output_dtrack1_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_dtrack1_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('output_dtrack2_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_dtrack2_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('dukpt_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('dukpt_pin_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 33, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_pan_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_pan', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('input_ch_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_ch_name', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('input_dtrack1_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_dtrack1_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('input_dtrack2_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_dtrack2_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('input_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('output_pan_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_pan', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('output_ch_name_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_ch_name', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('output_dtrack1_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_dtrack1_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('output_dtrack2_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_dtrack2_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('dukpt_pin_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('dukpt_pin_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 31, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 33, 1, 0)
            )
        ]
    },
    'csnbffxd': {
        'linux': {
            'name': 'CSNBFFXD',
            'description': 'Format Preserving Algorithms Decipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEFFXD',
            'description': 'Format Preserving Algorithms Decipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('tweak_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('tweak', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('tweak_alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('tweak_alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('ciphertext_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ciphertext', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('plaintext_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('plaintext', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csnbffxe': {
        'linux': {
            'name': 'CSNBFFXE',
            'description': 'Format Preserving Algorithms Encipher',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEFFXE',
            'description': 'Format Preserving Algorithms Encipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('tweak_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('tweak', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('tweak_alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('tweak_alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('plaintext_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('plaintext', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('ciphertext_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('ciphertext', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csnbffxt': {
        'linux': {
            'name': 'CSNBFFXT',
            'description': 'Format Preserving Algorithms Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEFFXT',
            'description': 'Format Preserving Algorithms Translate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('input_tweak_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_tweak', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('input_tweak_alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_tweak_alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('input_alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('output_tweak_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_tweak', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('output_tweak_alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_tweak_alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('output_alphabet_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_alphabet', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('ciphertext_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('ciphertext', _ZCT_BIN, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 27, 1, 0)
            )
        ]
    },
    'csnbpcu': {
        'linux': {
            'name': 'CSNBPCU',
            'description': 'PIN Change/Unblock',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPCU',
            'description': 'PIN Change/Unblock',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('authentication_master_key_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('authentication_master_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('encryption_master_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('encryption_master_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('key_generation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_generation_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('new_reference_pin_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_reference_pin_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('new_reference_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('new_reference_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('new_reference_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('current_reference_pin_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_reference_pin_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 18, 1, _ZCS_OLDMK),
                ('current_reference_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('current_reference_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('current_reference_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('output_pin_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_pin_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('output_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('output_pin_message_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_message', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 26, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('authentication_issuer_master_key_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('authentication_issuer_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('encryption_issuer_master_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('encryption_issuer_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('key_generation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_generation_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('new_reference_pin_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_reference_pin_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('new_reference_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('new_reference_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('new_reference_pin_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('current_reference_pin_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_reference_pin_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 18, 1, _ZCS_OLDMK),
                ('current_reference_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('current_reference_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('current_reference_pin_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('output_pin_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('output_pin_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('output_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('output_pin_message_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_pin_message', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 26, 1, 0)
            )
        ]
    },
    'csnbpfo': {
        'linux': {
            'name': 'CSNBPFO',
            'description': 'Recover PIN from Offset',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEPFO',
            'description': 'Recover PIN from Offset',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('pin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('pin_generation_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_generation_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('offset', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('reserved_1', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 48, 0, 0, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 16, 1, 0)
            )
        ]
    },
    'csnbsky': {
        'linux': {
            'name': 'CSNBSKY',
            'description': 'Secure Messaging for Keys',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNESKY',
            'description': 'Secure Messaging for Keys',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('input_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('secmsg_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 64, 0, 0, _ZCS_OLDMK),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('key_offset', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_offset_field_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('enciphered_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('output_chaining_vector', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 8, 0, 0, 0)
            )
        ]
    },
    'csnbspn': {
        'linux': {
            'name': 'CSNBSPN',
            'description': 'Secure Messaging for PINs',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNESPN',
            'description': 'Secure Messaging for PINs',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('input_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 725, 0, 0, _ZCS_OLDMK),
                ('input_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('input_pan_data', _ZCT_PAND, _ZCD_IN, _ZCO_MAN, 21, 0, 0, 0),
                ('secmsg_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, 725, 0, 0, _ZCS_OLDMK),
                ('output_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 24, 0, 0, 0),
                ('output_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 12, 0, 0, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 16, 0, 0, 0),
                ('pin_offset', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pin_offset_field_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('enciphered_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('output_chaining_vector', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 16, 0, 0, 0)
            )
        ]
    },
    'csnbtrv': {
        'linux': {
            'name': 'CSNBTRV',
            'description': 'Transaction Validation',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNETRV',
            'description': 'Transaction Validation',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('transaction_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transaction_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('transaction_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transaction_info', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('validation_values_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('validation_values', _ZCT_CHAR, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('transaction_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transaction_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('transaction_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('transaction_info', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('validation_values_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('validation_values', _ZCT_CHAR, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csnbddpg': {
        'linux': {
            'name': 'CSNBDDPG',
            'description': 'DK Deterministic Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDDPG',
            'description': 'DK Deterministic PIN Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('account_info_er_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('account_info_er', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('pin_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_generation_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_generation_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 16, 1, _ZCS_OLDMK),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 18, 1, _ZCS_OLDMK),
                ('pin_print_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_print_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 20, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 22, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 24, 1, _ZCS_OLDMK),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 28, 1, 0),
                ('pin_print_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_print_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 30, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 32, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 34, 1, 0)
            )
        ]
    },
    'csnbdmp': {
        'linux': {
            'name': 'CSNBDMP',
            'description': 'DK Migrate PIN',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDMP',
            'description': 'DK Migrate PIN',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('iso1_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iso1_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 19, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 21, 1, _ZCS_OLDMK),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 23, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 29, 1, 0)
            )
        ]
    },
    'csnbdpmt': {
        'linux': {
            'name': 'CSNBDPMT',
            'description': 'DK PAN Modify in Transaction',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDPMT',
            'description': 'DK PAN Modify in Transaction',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('current_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('new_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('current_card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('current_card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('new_card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('new_card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('cmac_fus_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cmac_fus', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 19, 1, 0),
                ('iso_encrypted_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iso_encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 21, 1, 0),
                ('current_pin_reference_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_pin_reference_value', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 23, 1, 0),
                ('current_prw_random_number_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_prw_random_number', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 25, 1, 0),
                ('cmac_fus_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cmac_fus_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 27, 1, _ZCS_OLDMK),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 29, 1, _ZCS_OLDMK),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 31, 1, _ZCS_OLDMK),
                ('new_prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 33, 1, _ZCS_OLDMK),
                ('new_pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 35, 1, 0),
                ('new_prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 37, 1, 0)
            )
        ]
    },
    'csnbdpt': {
        'linux': {
            'name': 'CSNBDPT',
            'description': 'DK PAN Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDPT',
            'description': 'DK PAN Translate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('new_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('new_card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('current_encrypted_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 19, 1, 0),
                ('current_pin_block_mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_pin_block_mac', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 21, 1, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 23, 1, _ZCS_OLDMK),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 25, 1, _ZCS_OLDMK),
                ('iepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 27, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 29, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 31, 1, _ZCS_OLDMK),
                ('new_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 33, 1, 0),
                ('new_pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 35, 1, 0)
            )
        ]
    },
    'csnbdpc': {
        'linux': {
            'name': 'CSNBDPC',
            'description': 'DK PIN Change',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDPC',
            'description': 'DK PIN Change',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('cur_iso_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cur_iso_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('new_iso_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_iso_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('card_script_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_script_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('script_offset', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('script_offset_field_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('script_initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('script_initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('output_pin_profile', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 24, 0, 0, 0),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 24, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 26, 1, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 28, 1, _ZCS_OLDMK),
                ('cur_ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cur_ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 30, 1, _ZCS_OLDMK),
                ('new_ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 32, 1, _ZCS_OLDMK),
                ('script_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('script_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 34, 1, _ZCS_OLDMK),
                ('script_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('script_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 36, 1, _ZCS_OLDMK),
                ('new_prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 38, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 40, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 42, 1, _ZCS_OLDMK),
                ('script_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('script', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 44, 1, 0),
                ('script_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('script_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 46, 1, 0),
                ('new_pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 48, 1, 0),
                ('new_prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 50, 1, 0),
                ('output_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 52, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 54, 1, 0)
            )
        ]
    },
    'csnbdpv': {
        'linux': {
            'name': 'CSNBDPV',
            'description': 'DK PIN Verify',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDPV',
            'description': 'DK PIN Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('iso_encrypted_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iso_encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 19, 1, _ZCS_OLDMK)
            )
        ]
    },
    'csnbdpnu': {
        'linux': {
            'name': 'CSNBDPNU',
            'description': 'DK PRW Card Number Update',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDPNU',
            'description': 'DK PRW Card Number Update',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('iepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 19, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 21, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 23, 1, _ZCS_OLDMK),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('new_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('new_pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            )
        ]
    },
    'csnbdcu2': {
        'linux': {
            'name': 'CSNBDCU2',
            'description': 'DK PRW Card Number Update2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDCU2',
            'description': 'DK PRW Card Number Update2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('iepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 19, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 21, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 23, 1, _ZCS_OLDMK),
                ('opin_chip_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_chip_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 25, 1, _ZCS_OLDMK),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 27, 1, 0),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 31, 1, 0),
                ('new_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 33, 1, 0),
                ('new_pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 35, 1, 0),
                ('new_chip_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_chip_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 37, 1, 0)
            )
        ]
    },
    'csnbdpcg': {
        'linux': {
            'name': 'CSNBDPCG',
            'description': 'DK PRW CMAC Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDPCG',
            'description': 'DK PRW CMAC Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('current_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('new_pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('current_card_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('current_card_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('new_card_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_card_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('cmac_fus_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cmac_fus_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('cmac_fus_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cmac_fus', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0)
            )
        ]
    },
    'csnbdrpg': {
        'linux': {
            'name': 'CSNBDRPG',
            'description': 'DK Random PIN Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDRPG',
            'description': 'DK Random PIN Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pin_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 14, 1, _ZCS_OLDMK),
                ('pin_print_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_print_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 16, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 18, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 20, 1, _ZCS_OLDMK),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 22, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('pin_print_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_print_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 28, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 30, 1, 0)
            )
        ]
    },
    'csnbdrg2': {
        'linux': {
            'name': 'CSNBDRG2',
            'description': 'DK Random PIN Generate2',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDRG2',
            'description': 'DK Random PIN Generate2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('pan_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan_data', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pin_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 14, 1, _ZCS_OLDMK),
                ('pin_print_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_print_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 16, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 18, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 20, 1, _ZCS_OLDMK),
                ('opin_chip_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_chip_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 22, 1, _ZCS_OLDMK),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('pin_print_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_print_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 28, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 30, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 32, 1, 0),
                ('chip_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('chip_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 34, 1, 0)
            )
        ]
    },
    'csnbdrp': {
        'linux': {
            'name': 'CSNBDRP',
            'description': 'DK Regenerate PRW',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNEDRP',
            'description': 'DK Regenerate PRW',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 1, 0),
                ('card_p_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_p_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('card_t_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('card_t_data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('encrypted_pin_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypted_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pin_block_mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_block_mac', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('prw_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 15, 1, _ZCS_OLDMK),
                ('ipin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('ipin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 17, 1, _ZCS_OLDMK),
                ('iepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('iepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 19, 1, _ZCS_OLDMK),
                ('opin_encryption_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opin_encryption_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 21, 1, _ZCS_OLDMK),
                ('oepb_mac_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('oepb_mac_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 23, 1, _ZCS_OLDMK),
                ('pin_reference_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('pin_reference_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 25, 1, 0),
                ('prw_random_number_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('prw_random_number', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 27, 1, 0),
                ('new_encrypted_pin_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_encrypted_pin_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 29, 1, 0),
                ('new_pin_block_mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('new_pin_block_mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 31, 1, 0)
            )
        ]
    },
    'csndt34b': {
        'linux': {
            'name': 'CSNDT34B',
            'description': 'TR-34 Bind-Begin (CSNDT34B)',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFT34B',
            'description': 'TR-34 Bind-Begin',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('crl_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('crl', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('old_cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('old_cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('cred_krd_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_krd', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('output_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('crl_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('crl', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('old_cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('old_cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('cred_krd_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_krd', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('output_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csndt34c': {
        'linux': {
            'name': 'CSNDT34C',
            'description': 'TR-34 Bind-Complete',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFT34C',
            'description': 'TR-34 Bind-Complete',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_token_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_token', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('cred_krd_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cred_krd', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('random_number_token_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('random_number_token', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('output_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_token_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_token', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('cred_krd_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cred_krd', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('random_number_token_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('random_number_token', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('output_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            )
        ]
    },
    'csndt34d': {
        'linux': {
            'name': 'CSNDT34D',
            'description': 'TR-34 Key Distribution',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFT34D',
            'description': 'TR-34 Key Distribution',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('unwrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('unwrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('freshness_indicator_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('freshness_indicator', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('crl_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('crl', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('cred_krd_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_krd', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('key_version_number', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('opt_blocks_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_blocks', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 22, 1, 0),
                ('output_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('unwrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('unwrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('freshness_indicator_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('freshness_indicator', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('crl_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('crl', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('cred_krd_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_krd', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('key_version_number', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('opt_blocks_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_blocks', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 22, 1, 0),
                ('output_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 24, 1, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 26, 1, 0)
            )
        ]
    },
    'csndt34r': {
        'linux': {
            'name': 'CSNDT34R',
            'description': 'TR-34 Key Receive',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFT34R',
            'description': 'TR-34 Key Receive',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('input_freshness_indicator_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_freshness_indicator', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('output_freshness_indicator_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_freshness_indicator', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('input_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('cred_kdh_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cred_kdh', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('input_freshness_indicator_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_freshness_indicator', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('output_freshness_indicator_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_freshness_indicator', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0)
            )
        ]
    },
    'csnbt31c': {
        'linux': {
            'name': 'CSNBT31C',
            'description': 'TR31 Key Create',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNET31C',
            'description': 'TR-31 Create',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('key_name_1_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_name_1', 0, 0, 0, 0, 0, 0, 0),
                ('key_name_2_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_name_2', 0, 0, 0, 0, 0, 0, 0),
                ('clear_key_bit_length', 0, 0, 0, 0, 0, 0, 0),
                ('key_version_number_1', 0, 0, 0, 0, 0, 0, 0),
                ('key_version_number_2', 0, 0, 0, 0, 0, 0, 0),
                ('opt_blocks_1_length', 0, 0, 0, 0, 0, 0, 0),
                ('opt_blocks_1', 0, 0, 0, 0, 0, 0, 0),
                ('opt_blocks_2_length', 0, 0, 0, 0, 0, 0, 0),
                ('opt_blocks_2', 0, 0, 0, 0, 0, 0, 0),
                ('key_field_length_1', 0, 0, 0, 0, 0, 0, 0),
                ('key_field_length_2', 0, 0, 0, 0, 0, 0, 0),
                ('kek_key_identifier_1_length', 0, 0, 0, 0, 0, 0, 0),
                ('kek_key_identifier_1', 0, 0, 0, 0, 0, 0, 0),
                ('kek_key_identifier_2_length', 0, 0, 0, 0, 0, 0, 0),
                ('kek_key_identifier_2', 0, 0, 0, 0, 0, 0, 0),
                ('generated_key_identifier_1_length', 0, 0, 0, 0, 0, 0, 0),
                ('generated_key_identifier_1', 0, 0, 0, 0, 0, 0, 0),
                ('generated_key_identifier_2_length', 0, 0, 0, 0, 0, 0, 0),
                ('generated_key_identifier_2', 0, 0, 0, 0, 0, 0, 0),
                ('ob_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('ob_data', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved2', 0, 0, 0, 0, 0, 0, 0),
                ('reserved3_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved3', 0, 0, 0, 0, 0, 0, 0),
                ('reserved4_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved4', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbt31x': {
        'linux': {
            'name': 'CSNBT31X',
            'description': 'TR31 Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNET31X',
            'description': 'TR-31 Translate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_version_number', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('key_field_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('unwrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('unwrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('wrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('wrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('opt_blocks_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_blocks', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('tr31_key_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_version_number', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('key_field_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('unwrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('unwrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('wrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('wrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('opt_blks_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_blocks', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('tr31_key_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            )
        ]
    },
    'csnbt31i': {
        'linux': {
            'name': 'CSNBT31I',
            'description': 'TR31 Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNET31I',
            'description': 'TR-31 Import',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('tr31_key_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('unwrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('unwrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('wrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('wrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('num_opt_blocks', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('cv_source', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('protection_method', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('tr31_key_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('unwrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('unwrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('wrap_kek_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('wrap_kek_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('output_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('num_opt_blks', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('cv_source', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('protection_method', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0)
            )
        ]
    },
    'csnbt31p': {
        'linux': {
            'name': 'CSNBT31P',
            'description': 'TR31 Key Token Parse',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNET31P',
            'description': 'TR-31 Parse',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('tr31_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('key_block_version', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('key_block_length', _ZCT_INT, _ZCD_OUT, _ZCO_OPT, 4, 0, 0, 0),
                ('key_usage', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 2, 0, 0, 0),
                ('algorithm', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('mode', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('key_version_number', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 2, 0, 0, 0),
                ('exportability', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('num_opt_blocks', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('tr31_key_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('key_block_version', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('key_block_length', _ZCT_INT, _ZCD_OUT, _ZCO_OPT, 4, 0, 0, 0),
                ('key_usage', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 2, 0, 0, 0),
                ('algorithm', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('mode', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('key_version_number', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 2, 0, 0, 0),
                ('exportability', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('num_opt_blocks', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0)
            )
        ]
    },
    'csnbt31o': {
        'linux': {
            'name': 'CSNBT31O',
            'description': 'TR31 Optional Data Build',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNET31O',
            'description': 'TR-31 Optional Data Build',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('opt_blocks_bfr_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opt_blocks_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_blocks', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 7, 1, _ZCS_LENSET + 8),
                ('num_opt_blocks', _ZCT_INT, _ZCD_OUT, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_block_id', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('opt_block_data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opt_block_data', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csnbt31r': {
        'linux': {
            'name': 'CSNBT31R',
            'description': 'TR31 Optional Data Read',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNET31R',
            'description': 'TR-31 Optional Data Read',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('tr31_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('opt_block_id', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 2, 0, 0, 0),
                ('num_opt_blocks', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_block_ids', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 2, 0),
                ('opt_block_lengths', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 2, 0),
                ('opt_block_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_block_data', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('tr31_key_block_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('tr31_key_block', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('opt_block_id', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 2, 0, 0, 0),
                ('num_opt_blocks', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_block_ids', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 2, 0),
                ('opt_block_lengths', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 2, 0),
                ('opt_block_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('opt_block_data', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csnddsg': {
        'linux': {
            'name': 'CSNDDSG',
            'description': 'Digital Signature Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFDSG',
            'description': 'Digital Signature Generate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('pka_private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pka_private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('signature_field_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('signature_bit_length', _ZCT_INT, _ZCD_OUT, _ZCO_OPT, 4, 0, 0, 0),
                ('signature_field', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('signature_field_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('signature_bit_length', _ZCT_INT, _ZCD_OUT, _ZCO_OPT, 4, 0, 0, 0),
                ('signature_field', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csnddsv': {
        'linux': {
            'name': 'CSNDDSV',
            'description': 'Digital Signature Verify',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFDSV',
            'description': 'Digital Signature Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('pka_public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pka_public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('data_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('data', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('signature_field_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('signature_field', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csndpkg': {
        'linux': {
            'name': 'CSNDPKG',
            'description': 'PKA Key Generate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKG',
            'description': 'PKA Key Generate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('regeneration_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('regeneration_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('skeleton_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('skeleton_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, 725, 0, 0, 0),
                ('generated_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('regeneration_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('regeneration_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('skeleton_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('skeleton_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, 725, 0, 0, 0),
                ('generated_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('generated_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csndpki': {
        'linux': {
            'name': 'CSNDPKI',
            'description': 'PKA Key Import',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKI',
            'description': 'PKA Key Import',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('source_key_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, 725, 0, 0, 0),
                ('target_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, 725, 0, 0, 0),
                ('target_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csndpkb': {
        'linux': {
            'name': 'CSNDPKB',
            'description': 'PKA Key Token Build',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKB',
            'description': 'PKA Key Token Build',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_value_structure_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_value_structure', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('private_key_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('private_key_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('user_definable_associated_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('user_definable_associated_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('key_derivation_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_derivation_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reserved_3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('reserved_4_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_4', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved_5_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_5', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csndktc': {
        'linux': {
            'name': 'CSNDKTC',
            'description': 'PKA Key Token Change',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFKTC',
            'description': 'PKA Key Token Change',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0)
            )
        ]
    },
    'csndpkt': {
        'linux': {
            'name': 'CSNDPKT',
            'description': 'PKA Key Translate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKT',
            'description': 'PKA Key Translate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('source_transport_key_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('source_transport_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('target_transport_key_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('target_transport_key', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('target_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('target_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('source_transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('source_transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('target_transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('target_transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('target_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('target_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csndpkx': {
        'linux': {
            'name': 'CSNDPKX',
            'description': 'PKA Public Key Extract',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPKX',
            'description': 'PKA Public Key Extract',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('target_public_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_public_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 9, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('source_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('source_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('target_public_key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_public_key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csndpic': {
        'linux': {
            'name': 'CSNDPIC',
            'description': 'Public Infrastructure Certificate',
            'parm_index': 0
        },
        'zos': {
            'name': 'CSNFPIC',
            'description': 'Public Infrastructure Certificate',
            'parm_index': 1
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('subject_private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('subject_private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('subject_name_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('subject_name', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('extensions_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('extensions', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved4', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved5', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved6_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved6', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('certificate_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('certificate', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 23, 1, 0)
            ),
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('subject_private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('subject_private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('subject_name_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('subject_name', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('extensions_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('extensions', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved4', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved5', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved6_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved6_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('certificate_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('certificate', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 23, 1, 0)
            )
        ]
    },
    'csndpim': {
        'linux': {
            'name': 'CSNDPIM',
            'description': 'Public Infrastructure Manage',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('certificate_length', 0, 0, 0, 0, 0, 0, 0),
                ('certificate', 0, 0, 0, 0, 0, 0, 0),
                ('label_length', 0, 0, 0, 0, 0, 0, 0),
                ('label', 0, 0, 0, 0, 0, 0, 0),
                ('hash_length', 0, 0, 0, 0, 0, 0, 0),
                ('hash', 0, 0, 0, 0, 0, 0, 0),
                ('input_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('input_data', 0, 0, 0, 0, 0, 0, 0),
                ('output_data_length', 0, 0, 0, 0, 0, 0, 0),
                ('output_data', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1_length', 0, 0, 0, 0, 0, 0, 0),
                ('reserved1', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbxea': {
        'linux': {
            'name': 'CSNBXEA',
            'description': 'Code Conversion',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),  # CAUTION: might be mandatory
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),  # CAUTION: might be mandatory
                ('text_length', 0, 0, 0, 0, 0, 0, 0),
                ('source_text', 0, 0, 0, 0, 0, 0, 0),
                ('target_text', 0, 0, 0, 0, 0, 0, 0),
                ('code_table_length', 0, 0, 0, 0, 0, 0, 0),
                ('code_table', 0, 0, 0, 0, 0, 0, 0)
            )
        ]
    },
    'csnbdcm': {
        'zos': {
            'name': 'CSNEDCM',
            'description': 'Derive ICC MK',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('issuer_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('issuer_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('icc_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('icc_master_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('pan_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 13, 1, 0),
                ('pan_seq_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 1, 0, 0, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 18, 1, 0)
            )
        ]
    },
    'csnbdsk': {
        'zos': {
            'name': 'CSNEDSK',
            'description': 'Derive Session Key',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('session_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('session_key_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('pan_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pan_seq_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 1, 0, 0, 0),
                ('atc', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 2, 0, 0, 0),
                ('unpredictable_number_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('unpredictable_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 19, 1, 0)
            )
        ]
    },
    'csnbgim': {
        'zos': {
            'name': 'CSNEGIM',
            'description': 'Generate Issuer MK',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('issuer_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('issuer_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('issuer_arpc_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('issuer_arpc_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('transport_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('transport_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0)
            )
        ]
    },
    'csnbket': {
        'zos': {
            'name': 'CSNEKET',
            'description': 'Key Encryption Translate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('kek_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('kek_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_in_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_in', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('key_out_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_out', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csnbskm': {
        'zos': {
            'name': 'CSNESKM',
            'description': 'Multiple Secure Key Import',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('clear_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('key_form', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('imported_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('imported_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csnbski': {
        'zos': {
            'name': 'CSNESKI',
            'description': 'Secure Key Import',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 16, 0, 0, 0),
                ('key_type', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('key_form', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('importer_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, _ZCS_OLDMK),
                ('key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 64, 0, 0, 0)
            )
        ]
    },
    'csnbski2': {
        'zos': {
            'name': 'CSNESKI2',
            'description': 'Secure Key Import2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_key_bit_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 256, 0, 0, 0),
                ('key_name_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('user_associated_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('user_associated_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('key_encrypting_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('target_key_identifier_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('target_key_identifier', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 15, 1, 0)
            )
        ]
    },
    'csnbdco': {
        'zos': {
            'name': 'CSNEDCO',
            'description': 'Decode',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 8, 0, 0, 0)
            )
        ]
    },
    'csnbeco': {
        'zos': {
            'name': 'CSNEECO',
            'description': 'Encode',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('clear_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 8, 0, 0, 0)
            )
        ]
    },
    'csnbsyd': {
        'zos': {
            'name': 'CSNESYD',
            'description': 'Symmetric Key Decipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_parms', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('block_size', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('cipher_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('clear_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('optional_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 20, 1, 0)
            )
        ]
    },
    'csnbsye': {
        'zos': {
            'name': 'CSNESYE',
            'description': 'Symmetric Key Encipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_parms', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('block_size', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('clear_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('cipher_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('optional_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 20, 1, 0)
            )
        ]
    },
    'csnbsmg': {
        'zos': {
            'name': 'CSNESMG',
            'description': 'Symmetric MAC Generate',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 1, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 8, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0)
            )
        ]
    },
    'csnbsmv': {
        'zos': {
            'name': 'CSNESMV',
            'description': 'Symmetric MAC Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 1, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 8, 0),
                ('chaining_vector_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0)
            )
        ]
    },
    'csnbesc': {
        'zos': {
            'name': 'CSNEESC',
            'description': 'EMV Scripting Service',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('issuer_integrity_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('issuer_integrity_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('issuer_confidentiality_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('issuer_confidentiality_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('new_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('new_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, _ZCS_OLDMK),
                ('current_pin_encrypting_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('current_pin_encrypting_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, _ZCS_OLDMK),
                ('new_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('current_pin_block', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('pan_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 17, 1, 0),
                ('pan_seq_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 1, 0, 0, 0),
                ('atc', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('unpredictable_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('input_message_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('input_message', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 22, 1, 0),
                ('pin_offset', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('pin_format', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 17, 0, 0, 0),
                ('output_message_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_message', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 26, 1, 0),
                ('mac_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('mac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 28, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 30, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 32, 1, 0)
            )
        ]
    },
    'csnbeac': {
        'zos': {
            'name': 'CSNEEAC',
            'description': 'EMV Transaction',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('issuer_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('issuer_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('issuer_arpc_master_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('issuer_arpc_master_key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, _ZCS_OLDMK),
                ('pan_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('pan_seq_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 1, 0, 0, 0),
                ('cryptogram_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cryptogram_info', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 14, 1, 0),
                ('atc', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('arc_or_csu', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('arqc', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('arpc', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 8, 0, 0, 0),
                ('unpredictable_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('optional_data1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 21, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 23, 1, 0)
            )
        ]
    },
    'csnbevf': {
        'zos': {
            'name': 'CSNEEVF',
            'description': 'EMV Verification Functions',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('pan_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('pan', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 9, 1, 0),
                ('pan_seq_number', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 1, 0, 0, 0),
                ('atc', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, 2, 0, 0, 0),
                ('unpredictable_number', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 18, 1, 0)
            )
        ]
    },
    'csnbfld': {
        'zos': {
            'name': 'CSNEFLD',
            'description': 'Field Level Decipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_derive_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_derive_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('context_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('context_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('charset_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('charset_parms', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('source_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, _ZCS_IGNORE),
                ('source_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('source_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('target_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, _ZCS_IGNORE),
                ('target_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('target_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csnbfle': {
        'zos': {
            'name': 'CSNEFLE',
            'description': 'Field Level Encipher',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_identifier', _ZCT_KEYID, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 7, 1, _ZCS_OLDMK),
                ('key_derive_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('key_derive_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('context_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('context_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('charset_parms_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('charset_parms', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('source_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, _ZCS_IGNORE),
                ('source_text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('source_text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('target_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, _ZCS_IGNORE),
                ('target_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('target_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csndsbc': {
        'zos': {
            'name': 'CSNFSBC',
            'description': 'SET Block Compose',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('block_contents_identifier', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 1, 0, 0, 0),
                ('xdata_string_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('xdata_string', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('data_to_encrypt_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('data_to_encrypt', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 1, 0),
                ('data_to_hash_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('data_to_hash', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('rsa_public_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rsa_public_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('des_key_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('des_key_block', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('rsa_oaep_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('rsa_oaep_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 19, 1, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 18, 0, 0, 0),
                ('des_encrypted_data_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, _ZCS_ROUNDN + 8)
            )
        ]
    },
    'csndsbd': {
        'zos': {
            'name': 'CSNFSBD',
            'description': 'SET Block Decompose',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('rsa_oaep_block_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rsa_oaep_block', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('des_encrypted_data_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('des_encrypted_data_block', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 8, 0, 0, 0),
                ('rsa_private_key_identifier_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rsa_private_key_identifier', _ZCT_KEYID, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('des_key_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('des_key_block', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('block_contents_identifier', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, 1, 0, 0, 0),
                ('xdata_string_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('xdata_string', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 17, 1, 0),
                ('chaining_vector', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 18, 0, 0, 0),
                ('data_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('hash_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('hash_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 21, 1, 0)
            )
        ]
    },
    'csnbkrc2': {
        'zos': {
            'name': 'CSNEKRC2',
            'description': 'CKDS Key Record Create2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csnbkrr2': {
        'zos': {
            'name': 'CSNEKRR2',
            'description': 'CKDS Key Record Read2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('key_token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csnbkrw2': {
        'zos': {
            'name': 'CSNEKRW2',
            'description': 'CKDS Key Record Write2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_token_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('key_token', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('key_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0)
            )
        ]
    },
    'csfcrc': {
        'zos': {
            'name': 'CSFCRC6',
            'description': 'Coordinated KDS Administration',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('function', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('new_data_set_name', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('data_set_type', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('backup_data_set_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 44, 0, 0, 0),
                ('archive_data_set_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 44, 0, 0, 0),
                ('feedback_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('feedback', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csfmps': {
        'zos': {
            'name': 'CSFMPS6',
            'description': 'ICSF Multi-Purpose Service',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('data_set_name', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 44, 0, 0, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('reserved3_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved3', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csfkdsl': {
        'zos': {
            'name': 'CSFKDSL6',
            'description': 'Key Data Set List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('label_filter_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('label_filter', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('search_criteria_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('search_criteria', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('label_count', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('output_list_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_list', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 12, 1, _ZCS_NULL2SP),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 14, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 16, 1, 0),
                ('continuation_area', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, 100, 0, 0, 0)
            )
        ]
    },
    'csfkdmr': {
        'zos': {
            'name': 'CSFKDMR6',
            'description': 'Key Data Set Metadata Read',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('record_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 72, 0, 0, 0),
                ('metadata_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('metadata_list', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('output_list_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('output_list', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 14, 1, 0)
            )
        ]
    },
    'csfkdmw': {
        'zos': {
            'name': 'CSFKDMW6',
            'description': 'Key Data Set Metadata Write',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('label_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('label_list', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 72, 0),
                ('metadata_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('metadata_list', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('results_list', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 7, 8, 0),
                ('reserved1_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved1', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 12, 1, 0),
                ('reserved2_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved2', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 14, 1, 0)
            )
        ]
    },
    'csfrrt': {
        'zos': {
            'name': 'CSFRRT6',
            'description': 'Key Data Set Record Retrieve',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('kds_type', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('record_label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 72, 0, 0, 0),
                ('record_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('record_buffer', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csfkdu': {
        'zos': {
            'name': 'CSFKDU6',
            'description': 'Key Data Set Update',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('kds_name', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('orig_sys_id', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 8, 0, 0, 0),
                ('record_before_len', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('record_before', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('record_after_len', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('record_after', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('func_req', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('opt_flags', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('orig_return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0)
            )
        ]
    },
    'csndkrr2': {
        'zos': {
            'name': 'CSNFKRR2',
            'description': 'PKDS Key Record Read2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('label', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 64, 0, 0, 0),
                ('token_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('token', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csfstat': {
        'zos': {
            'name': 'CSFSTAT6',
            'description': 'Cryptographic Usage Statistic',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('stat_data', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reserved_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csfiqa': {
        'zos': {
            'name': 'CSFIQA6',
            'description': 'ICSF Query Algorithm',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('returned_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('returned_data', _ZCT_CHAR, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csfiqf': {
        'zos': {
            'name': 'CSFIQF6',
            'description': 'ICSF Query Facility',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('returned_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('returned_data', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 7, 1, _ZCS_NDSWPINT + 6),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csfiqf2': {
        'zos': {
            'name': 'CSFIQF26',
            'description': 'ICSF Query Facility2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('returned_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('returned_data', _ZCT_BIN, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('reserved_data_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('reserved_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0)
            )
        ]
    },
    'csfpci': {
        'zos': {
            'name': 'CSFPCI6',
            'description': 'PCI Interface',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('target_pci_coprocessor', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('target_pci_coprocessor_serial_number', _ZCT_CHAR, _ZCD_BOTH, _ZCO_OPT, 8, 0, 0, 0),
                ('request_block_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('request_block', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('request_data_block_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('request_data_block', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('reply_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('reply_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('reply_data_block_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('reply_data_block', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('masks_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('masks_data', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 17, 1, 0)
            )
        ]
    },
    'csfpdmk': {
        'zos': {
            'name': 'CSFPDMK6',
            'description': 'PKCS #11 Derive Multiple Keys',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('base_key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('parms_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('parms_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfpdvk': {
        'zos': {
            'name': 'CSFPDVK6',
            'description': 'PKCS #11 Derive Key',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('base_key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('parms_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('parms_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 10, 1, 0),
                ('target_key_handle', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 44, 0, 0, 0)
            )
        ]
    },
    'csfpgav': {
        'zos': {
            'name': 'CSFPGAV6',
            'description': 'PKCS #11 Get Attribute Value',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 6, 8, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csfpgkp': {
        'zos': {
            'name': 'CSFPGKP6',
            'description': 'PKCS #11 Generate Key Pair',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('token_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 6, 8, 0),
                ('public_key_attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('public_key_attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0),
                ('public_key_object_handle', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 44, 0, 0, 0),
                ('private_key_attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 11, 1, 0),
                ('private_key_object_handle', _ZCT_CHAR, _ZCD_OUT, _ZCO_OPT, 44, 0, 0, 0)
            )
        ]
    },
    'csfpgsk': {
        'zos': {
            'name': 'CSFPGSK6',
            'description': 'PKCS #11 Generate Secret Key',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_BOTH, _ZCO_MAN, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0),
                ('parms_list_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('parms_list', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfphmg': {
        'zos': {
            'name': 'CSFPHMG6',
            'description': 'PKCS #11 Generate Keyed MAC',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('hmac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('hmac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csfphmv': {
        'zos': {
            'name': 'CSFPHMV6',
            'description': 'PKCS #11 Verify Keyed MAC',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('hmac_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('hmac', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csfpowh': {
        'zos': {
            'name': 'CSFPOWH6',
            'description': 'PKCS #11 One-Way Hash, Sign, or Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('text_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('text', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('hash_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('hash', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0)
            )
        ]
    },
    'csfppks': {
        'zos': {
            'name': 'CSFPPKS6',
            'description': 'PKCS #11 Private Key Sign',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('cipher_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('clear_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfppkv': {
        'zos': {
            'name': 'CSFPPKV6',
            'description': 'PKCS #11 Public Key Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('cipher_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_value', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfpprf': {
        'zos': {
            'name': 'CSFPPRF6',
            'description': 'PKCS #11 Pseudo-Random Function',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('handle', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 44, 0, 0, 0),
                ('parms_list_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('parms_list', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('prf_output_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('prf_output', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfpsav': {
        'zos': {
            'name': 'CSFPSAV6',
            'description': 'PKCS #11 Set Attribute Value',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 6, 8, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csfpskd': {
        'zos': {
            'name': 'CSFPSKD6',
            'description': 'PKCS #11 Secret Key Decrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('cipher_text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0),
                ('cipher_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('clear_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('clear_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0)
            )
        ]
    },
    'csfpske': {
        'zos': {
            'name': 'CSFPSKE6',
            'description': 'PKCS #11 Secret Key Encrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 5, 8, 0),
                ('key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('clear_text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0),
                ('clear_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('cipher_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 15, 1, 0),
                ('cipher_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0)
            )
        ]
    },
    'csfpskr': {
        'zos': {
            'name': 'CSFPSKR6',
            'description': 'PKCS #11 Secret Key Reencrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('decrypt_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('encrypt_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('decrypt_initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('decrypt_initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('encrypt_initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('encrypt_initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 11, 1, 0),
                ('chain_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('chain_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 13, 1, 0),
                ('decrypt_text_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('decrypt_text', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 15, 1, 0),
                ('decrypt_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('encrypt_text_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('encrypt_text', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 18, 1, 0),
                ('encrypt_text_id', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0)
            )
        ]
    },
    'csfptrc': {
        'zos': {
            'name': 'CSFPTRC6',
            'description': 'PKCS #11 Token Record Create',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_BOTH, _ZCO_MAN, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 8, 1, 0)
            )
        ]
    },
    'csfptrd': {
        'zos': {
            'name': 'CSFPTRD6',
            'description': 'PKCS #11 Token Record Delete',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0)
            )
        ]
    },
    'csfptrl': {
        'zos': {
            'name': 'CSFPTRL6',
            'description': 'PKCS #11 Token Record List',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('handle', _ZCT_CHAR, _ZCD_IN, _ZCO_OPT, 44, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0),
                ('search_template_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('search_template', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('list_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('handle_count', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('output_list', _ZCT_CHAR, _ZCD_OUT, _ZCO_MAN, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfpuwk': {
        'zos': {
            'name': 'CSFPUWK6',
            'description': 'PKCS #11 Unwrap Key',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('wrapped_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('wrapped_key', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 7, 1, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('unwrapping_key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('attribute_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('attribute_list', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0),
                ('target_key_handle', _ZCT_CHAR, _ZCD_OUT, _ZCO_MAN, 44, 0, 0, 0)
            )
        ]
    },
    'csfpwpk': {
        'zos': {
            'name': 'CSFPWPK6',
            'description': 'PKCS #11 Wrap Key',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('source_key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('wrapping_key_handle', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, 44, 0, 0, 0),
                ('initialization_vector_length', _ZCT_INT, _ZCD_IN, _ZCO_OPT, 4, 0, 0, 0),
                ('initialization_vector', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 9, 1, 0),
                ('wrapped_key_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('wrapped_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 11, 1, 0)
            )
        ]
    },
    'csfpgk2': {
        'zos': {
            'name': 'CSFPGK26',
            'description': 'PKCS #11 Generate Secret Key2',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 6, 8, 0),
                ('clear_key_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_key', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 8, 1, 0),
                ('parms_list_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('parms_list', _ZCT_BIN, _ZCD_BOTH, _ZCO_MAN, _ZCL_VAR, 10, 1, 0)
            )
        ]
    },
    'csfppd2': {
        'zos': {
            'name': 'CSFPPD26',
            'description': 'PKCS #11 Private Key Structure Decrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('cipher_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('clear_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('private_key_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_info', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csfpps2': {
        'zos': {
            'name': 'CSFPPS26',
            'description': 'PKCS #11 Private Key Structure Sign',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('hash_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('hash', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('signature_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('signature', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('private_key_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('private_key_info', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csfppe2': {
        'zos': {
            'name': 'CSFPPE26',
            'description': 'PKCS #11 Public Key Structure Encrypt',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('clear_value_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('clear_value', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('cipher_value_length', _ZCT_INT, _ZCD_BOTH, _ZCO_MAN, 4, 0, 0, 0),
                ('cipher_value', _ZCT_BIN, _ZCD_OUT, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('subject_public_key_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('subject_public_key_info', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0)
            )
        ]
    },
    'csfppv2': {
        'zos': {
            'name': 'CSFPPV26',
            'description': 'PKCS #11 Public Key Structure Verify',
            'parm_index': 0
        },
        'parms': [
            (
                ('return_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('reason_code', _ZCT_INT, _ZCD_OUT, _ZCO_MAN, 4, 0, 0, 0),
                ('exit_data_length', _ZCT_INT, _ZCD_BOTH, _ZCO_OPT, 4, 0, 0, 0),
                ('exit_data', _ZCT_BIN, _ZCD_BOTH, _ZCO_OPT, _ZCL_VAR, 3, 1, 0),
                ('rule_array_count', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('rule_array', _ZCT_CHAR, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 5, 8, 0),
                ('signature_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('signature', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 7, 1, 0),
                ('reserved', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, 0, 0, 0, 0),
                ('hash_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('hash', _ZCT_BIN, _ZCD_IN, _ZCO_OPT, _ZCL_VAR, 10, 1, 0),
                ('subject_public_key_info_length', _ZCT_INT, _ZCD_IN, _ZCO_MAN, 4, 0, 0, 0),
                ('subject_public_key_info', _ZCT_BIN, _ZCD_IN, _ZCO_MAN, _ZCL_VAR, 12, 1, 0)
            )
        ]
    }
}
# unmodeled parm lists: 28
# total verbs available: 207

if _plat in _verb['csuaacm']:
    if _plat == 'linux':
        def csuaacm(**kw):
            """
            csuaacm - Access Control Maintenance

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            name                                                
            output_data_length                                  
            output_data                                         
            """
            return _do('csuaacm', kw)

if _plat in _verb['csuaact']:
    if _plat == 'linux':
        def csuaact(**kw):
            """
            csuaact - Access Control Tracking

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            role_id_length                                      
            role_id                                             
            output_data_length                                  
            output_data                                         
            reserved1_length                                    
            reserved1                                           
            reserved2_length                                    
            reserved2                                           
            """
            return _do('csuaact', kw)

if _plat in _verb['csuacfq']:
    if _plat == 'linux':
        def csuacfq(**kw):
            """
            csuacfq - Cryptographic Facility Query

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          Both
            rule_array*                                          String           Both
            verb_data_length                                     Integer          Both
            verb_data                                            Binary           Out 
            """
            return _do('csuacfq', kw)

if _plat in _verb['csuacfv']:
    if _plat == 'linux':
        def csuacfv(**kw):
            """
            csuacfv - Cryptographic Facility Version

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            version_data_length                                 
            version_data                                        
            """
            return _do('csuacfv', kw)

if _plat in _verb['csuacra']:
    if _plat == 'linux':
        def csuacra(**kw):
            """
            csuacra - Cryptographic Resource Allocate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            resource_name_length                                
            resource_name                                       
            """
            return _do('csuacra', kw)

if _plat in _verb['csuacrd']:
    if _plat == 'linux':
        def csuacrd(**kw):
            """
            csuacrd - Cryptographic Resource Deallocate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_countrule_array                          
            resource_name_length                                
            resource_name                                       
            """
            return _do('csuacrd', kw)

if _plat in _verb['csnbksi']:
    if _plat == 'linux':
        def csnbksi(**kw):
            """
            csnbksi - Key Storage Initialization

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_storage_file_name_length                        
            key_storage_file_name                               
            key_storage_description_length                      
            key_storage_description                             
            clear_master_key                                    
            """
            return _do('csnbksi', kw)

if _plat in _verb['csualgq']:
    if _plat == 'linux':
        def csualgq(**kw):
            """
            csualgq - Log Query

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            log_number_or_level                                 
            reserved0                                           
            log_data_length                                     
            log_data                                            
            reserved1_length                                    
            reserved1                                           
            reserved2_length                                    
            reserved2                                           
            """
            return _do('csualgq', kw)

if _plat in _verb['csnbmkp']:
    if _plat == 'linux':
        def csnbmkp(**kw):
            """
            csnbmkp - Master Key Process

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_part                                            
            """
            return _do('csnbmkp', kw)

if _plat in _verb['csuarnt']:
    if _plat == 'linux':
        def csuarnt(**kw):
            """
            csuarnt - Random Number Tests

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            """
            return _do('csuarnt', kw)

if _plat in _verb['csnbcki']:
    if _plat == 'linux':
        def csnbcki(**kw):
            """
            csnbcki - Clear Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            clear_key*                                           Binary           In  
            target_key_identifier                                Binary           Out 
            """
            return _do('csnbcki', kw)
    if _plat == 'zos':
        def csnbcki(**kw):
            """
            csnbcki - Clear Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            clear_key*                                           Binary           In  
            key_identifier                                       Binary           Out 
            """
            return _do('csnbcki', kw)

if _plat in _verb['csnbcvg']:
    if _plat == 'linux':
        def csnbcvg(**kw):
            """
            csnbcvg - Control Vector Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_type*                                            String           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            reserved                                             Binary           In  
            control_vector                                       Binary           Out 
            """
            return _do('csnbcvg', kw)
    if _plat == 'zos':
        def csnbcvg(**kw):
            """
            csnbcvg - Control Vector Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_type*                                            String           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            reserved                                             Binary           In  
            control_vector                                       Binary           Out 
            """
            return _do('csnbcvg', kw)

if _plat in _verb['csnbcvt']:
    if _plat == 'linux':
        def csnbcvt(**kw):
            """
            csnbcvt - Control Vector Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            kek_key_identifier*                                  Key label/token  Both
            source_key_token*                                    Binary           In  
            array_key_left_identifier*                           Key label/token  Both
            mask_array_left*                                     Binary           In  
            array_key_right_identifier*                          Key label/token  Both
            mask_array_right*                                    Binary           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            target_key_token                                     Binary           Both
            """
            return _do('csnbcvt', kw)
    if _plat == 'zos':
        def csnbcvt(**kw):
            """
            csnbcvt - Control Vector Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            kek_key_identifier*                                  Key label/token  Both
            source_key_token*                                    Binary           In  
            array_key_left*                                      Key label/token  Both
            mask_array_left*                                     Binary           In  
            array_key_right*                                     Key label/token  Both
            mask_array_right*                                    Binary           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            target_key_token                                     Binary           Both
            """
            return _do('csnbcvt', kw)

if _plat in _verb['csnbcve']:
    if _plat == 'linux':
        def csnbcve(**kw):
            """
            csnbcve - Cryptographic Variable Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            c_variable_encrypting_key_identifier*                Key label/token  Both
            text_length*                                         Integer          In  
            plain_text*                                          Binary           In  
            initialization_vector                                Binary           In  
            cipher_text                                          Binary           Out 
            """
            return _do('csnbcve', kw)
    if _plat == 'zos':
        def csnbcve(**kw):
            """
            csnbcve - Cryptographic Variable Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            c_variable_encrypting_key_identifier*                Key label/token  Both
            text_length*                                         Integer          In  
            plaintext*                                           Binary           In  
            initialization_vector                                Binary           In  
            ciphertext                                           Binary           Out 
            """
            return _do('csnbcve', kw)

if _plat in _verb['csnbdkx']:
    if _plat == 'linux':
        def csnbdkx(**kw):
            """
            csnbdkx - Data Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            source_key_identifier*                               Key label/token  Both
            exporter_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Both
            """
            return _do('csnbdkx', kw)
    if _plat == 'zos':
        def csnbdkx(**kw):
            """
            csnbdkx - Data Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            source_key_identifier*                               Key label/token  Both
            exporter_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Both
            """
            return _do('csnbdkx', kw)

if _plat in _verb['csnbdkm']:
    if _plat == 'linux':
        def csnbdkm(**kw):
            """
            csnbdkm - Data Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            source_key_token*                                    Key label/token  Both
            importer_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Both
            """
            return _do('csnbdkm', kw)
    if _plat == 'zos':
        def csnbdkm(**kw):
            """
            csnbdkm - Data Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            source_key_token*                                    Key label/token  Both
            importer_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Both
            """
            return _do('csnbdkm', kw)

if _plat in _verb['csnbdkg']:
    if _plat == 'linux':
        def csnbdkg(**kw):
            """
            csnbdkg - Diversified Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            generating_key_identifier*                           Key label/token  Both
            data_length*                                         Integer          In  
            data*                                                Binary           In  
            data_decrypting_key_identifier                       Key label/token  Both
            generated_key_identifier                             Binary           Both
            """
            return _do('csnbdkg', kw)
    if _plat == 'zos':
        def csnbdkg(**kw):
            """
            csnbdkg - Diversified Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            generating_key_identifier*                           Key label/token  Both
            data_length*                                         Integer          In  
            data*                                                Binary           In  
            data_decrypting_key_identifier                       Key label/token  Both
            generated_key_identifier                             Binary           Both
            """
            return _do('csnbdkg', kw)

if _plat in _verb['csnbdkg2']:
    if _plat == 'linux':
        def csnbdkg2(**kw):
            """
            csnbdkg2 - Diversified Key Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            generating_key_identifier_length*                    Integer          In  
            generating_key_identifier*                           Key label/token  Both
            derivation_data_length*                              Integer          In  
            derivation_data*                                     Binary           In  
            input_initial_vector_length                          Integer          In  
            input_initial_vector                                 Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            generated_key_identifier1_length*                    Integer          Both
            generated_key_identifier1                            Binary           Both
            generated_key_identifier2_length                     Integer          Both
            generated_key_identifier2                            Binary           Both
            """
            return _do('csnbdkg2', kw)
    if _plat == 'zos':
        def csnbdkg2(**kw):
            """
            csnbdkg2 - Diversified Key Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            generating_key_identifier_length*                    Integer          In  
            generating_key_identifier*                           Key label/token  Both
            derivation_data_length*                              Integer          In  
            derivation_data*                                     Binary           In  
            input_initial_vector_length                          Integer          In  
            input_initial_vector                                 Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            generated_key_identifier1_length*                    Integer          Both
            generated_key_identifier1                            Binary           Both
            generated_key_identifier2_length                     Integer          Both
            generated_key_identifier2                            Binary           Both
            """
            return _do('csnbdkg2', kw)

if _plat in _verb['csnbddk']:
    if _plat == 'linux':
        def csnbddk(**kw):
            """
            csnbddk - Diversify Directed Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            kdk_identifier_length*                               Integer          In  
            kdk_identifier*                                      Key label/token  Both
            key_type_vector_length*                              Integer          In  
            key_type_vector*                                     Binary           In  
            additional_derivation_data_length                    Integer          In  
            additional_derivation_data                           Binary           In  
            random_data_length*                                  Integer          In  
            random_data                                          Binary           Both
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Out 
            """
            return _do('csnbddk', kw)
    if _plat == 'zos':
        def csnbddk(**kw):
            """
            csnbddk - Diversify Directed Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            kdk_key_identifier_length*                           Integer          In  
            kdk_key_identifier*                                  Key label/token  Both
            key_type_vector_length*                              Integer          In  
            key_type_vector*                                     Binary           In  
            additional_derivation_data_length                    Integer          In  
            additional_derivation_data                           Binary           In  
            random_data_length*                                  Integer          In  
            random_data                                          Binary           Both
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Out 
            """
            return _do('csnbddk', kw)

if _plat in _verb['csndedh']:
    if _plat == 'linux':
        def csndedh(**kw):
            """
            csndedh - EC Diffie-Hellman

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            private_key_identifier_length*                       Integer          In  
            private_key_identifier*                              Key label/token  In  
            private_kek_key_identifier_length                    Integer          In  
            private_kek_key_identifier                           Key label/token  Both
            public_key_identifier_length*                        Integer          In  
            public_key_identifier*                               Key label/token  In  
            hybrid_key_identifier_length                         Integer          In  
            hybrid_key_identifier                                Key label/token  Both
            party_info_length                                    Integer          Both
            party_info                                           Binary           Both
            key_bit_length                                       Integer          Both
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            hybrid_ciphertext_length                             Integer          In  
            hybrid_ciphertext                                    Binary           In  
            reserved_3_length                                    Integer          In  
            reserved_3                                           Binary           In  
            reserved_4_length                                    Integer          In  
            reserved_4                                           Binary           In  
            reserved_5_length                                    Integer          In  
            reserved_5                                           Binary           In  
            output_kek_key_identifier_length                     Integer          In  
            output_kek_key_identifier                            Key label/token  Both
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Both
            """
            return _do('csndedh', kw)
    if _plat == 'zos':
        def csndedh(**kw):
            """
            csndedh - ECC Diffie-Hellman

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            private_key_identifier_length*                       Integer          In  
            private_key_identifier*                              Key label/token  In  
            private_kek_key_identifier_length                    Integer          In  
            private_kek_key_identifier                           Key label/token  Both
            public_key_identifier_length*                        Integer          In  
            public_key_identifier*                               Key label/token  In  
            hybrid_key_identifier_length                         Integer          In  
            hybrid_key_identifier                                Key label/token  Both
            party_identifier_length                              Integer          Both
            party_identifier                                     Binary           Both
            key_bit_length                                       Integer          Both
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            hybrid_ciphertext_length                             Integer          In  
            hybrid_ciphertext                                    Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4_length                                     Integer          In  
            reserved4                                            Binary           In  
            reserved5_length                                     Integer          In  
            reserved5                                            Binary           In  
            output_kek_key_identifier_length                     Integer          In  
            output_kek_key_identifier                            Key label/token  Both
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Both
            """
            return _do('csndedh', kw)

if _plat in _verb['csnbkex']:
    if _plat == 'linux':
        def csnbkex(**kw):
            """
            csnbkex - Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_type*                                            String           In  
            source_key_identifier*                               Key label/token  Both
            exporter_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csnbkex', kw)
    if _plat == 'zos':
        def csnbkex(**kw):
            """
            csnbkex - Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_type*                                            String           In  
            source_key_identifier*                               Key label/token  Both
            exporter_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csnbkex', kw)

if _plat in _verb['csnbkgn']:
    if _plat == 'linux':
        def csnbkgn(**kw):
            """
            csnbkgn - Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_form*                                            String           In  
            key_length*                                          String           In  
            key_type_1*                                          String           In  
            key_type_2                                           String           In  
            kek_key_identifier_1                                 Key label/token  Both
            kek_key_identifier_2                                 Key label/token  Both
            generated_key_identifier_1                           Binary           Both
            generated_key_identifier_2                           Binary           Both
            """
            return _do('csnbkgn', kw)
    if _plat == 'zos':
        def csnbkgn(**kw):
            """
            csnbkgn - Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_form*                                            String           In  
            key_length*                                          String           In  
            key_type_1*                                          String           In  
            key_type_2                                           String           In  
            kek_key_identifier_1                                 Key label/token  Both
            kek_key_identifier_2                                 Key label/token  Both
            generated_key_identifier_1                           Binary           Both
            generated_key_identifier_2                           Binary           Both
            """
            return _do('csnbkgn', kw)

if _plat in _verb['csnbkgn2']:
    if _plat == 'linux':
        def csnbkgn2(**kw):
            """
            csnbkgn2 - Key Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_key_bit_length*                                Integer          In  
            key_type_1*                                          String           In  
            key_type_2                                           String           In  
            key_name_1_length                                    Integer          In  
            key_name_1                                           String           In  
            key_name_2_length                                    Integer          In  
            key_name_2                                           String           In  
            user_associated_data_1_length                        Integer          In  
            user_associated_data_1                               Key label/token  In  
            user_associated_data_2_length                        Integer          In  
            user_associated_data_2                               Key label/token  In  
            key_encrypting_key_identifier_1_length               Integer          In  
            key_encrypting_key_identifier_1                      Key label/token  Both
            key_encrypting_key_identifier_2_length               Integer          In  
            key_encrypting_key_identifier_2                      Key label/token  Both
            generated_key_identifier_1_length                    Integer          Both
            generated_key_identifier_1                           Binary           Both
            generated_key_identifier_2_length                    Integer          Both
            generated_key_identifier_2                           Binary           Both
            """
            return _do('csnbkgn2', kw)
    if _plat == 'zos':
        def csnbkgn2(**kw):
            """
            csnbkgn2 - Key Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_key_bit_length*                                Integer          In  
            key_type_1*                                          String           In  
            key_type_2                                           String           In  
            key_name_1_length                                    Integer          In  
            key_name_1                                           String           In  
            key_name_2_length                                    Integer          In  
            key_name_2                                           String           In  
            user_associated_data_1_length                        Integer          In  
            user_associated_data_1                               Key label/token  In  
            user_associated_data_2_length                        Integer          In  
            user_associated_data_2                               Key label/token  In  
            key_encrypting_key_identifier_1_length               Integer          In  
            key_encrypting_key_identifier_1                      Key label/token  Both
            key_encrypting_key_identifier_2_length               Integer          In  
            key_encrypting_key_identifier_2                      Key label/token  Both
            generated_key_identifier_1_length                    Integer          Both
            generated_key_identifier_1                           Binary           Both
            generated_key_identifier_2_length                    Integer          Both
            generated_key_identifier_2                           Binary           Both
            """
            return _do('csnbkgn2', kw)

if _plat in _verb['csnbkim']:
    if _plat == 'linux':
        def csnbkim(**kw):
            """
            csnbkim - Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_type*                                            String           In  
            source_key_identifier*                               Key label/token  Both
            importer_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csnbkim', kw)
    if _plat == 'zos':
        def csnbkim(**kw):
            """
            csnbkim - Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_type*                                            String           In  
            source_key_identifier*                               Key label/token  Both
            importer_key_identifier*                             Key label/token  Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csnbkim', kw)

if _plat in _verb['csnbkpi']:
    if _plat == 'linux':
        def csnbkpi(**kw):
            """
            csnbkpi - Key Part Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_part                                             Binary           In  
            key_identifier*                                      Key label/token  Both
            """
            return _do('csnbkpi', kw)
    if _plat == 'zos':
        def csnbkpi(**kw):
            """
            csnbkpi - Key Part Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_part                                             Binary           In  
            key_identifier*                                      Key label/token  Both
            """
            return _do('csnbkpi', kw)

if _plat in _verb['csnbkpi2']:
    if _plat == 'linux':
        def csnbkpi2(**kw):
            """
            csnbkpi2 - Key Part Import2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_part_bit_length*                                 Integer          In  
            key_part                                             Binary           In  
            key_identifier_length*                               Integer          Both
            key_identifier*                                      Key label/token  Both
            """
            return _do('csnbkpi2', kw)
    if _plat == 'zos':
        def csnbkpi2(**kw):
            """
            csnbkpi2 - Key Part Import2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_part_bit_length*                                 Integer          In  
            key_part                                             Binary           In  
            key_identifier_length*                               Integer          Both
            key_identifier*                                      Key label/token  Both
            """
            return _do('csnbkpi2', kw)

if _plat in _verb['csnbkyt']:
    if _plat == 'linux':
        def csnbkyt(**kw):
            """
            csnbkyt - Key Test

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier*                                      Key label/token  Both
            value_1                                              Binary           Both
            value_2                                              Binary           Both
            """
            return _do('csnbkyt', kw)
    if _plat == 'zos':
        def csnbkyt(**kw):
            """
            csnbkyt - Key Test

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier*                                      Key label/token  Both
            random_number                                        Binary           Both
            verification_pattern                                 Binary           Both
            """
            return _do('csnbkyt', kw)

if _plat in _verb['csnbkyt2']:
    if _plat == 'linux':
        def csnbkyt2(**kw):
            """
            csnbkyt2 - Key Test2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_encrypting_key_identifier_length                 Integer          In  
            key_encrypting_key_identifier                        Key label/token  Both
            reserved_length                                      Integer          In  
            reserved                                             Binary           In  
            verification_pattern_length*                         Integer          Both
            verification_pattern                                 Binary           Both
            """
            return _do('csnbkyt2', kw)
    if _plat == 'zos':
        def csnbkyt2(**kw):
            """
            csnbkyt2 - Key Test2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_encrypting_key_identifier_length                 Integer          In  
            key_encrypting_key_identifier                        Key label/token  Both
            reserved_length                                      Integer          In  
            reserved                                             Binary           In  
            verification_pattern_length*                         Integer          Both
            verification_pattern                                 Binary           Both
            """
            return _do('csnbkyt2', kw)

if _plat in _verb['csnbkytx']:
    if _plat == 'linux':
        def csnbkytx(**kw):
            """
            csnbkytx - Key Test Extended

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier*                                      Key label/token  Both
            random_number                                        Binary           Both
            verification_pattern                                 Binary           Both
            kek_key_identifier                                   Key label/token  Both
            """
            return _do('csnbkytx', kw)
    if _plat == 'zos':
        def csnbkytx(**kw):
            """
            csnbkytx - Key Test Extended

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier*                                      Key label/token  Both
            random_number                                        Binary           Both
            verification_pattern                                 Binary           Both
            kek_key_identifier                                   Key label/token  Both
            """
            return _do('csnbkytx', kw)

if _plat in _verb['csnbktb']:
    if _plat == 'linux':
        def csnbktb(**kw):
            """
            csnbktb - Key Token Build

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_token                                            Binary           Out 
            key_type*                                            String           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_value                                            Binary           In  
            reserved_1                                           Integer          In  
            reserved_2                                           Integer          In  
            token_data                                           Binary           In  
            control_vector                                       Binary           In  
            reserved_4                                           Binary           In  
            reserved_5                                           Integer          In  
            reserved_6                                           Binary           In  
            master_key_verification_pattern                      Binary           In  
            """
            return _do('csnbktb', kw)
    if _plat == 'zos':
        def csnbktb(**kw):
            """
            csnbktb - Key Token Build

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_token                                            Binary           Out 
            key_type*                                            String           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_value                                            Binary           In  
            master_key_version_number                            Integer          In  
            key_register_number                                  Integer          In  
            token_data_1                                         Binary           In  
            control_vector                                       Binary           In  
            initialization_vector                                Binary           In  
            pad_character                                        Integer          In  
            cryptographic_period_start                           Binary           In  
            master_key_verification_pattern                      Binary           In  
            """
            return _do('csnbktb', kw)

if _plat in _verb['csnbktb2']:
    if _plat == 'linux':
        def csnbktb2(**kw):
            """
            csnbktb2 - Key Token Build2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_key_bit_length                                 Integer          In  
            clear_key_value                                      Binary           In  
            key_name_length                                      Integer          In  
            key_name                                             String           In  
            user_associated_data_length                          Integer          In  
            user_associated_data                                 Key label/token  In  
            token_data_length                                    Integer          In  
            token_data                                           String           In  
            verb_data_length                                     Integer          In  
            verb_data                                            String           In  
            target_key_token_length*                             Integer          Both
            target_key_token                                     Binary           Out 
            """
            return _do('csnbktb2', kw)
    if _plat == 'zos':
        def csnbktb2(**kw):
            """
            csnbktb2 - Key Token Build2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_key_bit_length                                 Integer          In  
            clear_key_value                                      Binary           In  
            key_name_length                                      Integer          In  
            key_name                                             String           In  
            user_associated_data_length                          Integer          In  
            user_associated_data                                 Key label/token  In  
            token_data_length                                    Integer          In  
            token_data                                           String           In  
            service_data_length                                  Integer          In  
            service_data                                         String           In  
            target_key_token_length*                             Integer          Both
            target_key_token                                     Binary           Out 
            """
            return _do('csnbktb2', kw)

if _plat in _verb['csnbktc']:
    if _plat == 'linux':
        def csnbktc(**kw):
            """
            csnbktc - Key Token Change

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_identifier                                      
            """
            return _do('csnbktc', kw)

if _plat in _verb['csnbktc2']:
    if _plat == 'linux':
        def csnbktc2(**kw):
            """
            csnbktc2 - Key Token Change2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_identifier_lengthkey_identifier                 
            """
            return _do('csnbktc2', kw)

if _plat in _verb['csnbktp']:
    if _plat == 'linux':
        def csnbktp(**kw):
            """
            csnbktp - Key Token Parse

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            key_token                                           
            key_type                                            
            rule_array_count                                    
            rule_array                                          
            key_value                                           
            masterkey_verification_pattern_v03                  
            reserved_2                                          
            reserved_3                                          
            control_vector                                      
            reserved_4                                          
            reserved_5                                          
            reserved_6                                          
            master_key_verification_pattern_v00                 
            """
            return _do('csnbktp', kw)

if _plat in _verb['csnbktp2']:
    if _plat == 'linux':
        def csnbktp2(**kw):
            """
            csnbktp2 - Key Token Parse2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            key_token_length                                    
            key_token                                           
            key_type                                            
            rule_array_count                                    
            rule_array                                          
            key_material_state                                  
            payload_bit_length                                  
            payload                                             
            key_verification_pattern_type                       
            key_verification_pattern_length                     
            key_verification_pattern                            
            key_wrapping_method                                 
            key_hash_algorithm                                  
            key_name_length                                     
            key_name                                            
            tlv_data_length                                     
            tlv_data                                            
            user_associated_data_length                         
            user_associated_data                                
            verb_data_length                                    
            verb_data                                           
            """
            return _do('csnbktp2', kw)

if _plat in _verb['csnbktr']:
    if _plat == 'linux':
        def csnbktr(**kw):
            """
            csnbktr - Key Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            input_key_token*                                     Binary           In  
            input_kek_key_identifier*                            Key label/token  Both
            output_kek_key_identifier*                           Key label/token  Both
            output_key_token                                     Binary           Out 
            """
            return _do('csnbktr', kw)
    if _plat == 'zos':
        def csnbktr(**kw):
            """
            csnbktr - Key Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            input_key_token*                                     Binary           In  
            input_kek_key_identifier*                            Key label/token  Both
            output_kek_key_identifier*                           Key label/token  Both
            output_key_token                                     Binary           Out 
            """
            return _do('csnbktr', kw)

if _plat in _verb['csnbktr2']:
    if _plat == 'linux':
        def csnbktr2(**kw):
            """
            csnbktr2 - Key Translate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_key_token_length*                              Integer          In  
            input_key_token*                                     Binary           Both
            input_kek_key_identifier_length                      Integer          In  
            input_kek_key_identifier                             Key label/token  Both
            output_kek_key_identifier_length                     Integer          In  
            output_kek_key_identifier                            Key label/token  Both
            output_key_token_length                              Integer          Both
            output_key_token                                     Binary           Both
            """
            return _do('csnbktr2', kw)
    if _plat == 'zos':
        def csnbktr2(**kw):
            """
            csnbktr2 - Key Translate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_key_length*                                    Integer          In  
            input_key_token*                                     Binary           Both
            input_kek_length                                     Integer          In  
            input_kek_identifier                                 Key label/token  Both
            output_kek_length                                    Integer          In  
            output_kek_identifier                                Key label/token  Both
            output_key_length                                    Integer          Both
            output_key_token                                     Binary           Both
            """
            return _do('csnbktr2', kw)

if _plat in _verb['csnbckm']:
    if _plat == 'linux':
        def csnbckm(**kw):
            """
            csnbckm - Multiple Clear Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_key_length*                                    Integer          In  
            clear_key*                                           Binary           In  
            target_key_identifier*                               Integer          Both
            """
            return _do('csnbckm', kw)
    if _plat == 'zos':
        def csnbckm(**kw):
            """
            csnbckm - Multiple Clear Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_key_length*                                    Integer          In  
            clear_key*                                           Binary           In  
            key_identifier_length*                               Integer          Both
            key_identifier                                       Binary           Out 
            """
            return _do('csnbckm', kw)

if _plat in _verb['csnbmms']:
    if _plat == 'linux':
        def csnbmms(**kw):
            """
            csnbmms - Multi-MAC Scheme

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            generating_key_identifier_length*                    Integer          In  
            generating_key_identifier*                           Key label/token  In  
            derivation_data0_length*                             Integer          In  
            derivation_data0*                                    Binary           In  
            derivation_data1_length                              Integer          In  
            derivation_data1                                     Binary           In  
            derivation_data2_length                              Integer          In  
            derivation_data2                                     Binary           In  
            mac_values_length*                                   Integer          In  
            mac_values*                                          Binary           In  
            text_length*                                         Integer          In  
            text*                                                Binary           In  
            input_initial_vector_length                          Integer          In  
            input_initial_vector                                 Binary           In  
            final_mac_length*                                    Integer          Both
            final_mac                                            Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            """
            return _do('csnbmms', kw)
    if _plat == 'zos':
        def csnbmms(**kw):
            """
            csnbmms - Multi-MAC Scheme

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            generating_key_identifier_length*                    Integer          In  
            generating_key_identifier*                           Key label/token  In  
            derivation_data0_length*                             Integer          In  
            derivation_data0*                                    Binary           In  
            derivation_data1_length                              Integer          In  
            derivation_data1                                     Binary           In  
            derivation_data2_length                              Integer          In  
            derivation_data2                                     Binary           In  
            mac_values_length*                                   Integer          In  
            mac_values*                                          Binary           In  
            text_length*                                         Integer          In  
            text*                                                Binary           In  
            input_initial_vector_length                          Integer          In  
            input_initial_vector                                 Binary           In  
            final_mac_length*                                    Integer          Both
            final_mac                                            Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            """
            return _do('csnbmms', kw)

if _plat in _verb['csndpkd']:
    if _plat == 'linux':
        def csndpkd(**kw):
            """
            csndpkd - PKA Decrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pka_enciphered_keyvalue_length                       Integer          In  
            pka_enciphered_keyvalue                              Binary           In  
            data_structure_length                                Integer          In  
            data_structure                                       Binary           In  
            pka_key_identifier_length*                           Integer          In  
            pka_key_identifier*                                  Key label/token  In  
            target_keyvalue_length                               Integer          Both
            target_keyvalue                                      Binary           Out 
            """
            return _do('csndpkd', kw)
    if _plat == 'zos':
        def csndpkd(**kw):
            """
            csndpkd - PKA Decrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pka_enciphered_keyvalue_length                       Integer          In  
            pka_enciphered_keyvalue                              Binary           In  
            data_structure_length                                Integer          In  
            data_structure                                       Binary           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  In  
            target_keyvalue_length                               Integer          Both
            target_keyvalue                                      Binary           Out 
            """
            return _do('csndpkd', kw)

if _plat in _verb['csndpke']:
    if _plat == 'linux':
        def csndpke(**kw):
            """
            csndpke - PKA Encrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            keyvalue_length                                      Integer          Both
            keyvalue                                             Binary           Both
            sym_key_identifier_length                            Integer          In  
            sym_key_identifier                                   Key label/token  Both
            pka_key_identifier_length*                           Integer          In  
            pka_key_identifier*                                  Key label/token  In  
            pka_enciphered_keyvalue_length                       Integer          Both
            pka_enciphered_keyvalue                              Binary           Out 
            """
            return _do('csndpke', kw)
    if _plat == 'zos':
        def csndpke(**kw):
            """
            csndpke - PKA Encrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            keyvalue_length                                      Integer          Both
            keyvalue                                             Binary           Both
            sym_key_identifier_length                            Integer          In  
            sym_key_identifier                                   Key label/token  Both
            pka_key_identifier_length*                           Integer          In  
            pka_key_identifier*                                  Key label/token  In  
            pka_enciphered_keyvalue_length                       Integer          Both
            pka_enciphered_keyvalue                              Binary           Out 
            """
            return _do('csndpke', kw)

if _plat in _verb['csnbpex']:
    if _plat == 'linux':
        def csnbpex(**kw):
            """
            csnbpex - Prohibit Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            """
            return _do('csnbpex', kw)
    if _plat == 'zos':
        def csnbpex(**kw):
            """
            csnbpex - Prohibit Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            """
            return _do('csnbpex', kw)

if _plat in _verb['csnbpexx']:
    if _plat == 'linux':
        def csnbpexx(**kw):
            """
            csnbpexx - Prohibit Export Extended

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            source_key_token*                                    Binary           Both
            kek_key_identifier*                                  Key label/token  Both
            """
            return _do('csnbpexx', kw)
    if _plat == 'zos':
        def csnbpexx(**kw):
            """
            csnbpexx - Prohibit Export Extended

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            source_key_token*                                    Binary           Both
            kek_key_identifier*                                  Key label/token  Both
            """
            return _do('csnbpexx', kw)

if _plat in _verb['csnbrka']:
    if _plat == 'linux':
        def csnbrka(**kw):
            """
            csnbrka - Restrict Key Attribute

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          Both
            key_identifier*                                      Key label/token  Both
            key_encrypting_key_identifier_length                 Integer          Both
            key_encrypting_key_identifier                        Key label/token  Both
            opt_parameter1_length                                Integer          In  
            opt_parameter1                                       Binary           In  
            opt_parameter2_length                                Integer          In  
            opt_parameter2                                       Binary           In  
            """
            return _do('csnbrka', kw)
    if _plat == 'zos':
        def csnbrka(**kw):
            """
            csnbrka - Restrict Key Attribute

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          Both
            key_identifier*                                      Key label/token  Both
            key_encrypting_key_identifier_length                 Integer          Both
            key_encrypting_key_identifier                        Key label/token  Both
            opt_parameter1_length                                Integer          In  
            opt_parameter1                                       Binary           In  
            opt_parameter2_length                                Integer          In  
            opt_parameter2                                       Binary           In  
            """
            return _do('csnbrka', kw)

if _plat in _verb['csnbrng']:
    if _plat == 'linux':
        def csnbrng(**kw):
            """
            csnbrng - Random Number Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            form*                                                String           In  
            random_number                                        Binary           Out 
            """
            return _do('csnbrng', kw)
    if _plat == 'zos':
        def csnbrng(**kw):
            """
            csnbrng - Random Number Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            form*                                                String           In  
            random_number                                        Binary           Out 
            """
            return _do('csnbrng', kw)

if _plat in _verb['csnbrngl']:
    if _plat == 'linux':
        def csnbrngl(**kw):
            """
            csnbrngl - Random Number Generate Long

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length                                Integer          In  
            key_identifier                                       Key label/token  In  
            random_number_length*                                Integer          In  
            random_number                                        Binary           Out 
            """
            return _do('csnbrngl', kw)
    if _plat == 'zos':
        def csnbrngl(**kw):
            """
            csnbrngl - Random Number Generate Long

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length                                Integer          In  
            key_identifier                                       Key label/token  In  
            random_number_length*                                Integer          In  
            random_number                                        Binary           Out 
            """
            return _do('csnbrngl', kw)

if _plat in _verb['csndrkx']:
    if _plat == 'linux':
        def csndrkx(**kw):
            """
            csndrkx - Remote Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            trusted_block_identifier_length*                     Integer          In  
            trusted_block_identifier*                            Key label/token  Both
            certificate_length                                   Integer          In  
            certificate                                          Binary           In  
            certificate_parms_length                             Integer          In  
            certificate_parms                                    Binary           In  
            transport_key_identifier_length*                     Integer          In  
            transport_key_identifier*                            Key label/token  Both
            rule_id_length*                                      Integer          In  
            rule_id*                                             Binary           In  
            importer_key_identifier_length*                      Integer          In  
            importer_key_identifier*                             Key label/token  Both
            source_key_identifier_length                         Integer          In  
            source_key_identifier                                Key label/token  Both
            asym_encrypted_key_length*                           Integer          Both
            asym_encrypted_key                                   Binary           Out 
            sym_encrypted_key_identifier_length*                 Integer          Both
            sym_encrypted_key_identifier                         Binary           Out 
            extra_data_length                                    Integer          In  
            extra_data                                           Binary           In  
            key_check_parameters_length                          Integer          In  
            key_check_parameters                                 Binary           In  
            key_check_value_length*                              Integer          Both
            key_check_value                                      Binary           Out 
            """
            return _do('csndrkx', kw)
    if _plat == 'zos':
        def csndrkx(**kw):
            """
            csndrkx - Remote Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            trusted_block_length*                                Integer          In  
            trusted_block_identifier*                            Key label/token  Both
            certificate_length                                   Integer          In  
            certificate                                          Binary           In  
            certificate_parms_length                             Integer          In  
            certificate_parms                                    Binary           In  
            transport_key_length*                                Integer          In  
            transport_key_identifier*                            Key label/token  Both
            rule_id_length*                                      Integer          In  
            rule_id*                                             Binary           In  
            importer_key_length*                                 Integer          In  
            importer_key_identifier*                             Key label/token  Both
            source_key_length                                    Integer          In  
            source_key_identifier                                Key label/token  Both
            asym_encrypted_key_length*                           Integer          Both
            asym_encrypted_key                                   Binary           Out 
            sym_encrypted_key_length*                            Integer          Both
            sym_encrypted_key                                    Binary           Out 
            extra_data_length                                    Integer          In  
            extra_data                                           Binary           In  
            key_check_parameters_length                          Integer          In  
            key_check_parameters                                 Binary           In  
            key_check_length*                                    Integer          Both
            key_check_value                                      Binary           Out 
            """
            return _do('csndrkx', kw)

if _plat in _verb['csndsyx']:
    if _plat == 'linux':
        def csndsyx(**kw):
            """
            csndsyx - Symmetric Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  Both
            transporter_key_identifier_length*                   Integer          In  
            transporter_key_identifier*                          Key label/token  Both
            enciphered_key_length*                               Integer          Both
            enciphered_key                                       Binary           Out 
            """
            return _do('csndsyx', kw)
    if _plat == 'zos':
        def csndsyx(**kw):
            """
            csndsyx - Symmetric Key Export

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  Both
            transporter_key_identifier_length*                   Integer          In  
            transporter_key_identifier*                          Key label/token  Both
            enciphered_key_length*                               Integer          Both
            enciphered_key                                       Binary           Out 
            """
            return _do('csndsyx', kw)

if _plat in _verb['csndsxd']:
    if _plat == 'linux':
        def csndsxd(**kw):
            """
            csndsxd - Symmetric Key Export with Data

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  Both
            data_length*                                         Integer          In  
            data_offset                                          Integer          In  
            data*                                                Binary           In  
            rsa_public_key_identifier_length*                    Integer          In  
            rsa_public_key_identifier*                           Key label/token  In  
            rsa_enciphered_key_length*                           Integer          Both
            rsa_enciphered_key                                   Binary           Out 
            """
            return _do('csndsxd', kw)
    if _plat == 'zos':
        def csndsxd(**kw):
            """
            csndsxd - Symmetric Key Export with Data

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  Both
            data_length*                                         Integer          In  
            data_offset                                          Integer          In  
            data*                                                Binary           In  
            rsa_public_key_identifier_length*                    Integer          In  
            rsa_public_key_identifier*                           Key label/token  In  
            rsa_enciphered_key_length*                           Integer          Both
            rsa_enciphered_key                                   Binary           Out 
            """
            return _do('csndsxd', kw)

if _plat in _verb['csndsyg']:
    if _plat == 'linux':
        def csndsyg(**kw):
            """
            csndsyg - Symmetric Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_encrypting_key_identifier                        Key label/token  Both
            rsa_public_key_identifier_length*                    Integer          In  
            rsa_public_key_identifier*                           Key label/token  In  
            local_enciphered_key_identifier_length*              Integer          Both
            local_enciphered_key_identifier                      Binary           Both
            rsa_enciphered_key_length*                           Integer          Both
            rsa_enciphered_key                                   Binary           Both
            """
            return _do('csndsyg', kw)
    if _plat == 'zos':
        def csndsyg(**kw):
            """
            csndsyg - Symmetric Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_encrypting_key_identifier                        Key label/token  Both
            rsa_public_key_identifier_length*                    Integer          In  
            rsa_public_key_identifier*                           Key label/token  In  
            local_enciphered_key_token_length*                   Integer          Both
            local_enciphered_key_token                           Binary           Both
            rsa_enciphered_key_length*                           Integer          Both
            rsa_enciphered_key                                   Binary           Both
            """
            return _do('csndsyg', kw)

if _plat in _verb['csndsyi']:
    if _plat == 'linux':
        def csndsyi(**kw):
            """
            csndsyi - Symmetric Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            rsa_enciphered_key_length*                           Integer          In  
            rsa_enciphered_key*                                  Binary           In  
            rsa_private_key_identifier_length*                   Integer          In  
            rsa_private_key_identifier*                          Key label/token  In  
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csndsyi', kw)
    if _plat == 'zos':
        def csndsyi(**kw):
            """
            csndsyi - Symmetric Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            rsa_enciphered_key_length*                           Integer          In  
            rsa_enciphered_key*                                  Binary           In  
            rsa_private_key_identifier_length*                   Integer          In  
            rsa_private_key_identifier*                          Key label/token  In  
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csndsyi', kw)

if _plat in _verb['csndsyi2']:
    if _plat == 'linux':
        def csndsyi2(**kw):
            """
            csndsyi2 - Symmetric Key Import2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            enciphered_key_length*                               Integer          In  
            enciphered_key*                                      Binary           In  
            transport_key_identifier_length*                     Integer          In  
            transport_key_identifier*                            Key label/token  Both
            key_name_length                                      Integer          In  
            key_name                                             String           In  
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csndsyi2', kw)
    if _plat == 'zos':
        def csndsyi2(**kw):
            """
            csndsyi2 - Symmetric Key Import2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            enciphered_key_length*                               Integer          In  
            enciphered_key*                                      Binary           In  
            transport_key_identifier_length*                     Integer          In  
            transport_key_identifier*                            Key label/token  Both
            key_name_length                                      Integer          In  
            key_name                                             String           In  
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Binary           Out 
            """
            return _do('csndsyi2', kw)

if _plat in _verb['csndtbc']:
    if _plat == 'linux':
        def csndtbc(**kw):
            """
            csndtbc - Trusted Block Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_block_identifier_length                        Integer          In  
            input_block_identifier                               Key label/token  In  
            transport_key_identifier*                            Key label/token  Both
            trusted_block_identifier_length*                     Integer          Both
            trusted_block_identifier                             Binary           Out 
            """
            return _do('csndtbc', kw)
    if _plat == 'zos':
        def csndtbc(**kw):
            """
            csndtbc - Trusted Block Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_block_length                                   Integer          In  
            input_block_identifier                               Key label/token  In  
            transport_key_identifier*                            Key label/token  Both
            trusted_block_length*                                Integer          Both
            trusted_block_identifier                             Binary           Out 
            """
            return _do('csndtbc', kw)

if _plat in _verb['csnbukd']:
    if _plat == 'linux':
        def csnbukd(**kw):
            """
            csnbukd - Unique Key Derive

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            base_derivation_key_identifier_length*               Integer          In  
            base_derivation_key_identifier*                      Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            generated_key_identifier1_length                     Integer          Both
            generated_key_identifier1                            Binary           Both
            generated_key_identifier2_length                     Integer          Both
            generated_key_identifier2                            Binary           Both
            generated_key_identifier3_length                     Integer          Both
            generated_key_identifier3                            Binary           Both
            transport_key_identifier_length                      Integer          In  
            transport_key_identifier                             Key label/token  Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4_length                                     Integer          In  
            reserved4                                            Binary           In  
            reserved5_length                                     Integer          In  
            reserved5                                            Binary           In  
            """
            return _do('csnbukd', kw)
    if _plat == 'zos':
        def csnbukd(**kw):
            """
            csnbukd - Unique Key Derive

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            base_derivation_key_identifier_length*               Integer          In  
            base_derivation_key_identifier*                      Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            generated_key_identifier1_length                     Integer          Both
            generated_key_identifier1                            Binary           Both
            generated_key_identifier2_length                     Integer          Both
            generated_key_identifier2                            Binary           Both
            generated_key_identifier3_length                     Integer          Both
            generated_key_identifier3                            Binary           Both
            transport_key_identifier_length                      Integer          In  
            transport_key_identifier                             Key label/token  Both
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4_length                                     Integer          In  
            reserved4                                            Binary           In  
            reserved5_length                                     Integer          In  
            reserved5                                            Binary           In  
            reserved6_length                                     Integer          In  
            reserved6                                            Binary           In  
            """
            return _do('csnbukd', kw)

if _plat in _verb['csnbdec']:
    if _plat == 'linux':
        def csnbdec(**kw):
            """
            csnbdec - Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length*                                         Integer          Both
            cipher_text*                                         Binary           In  
            initialization_vector                                Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            chaining_vector                                      Binary           Both
            clear_text                                           Binary           Out 
            """
            return _do('csnbdec', kw)
    if _plat == 'zos':
        def csnbdec(**kw):
            """
            csnbdec - Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length*                                         Integer          Both
            cipher_text*                                         Binary           In  
            initialization_vector                                Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            chaining_vector                                      Binary           Both
            clear_text                                           Binary           Out 
            """
            return _do('csnbdec', kw)

if _plat in _verb['csnbenc']:
    if _plat == 'linux':
        def csnbenc(**kw):
            """
            csnbenc - Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length*                                         Integer          Both
            clear_text*                                          Binary           In  
            initialization_vector                                Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pad_character                                        Integer          In  
            chaining_vector                                      Binary           Both
            cipher_text                                          Binary           Out 
            """
            return _do('csnbenc', kw)
    if _plat == 'zos':
        def csnbenc(**kw):
            """
            csnbenc - Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length*                                         Integer          Both
            clear_text*                                          Binary           In  
            initialization_vector                                Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pad_character                                        Integer          In  
            chaining_vector                                      Binary           Both
            cipher_text                                          Binary           Out 
            """
            return _do('csnbenc', kw)

if _plat in _verb['csnbsad']:
    if _plat == 'linux':
        def csnbsad(**kw):
            """
            csnbsad - Symmetric Algorithm Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_parms_length                                     Integer          In  
            key_parms                                            Binary           In  
            block_size*                                          Integer          In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            ciphertext_length                                    Integer          In  
            ciphertext                                           Binary           In  
            cleartext_length*                                    Integer          Both
            cleartext                                            Binary           Both
            optional_data_length                                 Integer          In  
            optional_data                                        Binary           Both
            """
            return _do('csnbsad', kw)
    if _plat == 'zos':
        def csnbsad(**kw):
            """
            csnbsad - Symmetric Algorithm Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_parms_length                                     Integer          In  
            key_parms                                            Binary           In  
            block_size*                                          Integer          In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            cipher_text_length                                   Integer          In  
            cipher_text                                          Binary           In  
            clear_text_length*                                   Integer          Both
            clear_text                                           Binary           Both
            optional_data_length                                 Integer          In  
            optional_data                                        Binary           Both
            """
            return _do('csnbsad', kw)

if _plat in _verb['csnbsae']:
    if _plat == 'linux':
        def csnbsae(**kw):
            """
            csnbsae - Symmetric Algorithm Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_parms_length                                     Integer          In  
            key_parms                                            Key label/token  Both
            block_size*                                          Integer          In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            cleartext_length                                     Integer          In  
            cleartext                                            Binary           In  
            ciphertext_length*                                   Integer          Both
            ciphertext                                           Binary           Both
            optional_data_length                                 Integer          In  
            optional_data                                        Binary           Both
            """
            return _do('csnbsae', kw)
    if _plat == 'zos':
        def csnbsae(**kw):
            """
            csnbsae - Symmetric Algorithm Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_parms_length                                     Integer          In  
            key_parms                                            Key label/token  Both
            block_size*                                          Integer          In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            clear_text_length                                    Integer          In  
            clear_text                                           Binary           In  
            cipher_text_length*                                  Integer          Both
            cipher_text                                          Binary           Both
            optional_data_length                                 Integer          In  
            optional_data                                        Binary           Both
            """
            return _do('csnbsae', kw)

if _plat in _verb['csnbctt2']:
    if _plat == 'linux':
        def csnbctt2(**kw):
            """
            csnbctt2 - Cipher Text Translate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_in_length*                            Integer          In  
            key_identifier_in*                                   Key label/token  Both
            init_vector_in_length                                Integer          In  
            init_vector_in                                       Binary           In  
            cipher_text_in_length*                               Integer          In  
            cipher_text_in*                                      Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            key_identifier_out_length*                           Integer          In  
            key_identifier_out*                                  Key label/token  Both
            init_vector_out_length                               Integer          In  
            init_vector_out                                      Binary           In  
            cipher_text_out_length*                              Integer          Both
            cipher_text_out                                      Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbctt2', kw)
    if _plat == 'zos':
        def csnbctt2(**kw):
            """
            csnbctt2 - Cipher Text Translate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_in_length*                            Integer          In  
            key_identifier_in*                                   Key label/token  Both
            initialization_vector_in_length                      Integer          In  
            initialization_vector_in                             Binary           In  
            cipher_text_in_length*                               Integer          In  
            cipher_text_in*                                      Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            key_identifier_out_length*                           Integer          In  
            key_identifier_out*                                  Key label/token  Both
            initialization_vector_out_length                     Integer          In  
            initialization_vector_out                            Binary           In  
            cipher_text_out_length*                              Integer          Both
            cipher_text_out                                      Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbctt2', kw)

if _plat in _verb['csnbhmg']:
    if _plat == 'linux':
        def csnbhmg(**kw):
            """
            csnbhmg - HMAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          Both
            mac                                                  Binary           Out 
            """
            return _do('csnbhmg', kw)
    if _plat == 'zos':
        def csnbhmg(**kw):
            """
            csnbhmg - HMAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          Both
            mac                                                  Binary           Out 
            """
            return _do('csnbhmg', kw)

if _plat in _verb['csnbhmv']:
    if _plat == 'linux':
        def csnbhmv(**kw):
            """
            csnbhmv - HMAC Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          In  
            mac                                                  Binary           In  
            """
            return _do('csnbhmv', kw)
    if _plat == 'zos':
        def csnbhmv(**kw):
            """
            csnbhmv - HMAC Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          In  
            mac                                                  Binary           In  
            """
            return _do('csnbhmv', kw)

if _plat in _verb['csnbmgn']:
    if _plat == 'linux':
        def csnbmgn(**kw):
            """
            csnbmgn - MAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            chaining_vector                                      Binary           Both
            mac                                                  Binary           Out 
            """
            return _do('csnbmgn', kw)
    if _plat == 'zos':
        def csnbmgn(**kw):
            """
            csnbmgn - MAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            chaining_vector                                      Binary           Both
            mac                                                  Binary           Out 
            """
            return _do('csnbmgn', kw)

if _plat in _verb['csnbmgn2']:
    if _plat == 'linux':
        def csnbmgn2(**kw):
            """
            csnbmgn2 - MAC Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            message_text_length                                  Integer          In  
            message_text                                         Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          Both
            mac                                                  Binary           Out 
            """
            return _do('csnbmgn2', kw)
    if _plat == 'zos':
        def csnbmgn2(**kw):
            """
            csnbmgn2 - MAC Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          Both
            mac                                                  Binary           Out 
            """
            return _do('csnbmgn2', kw)

if _plat in _verb['csnbmvr']:
    if _plat == 'linux':
        def csnbmvr(**kw):
            """
            csnbmvr - MAC Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            chaining_vector                                      Binary           Both
            mac*                                                 Key label/token  In  
            """
            return _do('csnbmvr', kw)
    if _plat == 'zos':
        def csnbmvr(**kw):
            """
            csnbmvr - MAC Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            chaining_vector                                      Binary           Both
            mac*                                                 Key label/token  In  
            """
            return _do('csnbmvr', kw)

if _plat in _verb['csnbmvr2']:
    if _plat == 'linux':
        def csnbmvr2(**kw):
            """
            csnbmvr2 - MAC Verify2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            message_text_length                                  Integer          In  
            message_text                                         Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          In  
            mac                                                  Binary           In  
            """
            return _do('csnbmvr2', kw)
    if _plat == 'zos':
        def csnbmvr2(**kw):
            """
            csnbmvr2 - MAC Verify2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            mac_length*                                          Integer          In  
            mac                                                  Binary           In  
            """
            return _do('csnbmvr2', kw)

if _plat in _verb['csnbmdg']:
    if _plat == 'linux':
        def csnbmdg(**kw):
            """
            csnbmdg - MDC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            chaining_vector                                      Binary           Both
            mdc                                                  Binary           Both
            """
            return _do('csnbmdg', kw)
    if _plat == 'zos':
        def csnbmdg(**kw):
            """
            csnbmdg - MDC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            chaining_vector                                      Binary           Both
            mdc                                                  Binary           Both
            """
            return _do('csnbmdg', kw)

if _plat in _verb['csnbowh']:
    if _plat == 'linux':
        def csnbowh(**kw):
            """
            csnbowh - One-Way Hash

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            hash_length*                                         Integer          In  
            hash                                                 Binary           Both
            """
            return _do('csnbowh', kw)
    if _plat == 'zos':
        def csnbowh(**kw):
            """
            csnbowh - One-Way Hash Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            chaining_vector_length*                              Integer          In  
            chaining_vector                                      Binary           Both
            hash_length*                                         Integer          In  
            hash                                                 Binary           Both
            """
            return _do('csnbowh', kw)

if _plat in _verb['csnbakrc']:
    if _plat == 'linux':
        def csnbakrc(**kw):
            """
            csnbakrc - AES Key Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array_count                                    
            key_label                                           
            key_token_length                                    
            key_token                                           
            """
            return _do('csnbakrc', kw)

if _plat in _verb['csnbakrd']:
    if _plat == 'linux':
        def csnbakrd(**kw):
            """
            csnbakrd - AES Key Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            """
            return _do('csnbakrd', kw)

if _plat in _verb['csnbakrl']:
    if _plat == 'linux':
        def csnbakrl(**kw):
            """
            csnbakrl - AES Key Record List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            dataset_name_length                                 
            dataset_name                                        
            security_server_name                                
            """
            return _do('csnbakrl', kw)

if _plat in _verb['csnbakrr']:
    if _plat == 'linux':
        def csnbakrr(**kw):
            """
            csnbakrr - AES Key Record Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            key_token_length                                    
            key_token                                           
            """
            return _do('csnbakrr', kw)

if _plat in _verb['csnbakrw']:
    if _plat == 'linux':
        def csnbakrw(**kw):
            """
            csnbakrw - AES Key Record Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            key_token_length                                    
            key_token                                           
            """
            return _do('csnbakrw', kw)

if _plat in _verb['csnbkrc']:
    if _plat == 'linux':
        def csnbkrc(**kw):
            """
            csnbkrc - DES Key Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_label*                                           String           In  
            """
            return _do('csnbkrc', kw)
    if _plat == 'zos':
        def csnbkrc(**kw):
            """
            csnbkrc - CKDS Key Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_label*                                           String           In  
            """
            return _do('csnbkrc', kw)

if _plat in _verb['csnbkrd']:
    if _plat == 'linux':
        def csnbkrd(**kw):
            """
            csnbkrd - DES Key Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_label*                                           String           In  
            """
            return _do('csnbkrd', kw)
    if _plat == 'zos':
        def csnbkrd(**kw):
            """
            csnbkrd - CKDS Key Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_label*                                           String           In  
            """
            return _do('csnbkrd', kw)

if _plat in _verb['csnbkrl']:
    if _plat == 'linux':
        def csnbkrl(**kw):
            """
            csnbkrl - DES Key Record List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            key_label                                           
            dataset_name_length                                 
            dataset_name                                        
            security_server_name                                
            """
            return _do('csnbkrl', kw)

if _plat in _verb['csnbkrr']:
    if _plat == 'linux':
        def csnbkrr(**kw):
            """
            csnbkrr - DES Key Record Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_label*                                           String           In  
            key_token                                            Binary           Out 
            """
            return _do('csnbkrr', kw)
    if _plat == 'zos':
        def csnbkrr(**kw):
            """
            csnbkrr - CKDS Key Record Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_label*                                           String           In  
            key_token                                            Binary           Out 
            """
            return _do('csnbkrr', kw)

if _plat in _verb['csnbkrw']:
    if _plat == 'linux':
        def csnbkrw(**kw):
            """
            csnbkrw - DES Key Record Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_token*                                           Binary           In  
            key_label*                                           String           In  
            """
            return _do('csnbkrw', kw)
    if _plat == 'zos':
        def csnbkrw(**kw):
            """
            csnbkrw - CKDS Key Record Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_token*                                           Binary           In  
            key_label*                                           String           In  
            """
            return _do('csnbkrw', kw)

if _plat in _verb['csndkrc']:
    if _plat == 'linux':
        def csndkrc(**kw):
            """
            csndkrc - PKA Key Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            key_token_length*                                    Integer          In  
            key_token                                            Binary           In  
            """
            return _do('csndkrc', kw)
    if _plat == 'zos':
        def csndkrc(**kw):
            """
            csndkrc - PKDS Key Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            label*                                               String           In  
            token_length*                                        Integer          In  
            token                                                Binary           In  
            """
            return _do('csndkrc', kw)

if _plat in _verb['csndkrd']:
    if _plat == 'linux':
        def csndkrd(**kw):
            """
            csndkrd - PKA Key Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            """
            return _do('csndkrd', kw)
    if _plat == 'zos':
        def csndkrd(**kw):
            """
            csndkrd - PKDS Key Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            label*                                               String           In  
            """
            return _do('csndkrd', kw)

if _plat in _verb['csndkrl']:
    if _plat == 'linux':
        def csndkrl(**kw):
            """
            csndkrl - PKA Key Record List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            dataset_name_length                                 
            dataset_name                                        
            security_server_name                                
            """
            return _do('csndkrl', kw)

if _plat in _verb['csndkrr']:
    if _plat == 'linux':
        def csndkrr(**kw):
            """
            csndkrr - PKA Key Record Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            key_token_length*                                    Integer          Both
            key_token                                            Binary           Out 
            """
            return _do('csndkrr', kw)
    if _plat == 'zos':
        def csndkrr(**kw):
            """
            csndkrr - PKDS Key Record Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            label*                                               String           In  
            token_length*                                        Integer          Both
            token                                                Binary           Out 
            """
            return _do('csndkrr', kw)

if _plat in _verb['csndkrw']:
    if _plat == 'linux':
        def csndkrw(**kw):
            """
            csndkrw - PKA Key Record Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            key_token_length*                                    Integer          In  
            key_token*                                           Binary           In  
            """
            return _do('csndkrw', kw)
    if _plat == 'zos':
        def csndkrw(**kw):
            """
            csndkrw - PKDS Key Record Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            label*                                               String           In  
            token_length*                                        Integer          In  
            token*                                               Binary           In  
            """
            return _do('csndkrw', kw)

if _plat in _verb['csnbckrc']:
    if _plat == 'linux':
        def csnbckrc(**kw):
            """
            csnbckrc - Combined Key Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            key_token_length                                    
            key_token                                           
            reserved1_length                                    
            reserved1                                           
            reserved2_length                                    
            reserved2                                           
            reserved3_length                                    
            reserved3                                           
            """
            return _do('csnbckrc', kw)

if _plat in _verb['csnbckrd']:
    if _plat == 'linux':
        def csnbckrd(**kw):
            """
            csnbckrd - Combined Key Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            """
            return _do('csnbckrd', kw)

if _plat in _verb['csnbckrl']:
    if _plat == 'linux':
        def csnbckrl(**kw):
            """
            csnbckrl - Combined Key Record List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            dataset_name_length                                 
            dataset_name                                        
            reserved_length                                     
            reserved                                            
            """
            return _do('csnbckrl', kw)

if _plat in _verb['csnbckrr']:
    if _plat == 'linux':
        def csnbckrr(**kw):
            """
            csnbckrr - Combined Key Record Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            key_token_length                                    
            key_token                                           
            """
            return _do('csnbckrr', kw)

if _plat in _verb['csnbckrw']:
    if _plat == 'linux':
        def csnbckrw(**kw):
            """
            csnbckrw - Combined Key Record Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_label                                           
            key_token_length                                    
            key_token                                           
            """
            return _do('csnbckrw', kw)

if _plat in _verb['csndrkd']:
    if _plat == 'linux':
        def csndrkd(**kw):
            """
            csndrkd - Retained Key Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            """
            return _do('csndrkd', kw)
    if _plat == 'zos':
        def csndrkd(**kw):
            """
            csndrkd - Retained Key Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            """
            return _do('csndrkd', kw)

if _plat in _verb['csndrkl']:
    if _plat == 'linux':
        def csndrkl(**kw):
            """
            csndrkl - Retained Key List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label_mask*                                      String           In  
            retained_keys_count                                  Integer          Out 
            key_labels_count*                                    Integer          Both
            key_labels                                           String           Out 
            """
            return _do('csndrkl', kw)
    if _plat == 'zos':
        def csndrkl(**kw):
            """
            csndrkl - Retained Key List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label_mask*                                      String           In  
            retained_keys_count                                  Integer          Out 
            key_labels_count*                                    Integer          Both
            key_labels                                           String           Out 
            """
            return _do('csndrkl', kw)

if _plat in _verb['csnbapg']:
    if _plat == 'linux':
        def csnbapg(**kw):
            """
            csnbapg - Authentication Parameter Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            inbound_pin_encrypting_key_identifier_length*        Integer          Both
            inbound_pin_encrypting_key_identifier*               Key label/token  Both
            encrypted_pin_block*                                 Binary           In  
            issuer_domestic_code*                                String           In  
            card_secure_code*                                    String           In  
            pan_data*                                            String           In  
            ap_encrypting_key_identifier_length*                 Integer          Both
            ap_encrypting_key_identifier                         Key label/token  Both
            ap_value                                             Binary           Out 
            """
            return _do('csnbapg', kw)
    if _plat == 'zos':
        def csnbapg(**kw):
            """
            csnbapg - Authentication Parameter Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            inbound_pin_encrypting_key_identifier_length*        Integer          Both
            inbound_pin_encrypting_key_identifier*               Key label/token  Both
            encrypted_pin_block*                                 Binary           In  
            issuer_domestic_code*                                String           In  
            card_secure_code*                                    String           In  
            pan_data*                                            String           In  
            ap_encrypting_key_identifier_length*                 Integer          Both
            ap_encrypting_key_identifier                         Key label/token  Both
            ap_value                                             Binary           Out 
            """
            return _do('csnbapg', kw)

if _plat in _verb['csnbcpe']:
    if _plat == 'linux':
        def csnbcpe(**kw):
            """
            csnbcpe - Clear PIN Encrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_encrypting_key_identifier*                       Key label/token  Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_pin*                                           String           In  
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            sequence_number*                                     Integer          In  
            encrypted_pin_block                                  Binary           Out 
            """
            return _do('csnbcpe', kw)
    if _plat == 'zos':
        def csnbcpe(**kw):
            """
            csnbcpe - Clear PIN Encrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_encrypting_key_identifier*                       Key label/token  Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_pin*                                           String           In  
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            sequence_number*                                     Integer          In  
            encrypted_pin_block                                  Binary           Out 
            """
            return _do('csnbcpe', kw)

if _plat in _verb['csnbpgn']:
    if _plat == 'linux':
        def csnbpgn(**kw):
            """
            csnbpgn - Clear PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_generating_key_identifier*                       Key label/token  Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_length                                           Integer          In  
            pin_check_length                                     Integer          In  
            data_array*                                          String           In  
            returned_result                                      String           Out 
            """
            return _do('csnbpgn', kw)
    if _plat == 'zos':
        def csnbpgn(**kw):
            """
            csnbpgn - Clear PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_generating_key_identifier*                       Key label/token  Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_length                                           Integer          In  
            pin_check_length                                     Integer          In  
            data_array*                                          String           In  
            returned_result                                      String           Out 
            """
            return _do('csnbpgn', kw)

if _plat in _verb['csnbcpa']:
    if _plat == 'linux':
        def csnbcpa(**kw):
            """
            csnbcpa - Clear PIN Generate Alternate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_encryption_key_identifier*                       Key label/token  In  
            pin_generation_key_identifier*                       Key label/token  In  
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            encrypted_pin_block*                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_check_length*                                    Integer          In  
            data_array*                                          String           In  
            returned_pvv                                         String           Out 
            """
            return _do('csnbcpa', kw)
    if _plat == 'zos':
        def csnbcpa(**kw):
            """
            csnbcpa - Clear PIN Generate Alternate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_encryption_key_identifier*                       Key label/token  In  
            pin_generation_key_identifier*                       Key label/token  In  
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            encrypted_pin_block*                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_check_length*                                    Integer          In  
            data_array*                                          String           In  
            returned_pvv                                         String           Out 
            """
            return _do('csnbcpa', kw)

if _plat in _verb['csnbcsg']:
    if _plat == 'linux':
        def csnbcsg(**kw):
            """
            csnbcsg - CVV Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data*                                            String           In  
            expiration_date*                                     String           In  
            service_code*                                        String           In  
            cvv_key_a_identifier*                                Key label/token  Both
            cvv_key_b_identifier                                 Key label/token  Both
            cvv_value                                            String           Out 
            """
            return _do('csnbcsg', kw)
    if _plat == 'zos':
        def csnbcsg(**kw):
            """
            csnbcsg - VISA CVV Service Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data*                                            String           In  
            expiration_date*                                     String           In  
            service_code*                                        String           In  
            cvv_key_a_identifier*                                Key label/token  Both
            cvv_key_b_identifier                                 Key label/token  Both
            cvv_value                                            String           Out 
            """
            return _do('csnbcsg', kw)

if _plat in _verb['csnbckc']:
    if _plat == 'linux':
        def csnbckc(**kw):
            """
            csnbckc - CVV Key Combine

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_a_identifier_length*                             Integer          In  
            key_a_identifier*                                    Key label/token  Both
            key_b_identifier_length*                             Integer          In  
            key_b_identifier*                                    Key label/token  Both
            output_key_identifier_length*                        Integer          In  
            output_key_identifier                                Binary           Out 
            """
            return _do('csnbckc', kw)
    if _plat == 'zos':
        def csnbckc(**kw):
            """
            csnbckc - CVV Key Combine

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_a_identifier_length*                             Integer          In  
            key_a_identifier*                                    Key label/token  Both
            key_b_identifier_length*                             Integer          In  
            key_b_identifier*                                    Key label/token  Both
            output_key_identifier_length*                        Integer          In  
            output_key_identifier                                Binary           Out 
            """
            return _do('csnbckc', kw)

if _plat in _verb['csnbcsv']:
    if _plat == 'linux':
        def csnbcsv(**kw):
            """
            csnbcsv - CVV Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data*                                            String           In  
            expiration_date*                                     String           In  
            service_code*                                        String           In  
            cvv_key_a_identifier*                                Key label/token  Both
            cvv_key_b_identifier                                 Key label/token  Both
            cvv_value*                                           String           In  
            """
            return _do('csnbcsv', kw)
    if _plat == 'zos':
        def csnbcsv(**kw):
            """
            csnbcsv - VISA CVV Service Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data*                                            String           In  
            expiration_date*                                     String           In  
            service_code*                                        String           In  
            cvv_key_a_identifier*                                Key label/token  Both
            cvv_key_b_identifier                                 Key label/token  Both
            cvv_value*                                           String           In  
            """
            return _do('csnbcsv', kw)

if _plat in _verb['csnbepg']:
    if _plat == 'linux':
        def csnbepg(**kw):
            """
            csnbepg - Encrypted PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_generating_key_identifier*                       Key label/token  Both
            outbound_pin_encrypting_key_identifier*              Key label/token  Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_length                                           Integer          In  
            data_array*                                          String           In  
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            sequence_number                                      Integer          In  
            encrypted_pin_block                                  Binary           Out 
            """
            return _do('csnbepg', kw)
    if _plat == 'zos':
        def csnbepg(**kw):
            """
            csnbepg - Encrypted PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            pin_generating_key_identifier*                       Key label/token  Both
            outbound_pin_encrypting_key_identifier*              Key label/token  Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_length                                           Integer          In  
            data_array*                                          String           In  
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            sequence_number                                      Integer          In  
            encrypted_pin_block                                  Binary           Out 
            """
            return _do('csnbepg', kw)

if _plat in _verb['csnbptr']:
    if _plat == 'linux':
        def csnbptr(**kw):
            """
            csnbptr - Encrypted PIN Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            input_pin_encrypting_key_identifier*                 Key label/token  In  
            output_pin_encrypting_key_identifier*                Key label/token  In  
            input_pin_profile*                                   String           In  
            input_pan_data*                                      String           In  
            input_pin_block*                                     Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            output_pin_profile*                                  String           In  
            output_pan_data*                                     String           In  
            sequence_number                                      Integer          In  
            pin_block_out                                        Binary           Out 
            """
            return _do('csnbptr', kw)
    if _plat == 'zos':
        def csnbptr(**kw):
            """
            csnbptr - Encrypted PIN Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            input_pin_encrypting_key_identifier*                 Key label/token  In  
            output_pin_encrypting_key_identifier*                Key label/token  In  
            input_pin_profile*                                   String           In  
            pan_data_in*                                         String           In  
            pin_block_in*                                        Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            output_pin_profile*                                  String           In  
            pan_data_out*                                        String           In  
            sequence_number                                      Integer          In  
            pin_block_out                                        Binary           Out 
            """
            return _do('csnbptr', kw)

if _plat in _verb['csnbptr2']:
    if _plat == 'linux':
        def csnbptr2(**kw):
            """
            csnbptr2 - Encrypted PIN Translate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_pin_encrypting_key_identifier_length*          Integer          Both
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            output_pin_encrypting_key_identifier_length*         Integer          Both
            output_pin_encrypting_key_identifier*                Key label/token  Both
            authentication_key_identifier_length*                Integer          Both
            authentication_key_identifier                        Key label/token  Both
            input_pin_profile_length*                            Integer          In  
            input_pin_profile*                                   Key label/token  In  
            input_pan_data_length*                               Integer          In  
            input_pan_data                                       String           In  
            input_pin_block_length*                              Integer          In  
            input_pin_block*                                     Binary           In  
            output_pin_profile_length*                           Integer          In  
            output_pin_profile*                                  Key label/token  In  
            output_pan_data_length                               Integer          In  
            output_pan_data                                      PAN data         In  
            authentication_data_length*                          Integer          In  
            authentication_data                                  Binary           In  
            output_pin_block_length*                             Integer          Both
            output_pin_block                                     Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            """
            return _do('csnbptr2', kw)
    if _plat == 'zos':
        def csnbptr2(**kw):
            """
            csnbptr2 - Encrypted PIN Translate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_pin_encrypting_key_identifier_length*          Integer          Both
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            output_pin_encrypting_key_identifier_length*         Integer          Both
            output_pin_encrypting_key_identifier*                Key label/token  Both
            authentication_key_identifier_length*                Integer          Both
            authentication_key_identifier                        Key label/token  Both
            input_pin_profile_length*                            Integer          In  
            input_pin_profile*                                   Key label/token  In  
            input_pan_data_length*                               Integer          In  
            input_pan_data                                       String           In  
            input_pin_block_length*                              Integer          In  
            input_pin_block*                                     Binary           In  
            output_pin_profile_length*                           Integer          In  
            output_pin_profile*                                  Key label/token  In  
            output_pan_data_length                               Integer          In  
            output_pan_data                                      PAN data         In  
            authentication_data_length*                          Integer          In  
            authentication_data                                  Binary           In  
            output_pin_block_length*                             Integer          Both
            output_pin_block                                     Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            """
            return _do('csnbptr2', kw)

if _plat in _verb['csnbptre']:
    if _plat == 'linux':
        def csnbptre(**kw):
            """
            csnbptre - Encrypted PIN Translate Enhanced

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_pin_encrypting_key_identifier_length*          Integer          Both
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            output_pin_encrypting_key_identifier_length*         Integer          Both
            output_pin_encrypting_key_identifier*                Key label/token  Both
            pan_key_identifier_length*                           Integer          Both
            pan_key_identifier                                   Key label/token  Both
            input_pin_profile_length*                            Integer          In  
            input_pin_profile*                                   Key label/token  In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            Key label/token  In  
            input_pin_block_length*                              Integer          In  
            input_pin_block*                                     Binary           In  
            output_pin_profile_length*                           Integer          In  
            output_pin_profile*                                  Key label/token  In  
            sequence_number*                                     Integer          In  
            output_pin_block_length*                             Integer          Both
            output_pin_block                                     Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbptre', kw)
    if _plat == 'zos':
        def csnbptre(**kw):
            """
            csnbptre - Encrypted PIN Translate Enhanced

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_pin_key_identifier_length*                     Integer          Both
            input_pin_key_identifier*                            Key label/token  Both
            output_pin_key_identifier_length*                    Integer          Both
            output_pin_key_identifier*                           Key label/token  Both
            pan_key_identifier_length*                           Integer          Both
            pan_key_identifier                                   Key label/token  Both
            input_pin_profile_length*                            Integer          In  
            input_pin_profile*                                   Key label/token  In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            Key label/token  In  
            input_pin_block_length*                              Integer          In  
            input_pin_block*                                     Binary           In  
            output_pin_profile_length*                           Integer          In  
            output_pin_profile*                                  Key label/token  In  
            sequence_number*                                     Integer          In  
            output_pin_block_length*                             Integer          Both
            output_pin_block                                     Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbptre', kw)

if _plat in _verb['csnbpvr']:
    if _plat == 'linux':
        def csnbpvr(**kw):
            """
            csnbpvr - Encrypted PIN Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            pin_verifying_key_identifier*                        Key label/token  Both
            input_pin_profile*                                   Key label/token  In  
            pan_data*                                            PAN data         In  
            encrypted_pin_block*                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_check_length                                     Integer          In  
            data_array*                                          String           In  
            """
            return _do('csnbpvr', kw)
    if _plat == 'zos':
        def csnbpvr(**kw):
            """
            csnbpvr - Encrypted PIN Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            pin_verifying_key_identifier*                        Key label/token  Both
            input_pin_profile*                                   Key label/token  In  
            pan_data*                                            PAN data         In  
            encrypted_pin_block*                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            pin_check_length                                     Integer          In  
            data_array*                                          String           In  
            """
            return _do('csnbpvr', kw)

if _plat in _verb['csnbpvr2']:
    if _plat == 'linux':
        def csnbpvr2(**kw):
            """
            csnbpvr2 - Encrypted PIN Verify2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            reference_pin_rule_array_count                       Integer          In  
            reference_pin_rule_array                             String           In  
            pin_check_length                                     Integer          In  
            input_pin_encrypting_key_identifier_length*          Integer          In  
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            reference_pin_encrypting_key_identifier_length*      Integer          In  
            reference_pin_encrypting_key_identifier*             Key label/token  Both
            input_pin_profile_length*                            Integer          In  
            input_pin_profile*                                   Key label/token  In  
            input_pin_block_length*                              Integer          In  
            input_pin_block*                                     Binary           In  
            reference_pin_profile_length*                        Integer          In  
            reference_pin_profile*                               Key label/token  In  
            reference_pin_block_length*                          Integer          In  
            reference_pin_block*                                 Binary           In  
            input_pan_data*                                      PAN data         In  
            reference_pan_data*                                  PAN data         In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4_length                                     Integer          In  
            reserved4                                            Binary           In  
            """
            return _do('csnbpvr2', kw)
    if _plat == 'zos':
        def csnbpvr2(**kw):
            """
            csnbpvr2 - Encrypted PIN Verify2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            reference_pin_rule_array_count                       Integer          In  
            reference_pin_rule_array                             String           In  
            pin_check_length                                     Integer          In  
            input_pin_encrypting_key_identifier_length*          Integer          In  
            input_pin_encrypting_key_identifier*                 Key label/token  Both
            reference_pin_encrypting_key_identifier_length*      Integer          In  
            reference_pin_encrypting_key_identifier*             Key label/token  Both
            input_pin_profile_length*                            Integer          In  
            input_pin_profile*                                   Key label/token  In  
            input_pin_block_length*                              Integer          In  
            input_pin_block*                                     Binary           In  
            reference_pin_profile_length*                        Integer          In  
            reference_pin_profile*                               Key label/token  In  
            reference_pin_block_length*                          Integer          In  
            reference_pin_block*                                 Binary           In  
            input_pan_data*                                      PAN data         In  
            reference_pan_data*                                  PAN data         In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4_length                                     Integer          In  
            reserved4                                            Binary           In  
            """
            return _do('csnbpvr2', kw)

if _plat in _verb['csnbfped']:
    if _plat == 'linux':
        def csnbfped(**kw):
            """
            csnbfped - FPE Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            enc_pan_length                                       Integer          In  
            enc_pan                                              Binary           In  
            enc_cardholder_name_length                           Integer          In  
            enc_cardholder_name                                  Binary           In  
            enc_dtrack1_data_length                              Integer          In  
            enc_dtrack1_data                                     Binary           In  
            enc_dtrack2_data_length                              Integer          In  
            enc_dtrack2_data                                     Binary           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            clear_pan_length                                     Integer          Both
            clear_pan                                            Binary           Out 
            clear_cardholder_name_length                         Integer          Both
            clear_cardholder_name                                Binary           Out 
            clear_dtrack1_data_length                            Integer          Both
            clear_dtrack1_data                                   Binary           Out 
            clear_dtrack2_data_length                            Integer          Both
            clear_dtrack2_data                                   Binary           Out 
            dukpt_pin_key_identifier_length                      Integer          Both
            dukpt_pin_key_identifier                             Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbfped', kw)
    if _plat == 'zos':
        def csnbfped(**kw):
            """
            csnbfped - FPE Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            enc_pan_length                                       Integer          In  
            enc_pan                                              Binary           In  
            enc_ch_name_length                                   Integer          In  
            enc_ch_name                                          Binary           In  
            enc_dtrack1_data_length                              Integer          In  
            enc_dtrack1_data                                     Binary           In  
            enc_dtrack2_data_length                              Integer          In  
            enc_dtrack2_data                                     Binary           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            clear_pan_length                                     Integer          Both
            clear_pan                                            Binary           Out 
            clear_ch_name_length                                 Integer          Both
            clear_ch_name                                        Binary           Out 
            clear_dtrack1_data_length                            Integer          Both
            clear_dtrack1_data                                   Binary           Out 
            clear_dtrack2_data_length                            Integer          Both
            clear_dtrack2_data                                   Binary           Out 
            dukpt_pin_key_identifier_length                      Integer          Both
            dukpt_pin_key_identifier                             Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbfped', kw)

if _plat in _verb['csnbfpee']:
    if _plat == 'linux':
        def csnbfpee(**kw):
            """
            csnbfpee - FPE Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_pan_length                                     Integer          In  
            clear_pan                                            Binary           In  
            clear_cardholder_name_length                         Integer          In  
            clear_cardholder_name                                Binary           In  
            clear_dtrack1_data_length                            Integer          In  
            clear_dtrack1_data                                   Binary           In  
            clear_dtrack2_data_length                            Integer          In  
            clear_dtrack2_data                                   Binary           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            enc_pan_length                                       Integer          Both
            enc_pan                                              Binary           Out 
            enc_cardholder_name_length                           Integer          Both
            enc_cardholder_name                                  Binary           Out 
            enc_dtrack1_data_length                              Integer          Both
            enc_dtrack1_data                                     Binary           Out 
            enc_dtrack2_data_length                              Integer          Both
            enc_dtrack2_data                                     Binary           Out 
            dukpt_pin_key_identifier_length                      Integer          Both
            dukpt_pin_key_identifier                             Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbfpee', kw)
    if _plat == 'zos':
        def csnbfpee(**kw):
            """
            csnbfpee - FPE Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_pan_length                                     Integer          In  
            clear_pan                                            Binary           In  
            clear_ch_name_length                                 Integer          In  
            clear_ch_name                                        Binary           In  
            clear_dtrack1_data_length                            Integer          In  
            clear_dtrack1_data                                   Binary           In  
            clear_dtrack2_data_length                            Integer          In  
            clear_dtrack2_data                                   Binary           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            enc_pan_length                                       Integer          Both
            enc_pan                                              Binary           Out 
            enc_ch_name_length                                   Integer          Both
            enc_ch_name                                          Binary           Out 
            enc_dtrack1_data_length                              Integer          Both
            enc_dtrack1_data                                     Binary           Out 
            enc_dtrack2_data_length                              Integer          Both
            enc_dtrack2_data                                     Binary           Out 
            dukpt_pin_key_identifier_length                      Integer          Both
            dukpt_pin_key_identifier                             Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbfpee', kw)

if _plat in _verb['csnbfpet']:
    if _plat == 'linux':
        def csnbfpet(**kw):
            """
            csnbfpet - FPE Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_pan_length                                     Integer          In  
            input_pan                                            Binary           In  
            input_cardholder_name_length                         Integer          In  
            input_cardholder_name                                Binary           In  
            input_dtrack1_data_length                            Integer          In  
            input_dtrack1_data                                   Binary           In  
            input_dtrack2_data_length                            Integer          In  
            input_dtrack2_data                                   Binary           In  
            input_key_identifier_length*                         Integer          In  
            input_key_identifier*                                Key label/token  Both
            output_key_identifier_length*                        Integer          In  
            output_key_identifier*                               Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            output_pan_length                                    Integer          Both
            output_pan                                           Binary           Out 
            output_cardholder_name_length                        Integer          Both
            output_cardholder_name                               Binary           Out 
            output_dtrack1_data_length                           Integer          Both
            output_dtrack1_data                                  Binary           Out 
            output_dtrack2_data_length                           Integer          Both
            output_dtrack2_data                                  Binary           Out 
            dukpt_pin_key_identifier_length                      Integer          Both
            dukpt_pin_key_identifier                             Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbfpet', kw)
    if _plat == 'zos':
        def csnbfpet(**kw):
            """
            csnbfpet - FPE Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_pan_length                                     Integer          In  
            input_pan                                            Binary           In  
            input_ch_name_length                                 Integer          In  
            input_ch_name                                        Binary           In  
            input_dtrack1_data_length                            Integer          In  
            input_dtrack1_data                                   Binary           In  
            input_dtrack2_data_length                            Integer          In  
            input_dtrack2_data                                   Binary           In  
            input_key_identifier_length*                         Integer          In  
            input_key_identifier*                                Key label/token  Both
            output_key_identifier_length*                        Integer          In  
            output_key_identifier*                               Key label/token  Both
            derivation_data_length                               Integer          In  
            derivation_data                                      Binary           In  
            output_pan_length                                    Integer          Both
            output_pan                                           Binary           Out 
            output_ch_name_length                                Integer          Both
            output_ch_name                                       Binary           Out 
            output_dtrack1_data_length                           Integer          Both
            output_dtrack1_data                                  Binary           Out 
            output_dtrack2_data_length                           Integer          Both
            output_dtrack2_data                                  Binary           Out 
            dukpt_pin_key_identifier_length                      Integer          Both
            dukpt_pin_key_identifier                             Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbfpet', kw)

if _plat in _verb['csnbffxd']:
    if _plat == 'linux':
        def csnbffxd(**kw):
            """
            csnbffxd - Format Preserving Algorithms Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            tweak_length                                         Integer          In  
            tweak                                                Binary           In  
            tweak_alphabet_length                                Integer          In  
            tweak_alphabet                                       Binary           In  
            alphabet_length                                      Integer          In  
            alphabet                                             Binary           In  
            ciphertext_length*                                   Integer          In  
            ciphertext*                                          Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            plaintext_length*                                    Integer          Both
            plaintext                                            Binary           Out 
            """
            return _do('csnbffxd', kw)
    if _plat == 'zos':
        def csnbffxd(**kw):
            """
            csnbffxd - Format Preserving Algorithms Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            tweak_length                                         Integer          In  
            tweak                                                Binary           In  
            tweak_alphabet_length                                Integer          In  
            tweak_alphabet                                       Binary           In  
            alphabet_length                                      Integer          In  
            alphabet                                             Binary           In  
            ciphertext_length*                                   Integer          In  
            ciphertext*                                          Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            plaintext_length*                                    Integer          Both
            plaintext                                            Binary           Out 
            """
            return _do('csnbffxd', kw)

if _plat in _verb['csnbffxe']:
    if _plat == 'linux':
        def csnbffxe(**kw):
            """
            csnbffxe - Format Preserving Algorithms Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            tweak_length                                         Integer          In  
            tweak                                                Binary           In  
            tweak_alphabet_length                                Integer          In  
            tweak_alphabet                                       Binary           In  
            alphabet_length                                      Integer          In  
            alphabet                                             Binary           In  
            plaintext_length*                                    Integer          In  
            plaintext*                                           Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            ciphertext_length*                                   Integer          Both
            ciphertext                                           Binary           Out 
            """
            return _do('csnbffxe', kw)
    if _plat == 'zos':
        def csnbffxe(**kw):
            """
            csnbffxe - Format Preserving Algorithms Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            tweak_length                                         Integer          In  
            tweak                                                Binary           In  
            tweak_alphabet_length                                Integer          In  
            tweak_alphabet                                       Binary           In  
            alphabet_length                                      Integer          In  
            alphabet                                             Binary           In  
            plaintext_length*                                    Integer          In  
            plaintext*                                           Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            ciphertext_length*                                   Integer          Both
            ciphertext                                           Binary           Out 
            """
            return _do('csnbffxe', kw)

if _plat in _verb['csnbffxt']:
    if _plat == 'linux':
        def csnbffxt(**kw):
            """
            csnbffxt - Format Preserving Algorithms Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_key_identifier_length*                         Integer          In  
            input_key_identifier*                                Key label/token  Both
            output_key_identifier_length*                        Integer          In  
            output_key_identifier*                               Key label/token  Both
            input_tweak_length                                   Integer          In  
            input_tweak                                          Binary           In  
            input_tweak_alphabet_length                          Integer          In  
            input_tweak_alphabet                                 Binary           In  
            input_alphabet_length                                Integer          In  
            input_alphabet                                       Binary           In  
            output_tweak_length                                  Integer          In  
            output_tweak                                         Binary           In  
            output_tweak_alphabet_length                         Integer          In  
            output_tweak_alphabet                                Binary           In  
            output_alphabet_length                               Integer          In  
            output_alphabet                                      Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            ciphertext_length*                                   Integer          Both
            ciphertext*                                          Binary           Both
            """
            return _do('csnbffxt', kw)
    if _plat == 'zos':
        def csnbffxt(**kw):
            """
            csnbffxt - Format Preserving Algorithms Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_key_identifier_length*                         Integer          In  
            input_key_identifier*                                Key label/token  Both
            output_key_identifier_length*                        Integer          In  
            output_key_identifier*                               Key label/token  Both
            input_tweak_length                                   Integer          In  
            input_tweak                                          Binary           In  
            input_tweak_alphabet_length                          Integer          In  
            input_tweak_alphabet                                 Binary           In  
            input_alphabet_length                                Integer          In  
            input_alphabet                                       Binary           In  
            output_tweak_length                                  Integer          In  
            output_tweak                                         Binary           In  
            output_tweak_alphabet_length                         Integer          In  
            output_tweak_alphabet                                Binary           In  
            output_alphabet_length                               Integer          In  
            output_alphabet                                      Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            ciphertext_length*                                   Integer          Both
            ciphertext*                                          Binary           Both
            """
            return _do('csnbffxt', kw)

if _plat in _verb['csnbpcu']:
    if _plat == 'linux':
        def csnbpcu(**kw):
            """
            csnbpcu - PIN Change/Unblock

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            authentication_master_key_length                     Integer          In  
            authentication_master_key                            Key label/token  Both
            encryption_master_key_length*                        Integer          In  
            encryption_master_key*                               Key label/token  Both
            key_generation_data_length*                          Integer          In  
            key_generation_data*                                 Binary           In  
            new_reference_pin_key_length*                        Integer          In  
            new_reference_pin_key*                               Key label/token  Both
            new_reference_pin_block*                             Binary           In  
            new_reference_pin_profile*                           String           In  
            new_reference_pan_data*                              PAN data         In  
            current_reference_pin_key_length*                    Integer          In  
            current_reference_pin_key*                           Key label/token  Both
            current_reference_pin_block*                         Binary           In  
            current_reference_pin_profile*                       String           In  
            current_reference_pan_data*                          PAN data         In  
            output_pin_data_length                               Integer          In  
            output_pin_data                                      Binary           In  
            output_pin_profile*                                  String           In  
            output_pin_message_length*                           Integer          Both
            output_pin_message                                   Binary           Out 
            """
            return _do('csnbpcu', kw)
    if _plat == 'zos':
        def csnbpcu(**kw):
            """
            csnbpcu - PIN Change/Unblock

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            authentication_issuer_master_key_length              Integer          In  
            authentication_issuer_master_key_identifier          Key label/token  Both
            encryption_issuer_master_key_length*                 Integer          In  
            encryption_issuer_master_key_identifier*             Key label/token  Both
            key_generation_data_length*                          Integer          In  
            key_generation_data*                                 Binary           In  
            new_reference_pin_key_length*                        Integer          In  
            new_reference_pin_key_identifier*                    Key label/token  Both
            new_reference_pin_block*                             Binary           In  
            new_reference_pin_profile*                           String           In  
            new_reference_pin_pan_data*                          PAN data         In  
            current_reference_pin_key_length*                    Integer          In  
            current_reference_pin_key_identifier*                Key label/token  Both
            current_reference_pin_block*                         Binary           In  
            current_reference_pin_profile*                       String           In  
            current_reference_pin_pan_data*                      PAN data         In  
            output_pin_data_length                               Integer          In  
            output_pin_data                                      Binary           In  
            output_pin_profile*                                  String           In  
            output_pin_message_length*                           Integer          Both
            output_pin_message                                   Binary           Out 
            """
            return _do('csnbpcu', kw)

if _plat in _verb['csnbpfo']:
    if _plat == 'linux':
        def csnbpfo(**kw):
            """
            csnbpfo - Recover PIN from Offset

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pin_encryption_key_identifier_length*                Integer          In  
            pin_encryption_key_identifier*                       Key label/token  Both
            pin_generation_key_identifier_length*                Integer          In  
            pin_generation_key_identifier*                       Key label/token  Both
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            offset*                                              String           In  
            reserved_1                                           Integer          In  
            data_array*                                          String           In  
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            """
            return _do('csnbpfo', kw)
    if _plat == 'zos':
        def csnbpfo(**kw):
            """
            csnbpfo - Recover PIN from Offset

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pin_encryption_key_identifier_length*                Integer          In  
            pin_encryption_key_identifier*                       Key label/token  Both
            pin_generation_key_identifier_length*                Integer          In  
            pin_generation_key_identifier*                       Key label/token  Both
            pin_profile*                                         String           In  
            pan_data*                                            PAN data         In  
            offset*                                              String           In  
            reserved_1                                           Integer          In  
            data_array*                                          String           In  
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            """
            return _do('csnbpfo', kw)

if _plat in _verb['csnbsky']:
    if _plat == 'linux':
        def csnbsky(**kw):
            """
            csnbsky - Secure Messaging for Keys

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            input_key_identifier*                                Key label/token  Both
            key_encrypting_key_identifier                        Key label/token  Both
            secmsg_key_identifier*                               Key label/token  Both
            text_length*                                         Integer          In  
            clear_text*                                          Binary           In  
            initialization_vector                                Binary           In  
            key_offset                                           Integer          In  
            key_offset_field_length*                             Integer          In  
            enciphered_text                                      Binary           Out 
            output_chaining_vector                               Binary           Out 
            """
            return _do('csnbsky', kw)
    if _plat == 'zos':
        def csnbsky(**kw):
            """
            csnbsky - Secure Messaging for Keys

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            input_key_identifier*                                Key label/token  Both
            key_encrypting_key_identifier                        Key label/token  Both
            secmsg_key_identifier*                               Key label/token  Both
            text_length*                                         Integer          In  
            clear_text*                                          Binary           In  
            initialization_vector                                Binary           In  
            key_offset                                           Integer          In  
            key_offset_field_length*                             Integer          In  
            enciphered_text                                      Binary           Out 
            output_chaining_vector                               Binary           Out 
            """
            return _do('csnbsky', kw)

if _plat in _verb['csnbspn']:
    if _plat == 'linux':
        def csnbspn(**kw):
            """
            csnbspn - Secure Messaging for PINs

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            input_pin_block*                                     Binary           In  
            pin_encrypting_key_identifier*                       Key label/token  Both
            input_pin_profile*                                   String           In  
            input_pan_data*                                      PAN data         In  
            secmsg_key_identifier*                               Key label/token  Both
            output_pin_profile*                                  String           In  
            output_pan_data*                                     String           In  
            text_length*                                         Integer          In  
            clear_text                                           Binary           In  
            initialization_vector                                Binary           In  
            pin_offset                                           Integer          In  
            pin_offset_field_length*                             Integer          In  
            enciphered_text                                      Binary           Out 
            output_chaining_vector                               Binary           Out 
            """
            return _do('csnbspn', kw)
    if _plat == 'zos':
        def csnbspn(**kw):
            """
            csnbspn - Secure Messaging for PINs

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            input_pin_block*                                     Binary           In  
            pin_encrypting_key_identifier*                       Key label/token  Both
            input_pin_profile*                                   String           In  
            input_pan_data*                                      PAN data         In  
            secmsg_key_identifier*                               Key label/token  Both
            output_pin_profile*                                  String           In  
            output_pan_data*                                     String           In  
            text_length*                                         Integer          In  
            clear_text                                           Binary           In  
            initialization_vector                                Binary           In  
            pin_offset                                           Integer          In  
            pin_offset_field_length*                             Integer          In  
            enciphered_text                                      Binary           Out 
            output_chaining_vector                               Binary           Out 
            """
            return _do('csnbspn', kw)

if _plat in _verb['csnbtrv']:
    if _plat == 'linux':
        def csnbtrv(**kw):
            """
            csnbtrv - Transaction Validation

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            transaction_key_length*                              Integer          In  
            transaction_key*                                     Key label/token  Both
            transaction_info_length*                             Integer          In  
            transaction_info*                                    String           In  
            validation_values_length*                            Integer          Both
            validation_values                                    String           Both
            """
            return _do('csnbtrv', kw)
    if _plat == 'zos':
        def csnbtrv(**kw):
            """
            csnbtrv - Transaction Validation

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            transaction_key_identifier_length*                   Integer          In  
            transaction_key_identifier*                          Key label/token  Both
            transaction_info_length*                             Integer          In  
            transaction_info*                                    String           In  
            validation_values_length*                            Integer          Both
            validation_values                                    String           Both
            """
            return _do('csnbtrv', kw)

if _plat in _verb['csnbddpg']:
    if _plat == 'linux':
        def csnbddpg(**kw):
            """
            csnbddpg - DK Deterministic Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            account_info_er_length*                              Integer          In  
            account_info_er*                                     Binary           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            pin_length*                                          Integer          In  
            pin_generation_key_identifier_length*                Integer          In  
            pin_generation_key_identifier*                       Key label/token  Both
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            pin_print_key_identifier_length*                     Integer          In  
            pin_print_key_identifier*                            Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            pin_print_block_length*                              Integer          Both
            pin_print_block                                      Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbddpg', kw)
    if _plat == 'zos':
        def csnbddpg(**kw):
            """
            csnbddpg - DK Deterministic PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            account_info_er_length*                              Integer          In  
            account_info_er*                                     Binary           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            pin_length*                                          Integer          In  
            pin_generation_key_identifier_length*                Integer          In  
            pin_generation_key_identifier*                       Key label/token  Both
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            pin_print_key_identifier_length*                     Integer          In  
            pin_print_key_identifier*                            Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            pin_print_block_length*                              Integer          Both
            pin_print_block                                      Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbddpg', kw)

if _plat in _verb['csnbdmp']:
    if _plat == 'linux':
        def csnbdmp(**kw):
            """
            csnbdmp - DK Migrate PIN

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            iso1_pin_block_length*                               Integer          In  
            iso1_pin_block*                                      Binary           In  
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbdmp', kw)
    if _plat == 'zos':
        def csnbdmp(**kw):
            """
            csnbdmp - DK Migrate PIN

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            iso1_pin_block_length*                               Integer          In  
            iso1_pin_block*                                      Binary           In  
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbdmp', kw)

if _plat in _verb['csnbdpmt']:
    if _plat == 'linux':
        def csnbdpmt(**kw):
            """
            csnbdpmt - DK PAN Modify in Transaction

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            current_pan_data_length*                             Integer          In  
            current_pan_data*                                    String           In  
            new_pan_data_length*                                 Integer          In  
            new_pan_data*                                        String           In  
            current_card_p_data_length*                          Integer          In  
            current_card_p_data*                                 Binary           In  
            current_card_t_data_length*                          Integer          In  
            current_card_t_data*                                 Binary           In  
            new_card_p_data_length*                              Integer          In  
            new_card_p_data*                                     Binary           In  
            new_card_t_data_length*                              Integer          In  
            new_card_t_data*                                     Binary           In  
            cmac_fus_length*                                     Integer          In  
            cmac_fus*                                            Binary           In  
            iso_encrypted_pin_block_length*                      Integer          In  
            iso_encrypted_pin_block*                             Binary           In  
            current_pin_reference_value_length*                  Integer          In  
            current_pin_reference_value*                         Binary           In  
            current_prw_random_number_length*                    Integer          In  
            current_prw_random_number*                           Binary           In  
            cmac_fus_key_identifier_length*                      Integer          In  
            cmac_fus_key_identifier*                             Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            new_prw_key_identifier_length*                       Integer          In  
            new_prw_key_identifier*                              Key label/token  Both
            new_pin_reference_value_length*                      Integer          Both
            new_pin_reference_value                              Binary           Out 
            new_prw_random_number_length*                        Integer          Both
            new_prw_random_number                                Binary           Out 
            """
            return _do('csnbdpmt', kw)
    if _plat == 'zos':
        def csnbdpmt(**kw):
            """
            csnbdpmt - DK PAN Modify in Transaction

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            current_pan_data_length*                             Integer          In  
            current_pan_data*                                    String           In  
            new_pan_data_length*                                 Integer          In  
            new_pan_data*                                        String           In  
            current_card_p_data_length*                          Integer          In  
            current_card_p_data*                                 Binary           In  
            current_card_t_data_length*                          Integer          In  
            current_card_t_data*                                 Binary           In  
            new_card_p_data_length*                              Integer          In  
            new_card_p_data*                                     Binary           In  
            new_card_t_data_length*                              Integer          In  
            new_card_t_data*                                     Binary           In  
            cmac_fus_length*                                     Integer          In  
            cmac_fus*                                            Binary           In  
            iso_encrypted_pin_block_length*                      Integer          In  
            iso_encrypted_pin_block*                             Binary           In  
            current_pin_reference_value_length*                  Integer          In  
            current_pin_reference_value*                         Binary           In  
            current_prw_random_number_length*                    Integer          In  
            current_prw_random_number*                           Binary           In  
            cmac_fus_key_identifier_length*                      Integer          In  
            cmac_fus_key_identifier*                             Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            new_prw_key_identifier_length*                       Integer          In  
            new_prw_key_identifier*                              Key label/token  Both
            new_pin_reference_value_length*                      Integer          Both
            new_pin_reference_value                              Binary           Out 
            new_prw_random_number_length*                        Integer          Both
            new_prw_random_number                                Binary           Out 
            """
            return _do('csnbdpmt', kw)

if _plat in _verb['csnbdpt']:
    if _plat == 'linux':
        def csnbdpt(**kw):
            """
            csnbdpt - DK PAN Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            new_pan_data_length*                                 Integer          In  
            new_pan_data*                                        String           In  
            new_card_p_data_length*                              Integer          In  
            new_card_p_data*                                     Binary           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            prw_random_number_length*                            Integer          In  
            prw_random_number*                                   Binary           In  
            current_encrypted_pin_block_length*                  Integer          In  
            current_encrypted_pin_block*                         Binary           In  
            current_pin_block_mac_length*                        Integer          In  
            current_pin_block_mac*                               Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            """
            return _do('csnbdpt', kw)
    if _plat == 'zos':
        def csnbdpt(**kw):
            """
            csnbdpt - DK PAN Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            new_pan_data_length*                                 Integer          In  
            new_pan_data*                                        String           In  
            new_card_p_data_length*                              Integer          In  
            new_card_p_data*                                     Binary           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            prw_random_number_length*                            Integer          In  
            prw_random_number*                                   Binary           In  
            current_encrypted_pin_block_length*                  Integer          In  
            current_encrypted_pin_block*                         Binary           In  
            current_pin_block_mac_length*                        Integer          In  
            current_pin_block_mac*                               Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            """
            return _do('csnbdpt', kw)

if _plat in _verb['csnbdpc']:
    if _plat == 'linux':
        def csnbdpc(**kw):
            """
            csnbdpc - DK PIN Change

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            cur_iso_pin_block_length*                            Integer          In  
            cur_iso_pin_block*                                   Binary           In  
            new_iso_pin_block_length*                            Integer          In  
            new_iso_pin_block*                                   Binary           In  
            card_script_data_length*                             Integer          In  
            card_script_data*                                    Binary           In  
            script_offset                                        Integer          In  
            script_offset_field_length*                          Integer          In  
            script_initialization_vector_length                  Integer          In  
            script_initialization_vector                         Binary           In  
            output_pin_profile                                   String           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            prw_random_number_length*                            Integer          In  
            prw_random_number*                                   Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            cur_ipin_encryption_key_identifier_length*           Integer          In  
            cur_ipin_encryption_key_identifier*                  Key label/token  Both
            new_ipin_encryption_key_identifier_length*           Integer          In  
            new_ipin_encryption_key_identifier*                  Key label/token  Both
            script_key_identifier_length*                        Integer          In  
            script_key_identifier*                               Key label/token  Both
            script_mac_key_identifier_length*                    Integer          In  
            script_mac_key_identifier*                           Key label/token  Both
            new_prw_key_identifier_length*                       Integer          In  
            new_prw_key_identifier*                              Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            script_length                                        Integer          Both
            script                                               Binary           Out 
            script_mac_length                                    Integer          Both
            script_mac                                           Binary           Out 
            new_pin_reference_value_length*                      Integer          Both
            new_pin_reference_value                              Binary           Out 
            new_prw_random_number_length*                        Integer          Both
            new_prw_random_number                                Binary           Out 
            output_encrypted_pin_block_length                    Integer          Both
            output_encrypted_pin_block                           Binary           Out 
            pin_block_mac_length                                 Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbdpc', kw)
    if _plat == 'zos':
        def csnbdpc(**kw):
            """
            csnbdpc - DK PIN Change

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            cur_iso_pin_block_length*                            Integer          In  
            cur_iso_pin_block*                                   Binary           In  
            new_iso_pin_block_length*                            Integer          In  
            new_iso_pin_block*                                   Binary           In  
            card_script_data_length*                             Integer          In  
            card_script_data*                                    Binary           In  
            script_offset                                        Integer          In  
            script_offset_field_length*                          Integer          In  
            script_initialization_vector_length                  Integer          In  
            script_initialization_vector                         Binary           In  
            output_pin_profile                                   String           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            prw_random_number_length*                            Integer          In  
            prw_random_number*                                   Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            cur_ipin_encryption_key_identifier_length*           Integer          In  
            cur_ipin_encryption_key_identifier*                  Key label/token  Both
            new_ipin_encryption_key_identifier_length*           Integer          In  
            new_ipin_encryption_key_identifier*                  Key label/token  Both
            script_key_identifier_length*                        Integer          In  
            script_key_identifier*                               Key label/token  Both
            script_mac_key_identifier_length*                    Integer          In  
            script_mac_key_identifier*                           Key label/token  Both
            new_prw_key_identifier_length*                       Integer          In  
            new_prw_key_identifier*                              Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            script_length                                        Integer          Both
            script                                               Binary           Out 
            script_mac_length                                    Integer          Both
            script_mac                                           Binary           Out 
            new_pin_reference_value_length*                      Integer          Both
            new_pin_reference_value                              Binary           Out 
            new_prw_random_number_length*                        Integer          Both
            new_prw_random_number                                Binary           Out 
            output_encrypted_pin_block_length                    Integer          Both
            output_encrypted_pin_block                           Binary           Out 
            pin_block_mac_length                                 Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbdpc', kw)

if _plat in _verb['csnbdpv']:
    if _plat == 'linux':
        def csnbdpv(**kw):
            """
            csnbdpv - DK PIN Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_data_length*                                    Integer          In  
            card_data*                                           Binary           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            prw_random_number_length*                            Integer          In  
            prw_random_number*                                   Binary           In  
            iso_encrypted_pin_block_length*                      Integer          In  
            iso_encrypted_pin_block*                             Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            """
            return _do('csnbdpv', kw)
    if _plat == 'zos':
        def csnbdpv(**kw):
            """
            csnbdpv - DK PIN Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_data_length*                                    Integer          In  
            card_data*                                           Binary           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            prw_random_number_length*                            Integer          In  
            prw_random_number*                                   Binary           In  
            iso_encrypted_pin_block_length*                      Integer          In  
            iso_encrypted_pin_block*                             Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            """
            return _do('csnbdpv', kw)

if _plat in _verb['csnbdpnu']:
    if _plat == 'linux':
        def csnbdpnu(**kw):
            """
            csnbdpnu - DK PRW Card Number Update

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            encrypted_pin_block_length*                          Integer          In  
            encrypted_pin_block*                                 Binary           In  
            pin_block_mac_length*                                Integer          In  
            pin_block_mac*                                       Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            """
            return _do('csnbdpnu', kw)
    if _plat == 'zos':
        def csnbdpnu(**kw):
            """
            csnbdpnu - DK PRW Card Number Update

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            encrypted_pin_block_length*                          Integer          In  
            encrypted_pin_block*                                 Binary           In  
            pin_block_mac_length*                                Integer          In  
            pin_block_mac*                                       Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            """
            return _do('csnbdpnu', kw)

if _plat in _verb['csnbdcu2']:
    if _plat == 'linux':
        def csnbdcu2(**kw):
            """
            csnbdcu2 - DK PRW Card Number Update2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            encrypted_pin_block_length*                          Integer          In  
            encrypted_pin_block*                                 Binary           In  
            pin_block_mac_length*                                Integer          In  
            pin_block_mac*                                       Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            opin_chip_encryption_key_identifier_length*          Integer          In  
            opin_chip_encryption_key_identifier*                 Key label/token  Both
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            new_chip_encrypted_pin_block_length*                 Integer          Both
            new_chip_encrypted_pin_block                         Binary           Out 
            """
            return _do('csnbdcu2', kw)
    if _plat == 'zos':
        def csnbdcu2(**kw):
            """
            csnbdcu2 - DK PRW Card Number Update2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            encrypted_pin_block_length*                          Integer          In  
            encrypted_pin_block*                                 Binary           In  
            pin_block_mac_length*                                Integer          In  
            pin_block_mac*                                       Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            opin_chip_encryption_key_identifier_length*          Integer          In  
            opin_chip_encryption_key_identifier*                 Key label/token  Both
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            new_chip_encrypted_pin_block_length*                 Integer          Both
            new_chip_encrypted_pin_block                         Binary           Out 
            """
            return _do('csnbdcu2', kw)

if _plat in _verb['csnbdpcg']:
    if _plat == 'linux':
        def csnbdpcg(**kw):
            """
            csnbdpcg - DK PRW CMAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            current_pan_data_length*                             Integer          In  
            current_pan_data*                                    String           In  
            new_pan_data_length*                                 Integer          In  
            new_pan_data*                                        String           In  
            current_card_data_length*                            Integer          In  
            current_card_data*                                   Binary           In  
            new_card_data_length*                                Integer          In  
            new_card_data*                                       Binary           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            cmac_fus_key_identifier_length*                      Integer          In  
            cmac_fus_key_identifier*                             Key label/token  Both
            cmac_fus_length*                                     Integer          Both
            cmac_fus                                             Binary           Out 
            """
            return _do('csnbdpcg', kw)
    if _plat == 'zos':
        def csnbdpcg(**kw):
            """
            csnbdpcg - DK PRW CMAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            current_pan_data_length*                             Integer          In  
            current_pan_data*                                    String           In  
            new_pan_data_length*                                 Integer          In  
            new_pan_data*                                        String           In  
            current_card_data_length*                            Integer          In  
            current_card_data*                                   Binary           In  
            new_card_data_length*                                Integer          In  
            new_card_data*                                       Binary           In  
            pin_reference_value_length*                          Integer          In  
            pin_reference_value*                                 Binary           In  
            cmac_fus_key_identifier_length*                      Integer          In  
            cmac_fus_key_identifier*                             Key label/token  Both
            cmac_fus_length*                                     Integer          Both
            cmac_fus                                             Binary           Out 
            """
            return _do('csnbdpcg', kw)

if _plat in _verb['csnbdrpg']:
    if _plat == 'linux':
        def csnbdrpg(**kw):
            """
            csnbdrpg - DK Random PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            pin_length*                                          Integer          In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            pin_print_key_identifier_length*                     Integer          In  
            pin_print_key_identifier*                            Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            pin_print_block_length*                              Integer          Both
            pin_print_block                                      Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbdrpg', kw)
    if _plat == 'zos':
        def csnbdrpg(**kw):
            """
            csnbdrpg - DK Random PIN Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            pin_length*                                          Integer          In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            pin_print_key_identifier_length*                     Integer          In  
            pin_print_key_identifier*                            Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            pin_print_block_length*                              Integer          Both
            pin_print_block                                      Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            """
            return _do('csnbdrpg', kw)

if _plat in _verb['csnbdrg2']:
    if _plat == 'linux':
        def csnbdrg2(**kw):
            """
            csnbdrg2 - DK Random PIN Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            pin_length*                                          Integer          In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            pin_print_key_identifier_length*                     Integer          In  
            pin_print_key_identifier*                            Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            opin_chip_encryption_key_identifier_length*          Integer          In  
            opin_chip_encryption_key_identifier*                 Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            pin_print_block_length*                              Integer          Both
            pin_print_block                                      Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            chip_encrypted_pin_block_length*                     Integer          Both
            chip_encrypted_pin_block                             Binary           Out 
            """
            return _do('csnbdrg2', kw)
    if _plat == 'zos':
        def csnbdrg2(**kw):
            """
            csnbdrg2 - DK Random PIN Generate2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pan_data_length*                                     Integer          In  
            pan_data*                                            String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            pin_length*                                          Integer          In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            pin_print_key_identifier_length*                     Integer          In  
            pin_print_key_identifier*                            Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            opin_chip_encryption_key_identifier_length*          Integer          In  
            opin_chip_encryption_key_identifier*                 Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            pin_print_block_length*                              Integer          Both
            pin_print_block                                      Binary           Out 
            encrypted_pin_block_length*                          Integer          Both
            encrypted_pin_block                                  Binary           Out 
            pin_block_mac_length*                                Integer          Both
            pin_block_mac                                        Binary           Out 
            chip_encrypted_pin_block_length*                     Integer          Both
            chip_encrypted_pin_block                             Binary           Out 
            """
            return _do('csnbdrg2', kw)

if _plat in _verb['csnbdrp']:
    if _plat == 'linux':
        def csnbdrp(**kw):
            """
            csnbdrp - DK Regenerate PRW

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            encrypted_pin_block_length*                          Integer          In  
            encrypted_pin_block*                                 Binary           In  
            pin_block_mac_length*                                Integer          In  
            pin_block_mac*                                       Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            """
            return _do('csnbdrp', kw)
    if _plat == 'zos':
        def csnbdrp(**kw):
            """
            csnbdrp - DK Regenerate PRW

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            card_p_data_length*                                  Integer          In  
            card_p_data*                                         Binary           In  
            card_t_data_length*                                  Integer          In  
            card_t_data*                                         Binary           In  
            encrypted_pin_block_length*                          Integer          In  
            encrypted_pin_block*                                 Binary           In  
            pin_block_mac_length*                                Integer          In  
            pin_block_mac*                                       Binary           In  
            prw_key_identifier_length*                           Integer          In  
            prw_key_identifier*                                  Key label/token  Both
            ipin_encryption_key_identifier_length*               Integer          In  
            ipin_encryption_key_identifier*                      Key label/token  Both
            iepb_mac_key_identifier_length*                      Integer          In  
            iepb_mac_key_identifier*                             Key label/token  Both
            opin_encryption_key_identifier_length*               Integer          In  
            opin_encryption_key_identifier*                      Key label/token  Both
            oepb_mac_key_identifier_length*                      Integer          In  
            oepb_mac_key_identifier*                             Key label/token  Both
            pin_reference_value_length*                          Integer          Both
            pin_reference_value                                  Binary           Out 
            prw_random_number_length*                            Integer          Both
            prw_random_number                                    Binary           Out 
            new_encrypted_pin_block_length*                      Integer          Both
            new_encrypted_pin_block                              Binary           Out 
            new_pin_block_mac_length*                            Integer          Both
            new_pin_block_mac                                    Binary           Out 
            """
            return _do('csnbdrp', kw)

if _plat in _verb['csndt34b']:
    if _plat == 'linux':
        def csndt34b(**kw):
            """
            csndt34b - TR-34 Bind-Begin (CSNDT34B)

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_token_length*                                  Integer          In  
            input_token*                                         Binary           In  
            crl_length                                           Integer          In  
            crl                                                  Binary           In  
            cred_kdh_length*                                     Integer          In  
            cred_kdh*                                            Binary           In  
            old_cred_kdh_length                                  Integer          In  
            old_cred_kdh                                         Binary           In  
            cred_krd_length*                                     Integer          Both
            cred_krd                                             Binary           Both
            private_key_identifier_length                        Integer          In  
            private_key_identifier                               Key label/token  In  
            output_token_length*                                 Integer          Both
            output_token                                         Binary           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34b', kw)
    if _plat == 'zos':
        def csndt34b(**kw):
            """
            csndt34b - TR-34 Bind-Begin

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_token_length*                                  Integer          In  
            input_token*                                         Binary           In  
            crl_length                                           Integer          In  
            crl                                                  Binary           In  
            cred_kdh_length*                                     Integer          In  
            cred_kdh*                                            Binary           In  
            old_cred_kdh_length                                  Integer          In  
            old_cred_kdh                                         Binary           In  
            cred_krd_length*                                     Integer          Both
            cred_krd                                             Binary           Both
            private_key_identifier_length                        Integer          In  
            private_key_identifier                               Key label/token  In  
            output_token_length*                                 Integer          Both
            output_token                                         Binary           Out 
            reserved_length                                      Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34b', kw)

if _plat in _verb['csndt34c']:
    if _plat == 'linux':
        def csndt34c(**kw):
            """
            csndt34c - TR-34 Bind-Complete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_token_length                                   Integer          In  
            input_token                                          Binary           In  
            cred_kdh_length                                      Integer          In  
            cred_kdh                                             Binary           In  
            cred_krd_length                                      Integer          In  
            cred_krd                                             Binary           In  
            random_number_token_length                           Integer          In  
            random_number_token                                  Binary           In  
            output_token_length                                  Integer          Both
            output_token                                         Binary           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34c', kw)
    if _plat == 'zos':
        def csndt34c(**kw):
            """
            csndt34c - TR-34 Bind-Complete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_token_length                                   Integer          In  
            input_token                                          Binary           In  
            cred_kdh_length                                      Integer          In  
            cred_kdh                                             Binary           In  
            cred_krd_length                                      Integer          In  
            cred_krd                                             Binary           In  
            random_number_token_length                           Integer          In  
            random_number_token                                  Binary           In  
            output_token_length                                  Integer          Both
            output_token                                         Binary           Out 
            reserved_length                                      Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34c', kw)

if _plat in _verb['csndt34d']:
    if _plat == 'linux':
        def csndt34d(**kw):
            """
            csndt34d - TR-34 Key Distribution

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  Both
            unwrap_kek_identifier_length                         Integer          In  
            unwrap_kek_identifier                                Key label/token  Both
            freshness_indicator_length*                          Integer          In  
            freshness_indicator                                  Binary           In  
            crl_length                                           Integer          In  
            crl                                                  Binary           In  
            cred_kdh_length*                                     Integer          In  
            cred_kdh*                                            Binary           In  
            cred_krd_length*                                     Integer          In  
            cred_krd*                                            Binary           In  
            private_key_identifier_length                        Integer          In  
            private_key_identifier                               Key label/token  In  
            key_version_number*                                  String           In  
            opt_blocks_length                                    Integer          In  
            opt_blocks                                           Binary           In  
            output_token_length*                                 Integer          Both
            output_token                                         Binary           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34d', kw)
    if _plat == 'zos':
        def csndt34d(**kw):
            """
            csndt34d - TR-34 Key Distribution

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  Both
            unwrap_kek_identifier_length                         Integer          In  
            unwrap_kek_identifier                                Key label/token  Both
            freshness_indicator_length*                          Integer          In  
            freshness_indicator                                  Binary           In  
            crl_length                                           Integer          In  
            crl                                                  Binary           In  
            cred_kdh_length*                                     Integer          In  
            cred_kdh*                                            Binary           In  
            cred_krd_length*                                     Integer          In  
            cred_krd*                                            Binary           In  
            private_key_identifier_length                        Integer          In  
            private_key_identifier                               Key label/token  In  
            key_version_number*                                  String           In  
            opt_blocks_length                                    Integer          In  
            opt_blocks                                           Binary           In  
            output_token_length*                                 Integer          Both
            output_token                                         Binary           Out 
            reserved_length                                      Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34d', kw)

if _plat in _verb['csndt34r']:
    if _plat == 'linux':
        def csndt34r(**kw):
            """
            csndt34r - TR-34 Key Receive

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_token_length*                                  Integer          In  
            input_token*                                         Binary           In  
            cred_kdh_length*                                     Integer          In  
            cred_kdh*                                            Binary           In  
            input_freshness_indicator_length                     Integer          In  
            input_freshness_indicator                            Binary           In  
            private_key_identifier_length*                       Integer          In  
            private_key_identifier*                              Key label/token  In  
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Out 
            output_freshness_indicator_length                    Integer          Both
            output_freshness_indicator                           Binary           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34r', kw)
    if _plat == 'zos':
        def csndt34r(**kw):
            """
            csndt34r - TR-34 Key Receive

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            input_token_length*                                  Integer          In  
            input_token*                                         Binary           In  
            cred_kdh_length*                                     Integer          In  
            cred_kdh*                                            Binary           In  
            input_freshness_indicator_length                     Integer          In  
            input_freshness_indicator                            Binary           In  
            private_key_identifier_length*                       Integer          In  
            private_key_identifier*                              Key label/token  In  
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Out 
            output_freshness_indicator_length                    Integer          Both
            output_freshness_indicator                           Binary           Out 
            reserved_length                                      Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csndt34r', kw)

if _plat in _verb['csnbt31c']:
    if _plat == 'linux':
        def csnbt31c(**kw):
            """
            csnbt31c - TR31 Key Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_name_1_length                                   
            key_name_1                                          
            key_name_2_length                                   
            key_name_2                                          
            clear_key_bit_length                                
            key_version_number_1                                
            key_version_number_2                                
            opt_blocks_1_length                                 
            opt_blocks_1                                        
            opt_blocks_2_length                                 
            opt_blocks_2                                        
            key_field_length_1                                  
            key_field_length_2                                  
            kek_key_identifier_1_length                         
            kek_key_identifier_1                                
            kek_key_identifier_2_length                         
            kek_key_identifier_2                                
            generated_key_identifier_1_length                   
            generated_key_identifier_1                          
            generated_key_identifier_2_length                   
            generated_key_identifier_2                          
            ob_data_length                                      
            ob_data                                             
            reserved2_length                                    
            reserved2                                           
            reserved3_length                                    
            reserved3                                           
            reserved4_length                                    
            reserved4                                           
            """
            return _do('csnbt31c', kw)
    if _plat == 'zos':
        def csnbt31c(**kw):
            """
            csnbt31c - TR-31 Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            key_name_1_length                                   
            key_name_1                                          
            key_name_2_length                                   
            key_name_2                                          
            clear_key_bit_length                                
            key_version_number_1                                
            key_version_number_2                                
            opt_blocks_1_length                                 
            opt_blocks_1                                        
            opt_blocks_2_length                                 
            opt_blocks_2                                        
            key_field_length_1                                  
            key_field_length_2                                  
            kek_key_identifier_1_length                         
            kek_key_identifier_1                                
            kek_key_identifier_2_length                         
            kek_key_identifier_2                                
            generated_key_identifier_1_length                   
            generated_key_identifier_1                          
            generated_key_identifier_2_length                   
            generated_key_identifier_2                          
            ob_data_length                                      
            ob_data                                             
            reserved2_length                                    
            reserved2                                           
            reserved3_length                                    
            reserved3                                           
            reserved4_length                                    
            reserved4                                           
            """
            return _do('csnbt31c', kw)

if _plat in _verb['csnbt31x']:
    if _plat == 'linux':
        def csnbt31x(**kw):
            """
            csnbt31x - TR31 Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_version_number*                                  String           In  
            key_field_length*                                    Integer          In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier                                Key label/token  Both
            unwrap_kek_identifier_length                         Integer          In  
            unwrap_kek_identifier                                Key label/token  Both
            wrap_kek_identifier_length                           Integer          In  
            wrap_kek_identifier                                  Key label/token  Both
            opt_blocks_length                                    Integer          In  
            opt_blocks                                           Binary           In  
            tr31_key_block_length*                               Integer          Both
            tr31_key_block                                       Binary           Out 
            """
            return _do('csnbt31x', kw)
    if _plat == 'zos':
        def csnbt31x(**kw):
            """
            csnbt31x - TR-31 Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_version_number*                                  String           In  
            key_field_length*                                    Integer          In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier                                Key label/token  Both
            unwrap_kek_identifier_length                         Integer          In  
            unwrap_kek_identifier                                Key label/token  Both
            wrap_kek_identifier_length                           Integer          In  
            wrap_kek_identifier                                  Key label/token  Both
            opt_blks_length                                      Integer          In  
            opt_blocks                                           Binary           In  
            tr31_key_block_length*                               Integer          Both
            tr31_key_block                                       Binary           Out 
            """
            return _do('csnbt31x', kw)

if _plat in _verb['csnbt31i']:
    if _plat == 'linux':
        def csnbt31i(**kw):
            """
            csnbt31i - TR31 Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            tr31_key_block_length*                               Integer          In  
            tr31_key_block*                                      Binary           In  
            unwrap_kek_identifier_length*                        Integer          In  
            unwrap_kek_identifier*                               Key label/token  Both
            wrap_kek_identifier_length                           Integer          In  
            wrap_kek_identifier                                  Key label/token  Both
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Out 
            num_opt_blocks                                       Integer          Out 
            cv_source                                            Integer          Out 
            protection_method                                    Integer          Out 
            """
            return _do('csnbt31i', kw)
    if _plat == 'zos':
        def csnbt31i(**kw):
            """
            csnbt31i - TR-31 Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            tr31_key_block_length*                               Integer          In  
            tr31_key_block*                                      Binary           In  
            unwrap_kek_identifier_length*                        Integer          In  
            unwrap_kek_identifier*                               Key label/token  Both
            wrap_kek_identifier_length                           Integer          In  
            wrap_kek_identifier                                  Key label/token  Both
            output_key_identifier_length*                        Integer          Both
            output_key_identifier                                Binary           Out 
            num_opt_blks                                         Integer          Out 
            cv_source                                            Integer          Out 
            protection_method                                    Integer          Out 
            """
            return _do('csnbt31i', kw)

if _plat in _verb['csnbt31p']:
    if _plat == 'linux':
        def csnbt31p(**kw):
            """
            csnbt31p - TR31 Key Token Parse

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            tr31_key_length*                                     Integer          In  
            tr31_key*                                            Binary           In  
            key_block_version                                    String           Out 
            key_block_length                                     Integer          Out 
            key_usage                                            String           Out 
            algorithm                                            String           Out 
            mode                                                 String           Out 
            key_version_number                                   String           Out 
            exportability                                        String           Out 
            num_opt_blocks                                       Integer          Out 
            """
            return _do('csnbt31p', kw)
    if _plat == 'zos':
        def csnbt31p(**kw):
            """
            csnbt31p - TR-31 Parse

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            tr31_key_block_length*                               Integer          In  
            tr31_key_block*                                      Binary           In  
            key_block_version                                    String           Out 
            key_block_length                                     Integer          Out 
            key_usage                                            String           Out 
            algorithm                                            String           Out 
            mode                                                 String           Out 
            key_version_number                                   String           Out 
            exportability                                        String           Out 
            num_opt_blocks                                       Integer          Out 
            """
            return _do('csnbt31p', kw)

if _plat in _verb['csnbt31o']:
    if _plat == 'linux':
        def csnbt31o(**kw):
            """
            csnbt31o - TR31 Optional Data Build

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            opt_blocks_bfr_length*                               Integer          In  
            opt_blocks_length                                    Integer          Both
            opt_blocks                                           Binary           Both
            num_opt_blocks                                       Integer          Out 
            opt_block_id*                                        String           In  
            opt_block_data_length*                               Integer          In  
            opt_block_data                                       String           In  
            """
            return _do('csnbt31o', kw)
    if _plat == 'zos':
        def csnbt31o(**kw):
            """
            csnbt31o - TR-31 Optional Data Build

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            opt_blocks_bfr_length*                               Integer          In  
            opt_blocks_length                                    Integer          Both
            opt_blocks                                           Binary           Both
            num_opt_blocks                                       Integer          Out 
            opt_block_id*                                        String           In  
            opt_block_data_length*                               Integer          In  
            opt_block_data                                       String           In  
            """
            return _do('csnbt31o', kw)

if _plat in _verb['csnbt31r']:
    if _plat == 'linux':
        def csnbt31r(**kw):
            """
            csnbt31r - TR31 Optional Data Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            tr31_key_length*                                     Integer          In  
            tr31_key*                                            Binary           In  
            opt_block_id                                         String           In  
            num_opt_blocks                                       Integer          In  
            opt_block_ids                                        String           Out 
            opt_block_lengths                                    Binary           Out 
            opt_block_data_length                                Integer          Both
            opt_block_data                                       String           Out 
            """
            return _do('csnbt31r', kw)
    if _plat == 'zos':
        def csnbt31r(**kw):
            """
            csnbt31r - TR-31 Optional Data Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            tr31_key_block_length*                               Integer          In  
            tr31_key_block*                                      Binary           In  
            opt_block_id                                         String           In  
            num_opt_blocks                                       Integer          In  
            opt_block_ids                                        String           Out 
            opt_block_lengths                                    Binary           Out 
            opt_block_data_length                                Integer          Both
            opt_block_data                                       String           Out 
            """
            return _do('csnbt31r', kw)

if _plat in _verb['csnddsg']:
    if _plat == 'linux':
        def csnddsg(**kw):
            """
            csnddsg - Digital Signature Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pka_private_key_identifier_length*                   Integer          In  
            pka_private_key_identifier*                          Key label/token  In  
            data_length*                                         Integer          In  
            data*                                                Binary           In  
            signature_field_length*                              Integer          Both
            signature_bit_length                                 Integer          Out 
            signature_field                                      Binary           Out 
            """
            return _do('csnddsg', kw)
    if _plat == 'zos':
        def csnddsg(**kw):
            """
            csnddsg - Digital Signature Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            private_key_identifier_length*                       Integer          In  
            private_key_identifier*                              Key label/token  In  
            data_length*                                         Integer          In  
            data*                                                Binary           In  
            signature_field_length*                              Integer          Both
            signature_bit_length                                 Integer          Out 
            signature_field                                      Binary           Out 
            """
            return _do('csnddsg', kw)

if _plat in _verb['csnddsv']:
    if _plat == 'linux':
        def csnddsv(**kw):
            """
            csnddsv - Digital Signature Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pka_public_key_identifier_length*                    Integer          In  
            pka_public_key_identifier*                           Key label/token  In  
            data_length*                                         Integer          In  
            data*                                                Binary           In  
            signature_field_length*                              Integer          In  
            signature_field*                                     Binary           In  
            """
            return _do('csnddsv', kw)
    if _plat == 'zos':
        def csnddsv(**kw):
            """
            csnddsv - Digital Signature Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            pka_public_key_identifier_length*                    Integer          In  
            pka_public_key_identifier*                           Key label/token  In  
            data_length*                                         Integer          In  
            data*                                                Binary           In  
            signature_field_length*                              Integer          In  
            signature_field*                                     Binary           In  
            """
            return _do('csnddsv', kw)

if _plat in _verb['csndpkg']:
    if _plat == 'linux':
        def csndpkg(**kw):
            """
            csndpkg - PKA Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            regeneration_data_length                             Integer          In  
            regeneration_data                                    Binary           In  
            skeleton_key_identifier_length*                      Integer          In  
            skeleton_key_identifier*                             Key label/token  In  
            transport_key_identifier                             Key label/token  In  
            generated_key_identifier_length                      Integer          Both
            generated_key_identifier                             Binary           Out 
            """
            return _do('csndpkg', kw)
    if _plat == 'zos':
        def csndpkg(**kw):
            """
            csndpkg - PKA Key Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            regeneration_data_length                             Integer          In  
            regeneration_data                                    Binary           In  
            skeleton_key_identifier_length*                      Integer          In  
            skeleton_key_identifier*                             Key label/token  In  
            transport_key_identifier                             Key label/token  In  
            generated_key_token_length                           Integer          Both
            generated_key_token                                  Binary           Out 
            """
            return _do('csndpkg', kw)

if _plat in _verb['csndpki']:
    if _plat == 'linux':
        def csndpki(**kw):
            """
            csndpki - PKA Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            source_key_token_length*                             Integer          In  
            source_key_token*                                    Binary           In  
            transport_key_identifier                             Key label/token  In  
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Key label/token  Both
            """
            return _do('csndpki', kw)
    if _plat == 'zos':
        def csndpki(**kw):
            """
            csndpki - PKA Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Binary           In  
            transport_key_identifier                             Key label/token  In  
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Key label/token  Both
            """
            return _do('csndpki', kw)

if _plat in _verb['csndpkb']:
    if _plat == 'linux':
        def csndpkb(**kw):
            """
            csndpkb - PKA Key Token Build

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_value_structure_length*                          Integer          In  
            key_value_structure*                                 Binary           In  
            private_key_name_length                              Integer          In  
            private_key_name                                     String           In  
            user_definable_associated_data_length                Integer          In  
            user_definable_associated_data                       Binary           In  
            key_derivation_data_length                           Integer          In  
            key_derivation_data                                  Binary           In  
            reserved_3_length                                    Integer          In  
            reserved_3                                           Binary           In  
            reserved_4_length                                    Integer          In  
            reserved_4                                           Binary           In  
            reserved_5_length                                    Integer          In  
            reserved_5                                           Binary           In  
            key_token_length*                                    Integer          Both
            key_token                                            Binary           Out 
            """
            return _do('csndpkb', kw)
    if _plat == 'zos':
        def csndpkb(**kw):
            """
            csndpkb - PKA Key Token Build

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_value_structure_length*                          Integer          In  
            key_value_structure*                                 Binary           In  
            private_key_name_length                              Integer          In  
            private_key_name                                     String           In  
            user_definable_associated_data_length                Integer          In  
            user_definable_associated_data                       Binary           In  
            key_derivation_data_length                           Integer          In  
            key_derivation_data                                  Binary           In  
            reserved_3_length                                    Integer          In  
            reserved_3                                           Binary           In  
            reserved_4_length                                    Integer          In  
            reserved_4                                           Binary           In  
            reserved_5_length                                    Integer          In  
            reserved_5                                           Binary           In  
            key_token_length*                                    Integer          Both
            key_token                                            Binary           Out 
            """
            return _do('csndpkb', kw)

if _plat in _verb['csndktc']:
    if _plat == 'linux':
        def csndktc(**kw):
            """
            csndktc - PKA Key Token Change

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Binary           Both
            """
            return _do('csndktc', kw)
    if _plat == 'zos':
        def csndktc(**kw):
            """
            csndktc - PKA Key Token Change

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Binary           Both
            """
            return _do('csndktc', kw)

if _plat in _verb['csndpkt']:
    if _plat == 'linux':
        def csndpkt(**kw):
            """
            csndpkt - PKA Key Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_length*                                   Integer          In  
            source_key*                                          Key label/token  In  
            source_transport_key_length                          Integer          In  
            source_transport_key                                 Key label/token  Both
            target_transport_key_length                          Integer          In  
            target_transport_key                                 Key label/token  Both
            target_key_token_length                              Integer          Both
            target_key_token                                     Binary           Out 
            """
            return _do('csndpkt', kw)
    if _plat == 'zos':
        def csndpkt(**kw):
            """
            csndpkt - PKA Key Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  In  
            source_transport_key_identifier_length               Integer          In  
            source_transport_key_identifier                      Key label/token  Both
            target_transport_key_identifier_length               Integer          In  
            target_transport_key_identifier                      Key label/token  Both
            target_key_token_length                              Integer          Both
            target_key_token                                     Binary           Out 
            """
            return _do('csndpkt', kw)

if _plat in _verb['csndpkx']:
    if _plat == 'linux':
        def csndpkx(**kw):
            """
            csndpkx - PKA Public Key Extract

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  In  
            target_public_key_identifier_length*                 Integer          Both
            target_public_key_identifier                         Binary           Out 
            """
            return _do('csndpkx', kw)
    if _plat == 'zos':
        def csndpkx(**kw):
            """
            csndpkx - PKA Public Key Extract

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            source_key_identifier_length*                        Integer          In  
            source_key_identifier*                               Key label/token  In  
            target_public_key_token_length*                      Integer          Both
            target_public_key_token                              Binary           Out 
            """
            return _do('csndpkx', kw)

if _plat in _verb['csndpic']:
    if _plat == 'linux':
        def csndpic(**kw):
            """
            csndpic - Public Infrastructure Certificate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            subject_private_key_identifier_length*               Integer          In  
            subject_private_key_identifier*                      Key label/token  In  
            subject_name_length*                                 Integer          In  
            subject_name*                                        String           In  
            extensions_length                                    Integer          In  
            extensions                                           Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4                                            Integer          In  
            reserved5                                            Integer          In  
            reserved6_length                                     Integer          In  
            reserved6                                            Binary           In  
            certificate_length*                                  Integer          Both
            certificate                                          Binary           Out 
            """
            return _do('csndpic', kw)
    if _plat == 'zos':
        def csndpic(**kw):
            """
            csndpic - Public Infrastructure Certificate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            subject_private_key_identifier_length*               Integer          In  
            subject_private_key_identifier*                      Key label/token  In  
            subject_name_length*                                 Integer          In  
            subject_name*                                        String           In  
            extensions_length                                    Integer          In  
            extensions                                           Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            reserved4                                            Integer          In  
            reserved5                                            Integer          In  
            reserved6_length                                     Integer          In  
            reserved6_data                                       Binary           In  
            certificate_length*                                  Integer          Both
            certificate                                          Binary           Out 
            """
            return _do('csndpic', kw)

if _plat in _verb['csndpim']:
    if _plat == 'linux':
        def csndpim(**kw):
            """
            csndpim - Public Infrastructure Manage

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            certificate_length                                  
            certificate                                         
            label_length                                        
            label                                               
            hash_length                                         
            hash                                                
            input_data_length                                   
            input_data                                          
            output_data_length                                  
            output_data                                         
            reserved1_length                                    
            reserved1                                           
            """
            return _do('csndpim', kw)

if _plat in _verb['csnbxea']:
    if _plat == 'linux':
        def csnbxea(**kw):
            """
            csnbxea - Code Conversion

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                         
            reason_code                                         
            exit_data_length                                    
            exit_data                                           
            rule_array_count                                    
            rule_array                                          
            text_length                                         
            source_text                                         
            target_text                                         
            code_table_length                                   
            code_table                                          
            """
            return _do('csnbxea', kw)

if _plat in _verb['csnbdcm']:
    if _plat == 'zos':
        def csnbdcm(**kw):
            """
            csnbdcm - Derive ICC MK

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            issuer_master_key_identifier_length*                 Integer          In  
            issuer_master_key_identifier*                        Key label/token  Both
            icc_master_key_identifier_length*                    Integer          In  
            icc_master_key_identifier                            Binary           Out 
            transport_key_identifier_length                      Integer          In  
            transport_key_identifier                             Key label/token  Both
            pan_length*                                          Integer          In  
            pan*                                                 Binary           In  
            pan_seq_number                                       Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbdcm', kw)

if _plat in _verb['csnbdsk']:
    if _plat == 'zos':
        def csnbdsk(**kw):
            """
            csnbdsk - Derive Session Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            master_key_identifier_length*                        Integer          In  
            master_key_identifier*                               Key label/token  Both
            session_key_identifier_length*                       Integer          Both
            session_key_identifier                               Binary           Out 
            pan_length*                                          Integer          In  
            pan*                                                 Binary           In  
            pan_seq_number                                       Binary           In  
            atc                                                  Binary           In  
            unpredictable_number_length                          Integer          In  
            unpredictable_number                                 Binary           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbdsk', kw)

if _plat in _verb['csnbgim']:
    if _plat == 'zos':
        def csnbgim(**kw):
            """
            csnbgim - Generate Issuer MK

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            issuer_master_key_identifier_length*                 Integer          In  
            issuer_master_key_identifier*                        Key label/token  Both
            issuer_arpc_master_key_identifier_length             Integer          In  
            issuer_arpc_master_key_identifier                    Key label/token  Both
            transport_key_identifier_length                      Integer          In  
            transport_key_identifier                             Key label/token  Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbgim', kw)

if _plat in _verb['csnbket']:
    if _plat == 'zos':
        def csnbket(**kw):
            """
            csnbket - Key Encryption Translate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            kek_key_identifier_length*                           Integer          In  
            kek_key_identifier*                                  Key label/token  Both
            key_in_length*                                       Integer          In  
            key_in*                                              Binary           In  
            key_out_length*                                      Integer          Both
            key_out                                              Binary           Out 
            """
            return _do('csnbket', kw)

if _plat in _verb['csnbskm']:
    if _plat == 'zos':
        def csnbskm(**kw):
            """
            csnbskm - Multiple Secure Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            clear_key_length*                                    Integer          In  
            clear_key*                                           Binary           In  
            key_type*                                            String           In  
            key_form*                                            String           In  
            key_encrypting_key_identifier                        Key label/token  Both
            imported_key_identifier_length*                      Integer          Both
            imported_key_identifier                              Binary           Both
            """
            return _do('csnbskm', kw)

if _plat in _verb['csnbski']:
    if _plat == 'zos':
        def csnbski(**kw):
            """
            csnbski - Secure Key Import

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            clear_key*                                           Binary           In  
            key_type*                                            String           In  
            key_form*                                            String           In  
            importer_key_identifier                              Key label/token  Both
            key_identifier                                       Binary           Both
            """
            return _do('csnbski', kw)

if _plat in _verb['csnbski2']:
    if _plat == 'zos':
        def csnbski2(**kw):
            """
            csnbski2 - Secure Key Import2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_key_bit_length*                                Integer          In  
            clear_key*                                           Binary           In  
            key_name_length                                      Integer          In  
            key_name                                             String           In  
            user_associated_data_length                          Integer          In  
            user_associated_data                                 Binary           In  
            key_encrypting_key_identifier_length                 Integer          In  
            key_encrypting_key_identifier                        Key label/token  Both
            target_key_identifier_length*                        Integer          Both
            target_key_identifier                                Binary           Both
            """
            return _do('csnbski2', kw)

if _plat in _verb['csnbdco']:
    if _plat == 'zos':
        def csnbdco(**kw):
            """
            csnbdco - Decode

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            clear_key*                                           Binary           In  
            cipher_text*                                         Binary           In  
            clear_text                                           Binary           Out 
            """
            return _do('csnbdco', kw)

if _plat in _verb['csnbeco']:
    if _plat == 'zos':
        def csnbeco(**kw):
            """
            csnbeco - Encode

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            clear_key*                                           Binary           In  
            clear_text*                                          Binary           In  
            cipher_text                                          Binary           Out 
            """
            return _do('csnbeco', kw)

if _plat in _verb['csnbsyd']:
    if _plat == 'zos':
        def csnbsyd(**kw):
            """
            csnbsyd - Symmetric Key Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_parms_length                                     Integer          In  
            key_parms                                            Binary           In  
            block_size*                                          Integer          In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            cipher_text_length                                   Integer          In  
            cipher_text                                          Binary           In  
            clear_text_length*                                   Integer          Both
            clear_text                                           Binary           Both
            optional_data_length                                 Integer          In  
            optional_data                                        Binary           In  
            """
            return _do('csnbsyd', kw)

if _plat in _verb['csnbsye']:
    if _plat == 'zos':
        def csnbsye(**kw):
            """
            csnbsye - Symmetric Key Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_parms_length                                     Integer          In  
            key_parms                                            Key label/token  Both
            block_size*                                          Integer          In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            clear_text_length                                    Integer          In  
            clear_text                                           Binary           In  
            cipher_text_length*                                  Integer          Both
            cipher_text                                          Binary           Out 
            optional_data_length                                 Integer          In  
            optional_data                                        Binary           In  
            """
            return _do('csnbsye', kw)

if _plat in _verb['csnbsmg']:
    if _plat == 'zos':
        def csnbsmg(**kw):
            """
            csnbsmg - Symmetric MAC Generate

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            chaining_vector_length*                              Integer          Both
            chaining_vector                                      Binary           Both
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           Both
            mac_length*                                          Integer          Both
            mac                                                  Binary           Out 
            """
            return _do('csnbsmg', kw)

if _plat in _verb['csnbsmv']:
    if _plat == 'zos':
        def csnbsmv(**kw):
            """
            csnbsmv - Symmetric MAC Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            chaining_vector_length*                              Integer          Both
            chaining_vector                                      Binary           Both
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           Both
            mac_length*                                          Integer          In  
            mac                                                  Binary           In  
            """
            return _do('csnbsmv', kw)

if _plat in _verb['csnbesc']:
    if _plat == 'zos':
        def csnbesc(**kw):
            """
            csnbesc - EMV Scripting Service

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            issuer_integrity_master_key_identifier_length        Integer          In  
            issuer_integrity_master_key_identifier               Key label/token  Both
            issuer_confidentiality_master_key_identifier_length  Integer          In  
            issuer_confidentiality_master_key_identifier         Key label/token  Both
            new_pin_encrypting_key_identifier_length             Integer          In  
            new_pin_encrypting_key_identifier                    Key label/token  Both
            current_pin_encrypting_key_identifier_length         Integer          In  
            current_pin_encrypting_key_identifier                Key label/token  Both
            new_pin_block                                        Binary           In  
            current_pin_block                                    Binary           In  
            pan_length*                                          Integer          In  
            pan*                                                 Binary           In  
            pan_seq_number                                       Binary           In  
            atc*                                                 Binary           In  
            unpredictable_number                                 Binary           In  
            input_message_length*                                Integer          In  
            input_message*                                       Binary           In  
            pin_offset                                           Integer          In  
            pin_format                                           String           In  
            output_message_length                                Integer          Both
            output_message                                       Binary           Out 
            mac_length                                           Integer          Both
            mac                                                  Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbesc', kw)

if _plat in _verb['csnbeac']:
    if _plat == 'zos':
        def csnbeac(**kw):
            """
            csnbeac - EMV Transaction

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            issuer_master_key_identifier_length*                 Integer          In  
            issuer_master_key_identifier*                        Key label/token  Both
            issuer_arpc_master_key_identifier_length             Integer          In  
            issuer_arpc_master_key_identifier                    Key label/token  Both
            pan_length*                                          Integer          In  
            pan*                                                 Binary           In  
            pan_seq_number                                       Binary           In  
            cryptogram_info_length*                              Integer          In  
            cryptogram_info*                                     Binary           In  
            atc*                                                 Binary           In  
            arc_or_csu                                           Binary           In  
            arqc*                                                Binary           In  
            arpc                                                 Binary           Out 
            unpredictable_number                                 Binary           In  
            optional_data1_length                                Integer          In  
            optional_data1                                       Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbeac', kw)

if _plat in _verb['csnbevf']:
    if _plat == 'zos':
        def csnbevf(**kw):
            """
            csnbevf - EMV Verification Functions

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            pan_length*                                          Integer          In  
            pan*                                                 Binary           In  
            pan_seq_number*                                      Binary           In  
            atc*                                                 Binary           In  
            unpredictable_number                                 Binary           In  
            data_length                                          Integer          Both
            data                                                 Binary           Both
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csnbevf', kw)

if _plat in _verb['csnbfld']:
    if _plat == 'zos':
        def csnbfld(**kw):
            """
            csnbfld - Field Level Decipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_derive_data_length                               Integer          In  
            key_derive_data                                      Binary           Both
            context_data_length*                                 Integer          Both
            context_data                                         Binary           Both
            charset_parms_length                                 Integer          In  
            charset_parms                                        Binary           Both
            reserved_length                                      Integer          In  
            reserved                                             Binary           In  
            source_text_id                                       Integer          In  
            source_text_length                                   Integer          In  
            source_text                                          Binary           In  
            target_text_id                                       Integer          In  
            target_text_length                                   Integer          Both
            target_text                                          Binary           Out 
            """
            return _do('csnbfld', kw)

if _plat in _verb['csnbfle']:
    if _plat == 'zos':
        def csnbfle(**kw):
            """
            csnbfle - Field Level Encipher

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            key_identifier_length*                               Integer          In  
            key_identifier*                                      Key label/token  Both
            key_derive_data_length                               Integer          In  
            key_derive_data                                      Binary           Both
            context_data_length*                                 Integer          Both
            context_data                                         Binary           Both
            charset_parms_length                                 Integer          In  
            charset_parms                                        Binary           Both
            reserved_length                                      Integer          In  
            reserved                                             Binary           In  
            source_text_id                                       Integer          In  
            source_text_length                                   Integer          In  
            source_text                                          Binary           In  
            target_text_id                                       Integer          In  
            target_text_length                                   Integer          Both
            target_text                                          Binary           Out 
            """
            return _do('csnbfle', kw)

if _plat in _verb['csndsbc']:
    if _plat == 'zos':
        def csndsbc(**kw):
            """
            csndsbc - SET Block Compose

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            block_contents_identifier                            Binary           In  
            xdata_string_length                                  Integer          In  
            xdata_string                                         String           In  
            data_to_encrypt_length*                              Integer          Both
            data_to_encrypt*                                     Binary           In  
            data_to_hash_length                                  Integer          In  
            data_to_hash                                         Binary           In  
            initialization_vector                                Binary           In  
            rsa_public_key_identifier_length                     Integer          In  
            rsa_public_key_identifier                            Key label/token  In  
            des_key_block_length*                                Integer          Both
            des_key_block                                        Binary           Both
            rsa_oaep_block_length                                Integer          Both
            rsa_oaep_block                                       Binary           Out 
            chaining_vector                                      Binary           Both
            des_encrypted_data_block                             Binary           Out 
            """
            return _do('csndsbc', kw)

if _plat in _verb['csndsbd']:
    if _plat == 'zos':
        def csndsbd(**kw):
            """
            csndsbd - SET Block Decompose

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            rsa_oaep_block_length                                Integer          In  
            rsa_oaep_block                                       Binary           In  
            des_encrypted_data_block_length*                     Integer          Both
            des_encrypted_data_block                             Binary           In  
            initialization_vector                                Binary           In  
            rsa_private_key_identifier_length                    Integer          In  
            rsa_private_key_identifier                           Key label/token  In  
            des_key_block_length*                                Integer          Both
            des_key_block                                        Binary           Both
            block_contents_identifier                            Binary           Out 
            xdata_string_length                                  Integer          Both
            xdata_string                                         String           Out 
            chaining_vector                                      Binary           Both
            data_block                                           Binary           Out 
            hash_block_length                                    Integer          Both
            hash_block                                           Binary           Out 
            """
            return _do('csndsbd', kw)

if _plat in _verb['csnbkrc2']:
    if _plat == 'zos':
        def csnbkrc2(**kw):
            """
            csnbkrc2 - CKDS Key Record Create2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            key_token_length*                                    Integer          In  
            key_token                                            Binary           Both
            """
            return _do('csnbkrc2', kw)

if _plat in _verb['csnbkrr2']:
    if _plat == 'zos':
        def csnbkrr2(**kw):
            """
            csnbkrr2 - CKDS Key Record Read2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_label*                                           String           In  
            key_token_length*                                    Integer          Both
            key_token                                            Binary           Out 
            """
            return _do('csnbkrr2', kw)

if _plat in _verb['csnbkrw2']:
    if _plat == 'zos':
        def csnbkrw2(**kw):
            """
            csnbkrw2 - CKDS Key Record Write2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_token_length*                                    Integer          In  
            key_token*                                           Binary           In  
            key_label*                                           String           In  
            """
            return _do('csnbkrw2', kw)

if _plat in _verb['csfcrc']:
    if _plat == 'zos':
        def csfcrc(**kw):
            """
            csfcrc - Coordinated KDS Administration

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            function*                                            Integer          In  
            new_data_set_name*                                   String           In  
            data_set_type*                                       Integer          In  
            backup_data_set_name                                 String           In  
            archive_data_set_name                                String           In  
            feedback_length*                                     Integer          Both
            feedback                                             Binary           Out 
            """
            return _do('csfcrc', kw)

if _plat in _verb['csfmps']:
    if _plat == 'zos':
        def csfmps(**kw):
            """
            csfmps - ICSF Multi-Purpose Service

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            data_set_name                                        String           In  
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            reserved3_length                                     Integer          In  
            reserved3                                            Binary           In  
            """
            return _do('csfmps', kw)

if _plat in _verb['csfkdsl']:
    if _plat == 'zos':
        def csfkdsl(**kw):
            """
            csfkdsl - Key Data Set List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            label_filter_length                                  Integer          In  
            label_filter                                         String           In  
            search_criteria_length                               Integer          In  
            search_criteria                                      Binary           In  
            label_count                                          Integer          Out 
            output_list_length                                   Integer          Both
            output_list                                          String           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            continuation_area                                    Binary           Both
            """
            return _do('csfkdsl', kw)

if _plat in _verb['csfkdmr']:
    if _plat == 'zos':
        def csfkdmr(**kw):
            """
            csfkdmr - Key Data Set Metadata Read

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            record_label*                                        String           In  
            metadata_list_length*                                Integer          In  
            metadata_list                                        Binary           In  
            output_list_length                                   Integer          Both
            output_list                                          Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csfkdmr', kw)

if _plat in _verb['csfkdmw']:
    if _plat == 'zos':
        def csfkdmw(**kw):
            """
            csfkdmw - Key Data Set Metadata Write

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            label_count*                                         Integer          In  
            label_list*                                          String           In  
            metadata_list_length*                                Integer          In  
            metadata_list                                        Binary           In  
            results_list                                         Binary           Out 
            reserved1_length                                     Integer          In  
            reserved1                                            Binary           In  
            reserved2_length                                     Integer          In  
            reserved2                                            Binary           In  
            """
            return _do('csfkdmw', kw)

if _plat in _verb['csfrrt']:
    if _plat == 'zos':
        def csfrrt(**kw):
            """
            csfrrt - Key Data Set Record Retrieve

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            kds_type*                                            Integer          In  
            record_label*                                        String           In  
            record_length*                                       Integer          Both
            record_buffer                                        Binary           Out 
            """
            return _do('csfrrt', kw)

if _plat in _verb['csfkdu']:
    if _plat == 'zos':
        def csfkdu(**kw):
            """
            csfkdu - Key Data Set Update

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            kds_name*                                            String           In  
            orig_sys_id*                                         String           In  
            record_before_len*                                   Integer          In  
            record_before                                        Binary           In  
            record_after_len*                                    Integer          In  
            record_after                                         Binary           In  
            func_req*                                            Integer          In  
            opt_flags*                                           Integer          In  
            exit_code                                            Integer          Out 
            orig_return_code                                     Integer          Out 
            """
            return _do('csfkdu', kw)

if _plat in _verb['csndkrr2']:
    if _plat == 'zos':
        def csndkrr2(**kw):
            """
            csndkrr2 - PKDS Key Record Read2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            label*                                               String           In  
            token_length*                                        Integer          Both
            token                                                Binary           Out 
            """
            return _do('csndkrr2', kw)

if _plat in _verb['csfstat']:
    if _plat == 'zos':
        def csfstat(**kw):
            """
            csfstat - Cryptographic Usage Statistic

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            stat_data                                            Binary           Out 
            reserved_length                                      Integer          In  
            reserved                                             Binary           In  
            """
            return _do('csfstat', kw)

if _plat in _verb['csfiqa']:
    if _plat == 'zos':
        def csfiqa(**kw):
            """
            csfiqa - ICSF Query Algorithm

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            returned_data_length*                                Integer          Both
            returned_data                                        String           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csfiqa', kw)

if _plat in _verb['csfiqf']:
    if _plat == 'zos':
        def csfiqf(**kw):
            """
            csfiqf - ICSF Query Facility

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            returned_data_length*                                Integer          Both
            returned_data                                        Binary           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csfiqf', kw)

if _plat in _verb['csfiqf2']:
    if _plat == 'zos':
        def csfiqf2(**kw):
            """
            csfiqf2 - ICSF Query Facility2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            returned_data_length*                                Integer          Both
            returned_data                                        Binary           Out 
            reserved_data_length                                 Integer          In  
            reserved_data                                        Binary           In  
            """
            return _do('csfiqf2', kw)

if _plat in _verb['csfpci']:
    if _plat == 'zos':
        def csfpci(**kw):
            """
            csfpci - PCI Interface

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            target_pci_coprocessor                               Integer          In  
            target_pci_coprocessor_serial_number                 String           Both
            request_block_length                                 Integer          In  
            request_block                                        Binary           In  
            request_data_block_length                            Integer          In  
            request_data_block                                   Binary           In  
            reply_block_length                                   Integer          Both
            reply_block                                          Binary           Out 
            reply_data_block_length                              Integer          Both
            reply_data_block                                     Binary           Out 
            masks_length*                                        Integer          In  
            masks_data                                           Binary           In  
            """
            return _do('csfpci', kw)

if _plat in _verb['csfpdmk']:
    if _plat == 'zos':
        def csfpdmk(**kw):
            """
            csfpdmk - PKCS #11 Derive Multiple Keys

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            attribute_list_length*                               Integer          In  
            attribute_list*                                      Binary           In  
            base_key_handle*                                     String           In  
            parms_list_length*                                   Integer          In  
            parms_list*                                          Binary           In  
            """
            return _do('csfpdmk', kw)

if _plat in _verb['csfpdvk']:
    if _plat == 'zos':
        def csfpdvk(**kw):
            """
            csfpdvk - PKCS #11 Derive Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            attribute_list_length*                               Integer          In  
            attribute_list*                                      Binary           In  
            base_key_handle*                                     String           In  
            parms_list_length*                                   Integer          In  
            parms_list*                                          Binary           In  
            target_key_handle                                    String           Out 
            """
            return _do('csfpdvk', kw)

if _plat in _verb['csfpgav']:
    if _plat == 'zos':
        def csfpgav(**kw):
            """
            csfpgav - PKCS #11 Get Attribute Value

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            handle*                                              String           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            attribute_list_length*                               Integer          Both
            attribute_list                                       Binary           Out 
            """
            return _do('csfpgav', kw)

if _plat in _verb['csfpgkp']:
    if _plat == 'zos':
        def csfpgkp(**kw):
            """
            csfpgkp - PKCS #11 Generate Key Pair

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            token_handle*                                        String           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            public_key_attribute_list_length*                    Integer          In  
            public_key_attribute_list*                           Binary           In  
            public_key_object_handle                             String           Out 
            private_key_attribute_list_length*                   Integer          In  
            private_key_attribute_list*                          Binary           In  
            private_key_object_handle                            String           Out 
            """
            return _do('csfpgkp', kw)

if _plat in _verb['csfpgsk']:
    if _plat == 'zos':
        def csfpgsk(**kw):
            """
            csfpgsk - PKCS #11 Generate Secret Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            handle*                                              String           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            attribute_list_length*                               Integer          In  
            attribute_list*                                      Binary           In  
            parms_list_length                                    Integer          In  
            parms_list                                           Binary           Both
            """
            return _do('csfpgsk', kw)

if _plat in _verb['csfphmg']:
    if _plat == 'zos':
        def csfphmg(**kw):
            """
            csfphmg - PKCS #11 Generate Keyed MAC

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            text_id                                              Integer          In  
            chain_data_length*                                   Integer          Both
            chain_data                                           Binary           Both
            key_handle*                                          String           In  
            hmac_length*                                         Integer          In  
            hmac                                                 Binary           Out 
            """
            return _do('csfphmg', kw)

if _plat in _verb['csfphmv']:
    if _plat == 'zos':
        def csfphmv(**kw):
            """
            csfphmv - PKCS #11 Verify Keyed MAC

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            text_id                                              Integer          In  
            chain_data_length*                                   Integer          Both
            chain_data                                           Binary           Both
            key_handle*                                          String           In  
            hmac_length*                                         Integer          In  
            hmac                                                 Binary           Out 
            """
            return _do('csfphmv', kw)

if _plat in _verb['csfpowh']:
    if _plat == 'zos':
        def csfpowh(**kw):
            """
            csfpowh - PKCS #11 One-Way Hash, Sign, or Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            text_length                                          Integer          In  
            text                                                 Binary           In  
            text_id                                              Integer          In  
            chain_data_length*                                   Integer          Both
            chain_data                                           Binary           Both
            handle*                                              String           In  
            hash_length*                                         Integer          Both
            hash                                                 Binary           Both
            """
            return _do('csfpowh', kw)

if _plat in _verb['csfppks']:
    if _plat == 'zos':
        def csfppks(**kw):
            """
            csfppks - PKCS #11 Private Key Sign

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            cipher_value_length*                                 Integer          In  
            cipher_value                                         Binary           In  
            key_handle*                                          String           In  
            clear_value_length*                                  Integer          Both
            clear_value                                          Binary           Out 
            """
            return _do('csfppks', kw)

if _plat in _verb['csfppkv']:
    if _plat == 'zos':
        def csfppkv(**kw):
            """
            csfppkv - PKCS #11 Public Key Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_value_length*                                  Integer          In  
            clear_value                                          Binary           In  
            key_handle*                                          String           In  
            cipher_value_length*                                 Integer          Both
            cipher_value                                         Binary           Both
            """
            return _do('csfppkv', kw)

if _plat in _verb['csfpprf']:
    if _plat == 'zos':
        def csfpprf(**kw):
            """
            csfpprf - PKCS #11 Pseudo-Random Function

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            handle                                               String           In  
            parms_list_length                                    Integer          In  
            parms_list                                           Binary           In  
            prf_output_length*                                   Integer          In  
            prf_output                                           Binary           Out 
            """
            return _do('csfpprf', kw)

if _plat in _verb['csfpsav']:
    if _plat == 'zos':
        def csfpsav(**kw):
            """
            csfpsav - PKCS #11 Set Attribute Value

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            handle*                                              String           In  
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            attribute_list_length*                               Integer          In  
            attribute_list*                                      Binary           In  
            """
            return _do('csfpsav', kw)

if _plat in _verb['csfpskd']:
    if _plat == 'zos':
        def csfpskd(**kw):
            """
            csfpskd - PKCS #11 Secret Key Decrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_handle*                                          String           In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            cipher_text_length*                                  Integer          In  
            cipher_text*                                         Binary           In  
            cipher_text_id                                       Integer          In  
            clear_text_length*                                   Integer          Both
            clear_text                                           Binary           Out 
            clear_text_id                                        Integer          In  
            """
            return _do('csfpskd', kw)

if _plat in _verb['csfpske']:
    if _plat == 'zos':
        def csfpske(**kw):
            """
            csfpske - PKCS #11 Secret Key Encrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count                                     Integer          In  
            rule_array                                           String           In  
            key_handle*                                          String           In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            clear_text_length*                                   Integer          In  
            clear_text*                                          Binary           In  
            clear_text_id                                        Integer          In  
            cipher_text_length*                                  Integer          Both
            cipher_text                                          Binary           Out 
            cipher_text_id                                       Integer          In  
            """
            return _do('csfpske', kw)

if _plat in _verb['csfpskr']:
    if _plat == 'zos':
        def csfpskr(**kw):
            """
            csfpskr - PKCS #11 Secret Key Reencrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            decrypt_handle*                                      String           In  
            encrypt_handle*                                      String           In  
            decrypt_initialization_vector_length                 Integer          In  
            decrypt_initialization_vector                        Binary           In  
            encrypt_initialization_vector_length                 Integer          In  
            encrypt_initialization_vector                        Binary           In  
            chain_data_length                                    Integer          Both
            chain_data                                           Binary           Both
            decrypt_text_length*                                 Integer          In  
            decrypt_text*                                        Binary           In  
            decrypt_text_id                                      Integer          In  
            encrypt_text_length*                                 Integer          Both
            encrypt_text                                         Binary           Out 
            encrypt_text_id                                      Integer          In  
            """
            return _do('csfpskr', kw)

if _plat in _verb['csfptrc']:
    if _plat == 'zos':
        def csfptrc(**kw):
            """
            csfptrc - PKCS #11 Token Record Create

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            handle*                                              String           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            attribute_list_length*                               Integer          In  
            attribute_list*                                      Binary           In  
            """
            return _do('csfptrc', kw)

if _plat in _verb['csfptrd']:
    if _plat == 'zos':
        def csfptrd(**kw):
            """
            csfptrd - PKCS #11 Token Record Delete

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            handle*                                              String           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            """
            return _do('csfptrd', kw)

if _plat in _verb['csfptrl']:
    if _plat == 'zos':
        def csfptrl(**kw):
            """
            csfptrl - PKCS #11 Token Record List

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            handle                                               String           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            search_template_length                               Integer          In  
            search_template                                      Binary           In  
            list_length*                                         Integer          Both
            handle_count*                                        Integer          Both
            output_list                                          String           Out 
            """
            return _do('csfptrl', kw)

if _plat in _verb['csfpuwk']:
    if _plat == 'zos':
        def csfpuwk(**kw):
            """
            csfpuwk - PKCS #11 Unwrap Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            wrapped_key_length*                                  Integer          In  
            wrapped_key*                                         Binary           In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            unwrapping_key_handle*                               String           In  
            attribute_list_length*                               Integer          In  
            attribute_list*                                      Binary           In  
            target_key_handle                                    String           Out 
            """
            return _do('csfpuwk', kw)

if _plat in _verb['csfpwpk']:
    if _plat == 'zos':
        def csfpwpk(**kw):
            """
            csfpwpk - PKCS #11 Wrap Key

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            source_key_handle*                                   String           In  
            wrapping_key_handle*                                 String           In  
            initialization_vector_length                         Integer          In  
            initialization_vector                                Binary           In  
            wrapped_key_length*                                  Integer          Both
            wrapped_key                                          Binary           Out 
            """
            return _do('csfpwpk', kw)

if _plat in _verb['csfpgk2']:
    if _plat == 'zos':
        def csfpgk2(**kw):
            """
            csfpgk2 - PKCS #11 Generate Secret Key2

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            reserved                                             Binary           In  
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_key_length*                                    Integer          In  
            clear_key                                            Binary           Out 
            parms_list_length*                                   Integer          In  
            parms_list*                                          Binary           Both
            """
            return _do('csfpgk2', kw)

if _plat in _verb['csfppd2']:
    if _plat == 'zos':
        def csfppd2(**kw):
            """
            csfppd2 - PKCS #11 Private Key Structure Decrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            cipher_value_length*                                 Integer          In  
            cipher_value                                         Binary           In  
            reserved                                             Binary           In  
            clear_value_length*                                  Integer          Both
            clear_value                                          Binary           Out 
            private_key_info_length*                             Integer          In  
            private_key_info*                                    Binary           In  
            """
            return _do('csfppd2', kw)

if _plat in _verb['csfpps2']:
    if _plat == 'zos':
        def csfpps2(**kw):
            """
            csfpps2 - PKCS #11 Private Key Structure Sign

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            hash_length*                                         Integer          In  
            hash                                                 Binary           In  
            reserved                                             Binary           In  
            signature_length*                                    Integer          Both
            signature                                            Binary           Out 
            private_key_info_length*                             Integer          In  
            private_key_info*                                    Binary           In  
            """
            return _do('csfpps2', kw)

if _plat in _verb['csfppe2']:
    if _plat == 'zos':
        def csfppe2(**kw):
            """
            csfppe2 - PKCS #11 Public Key Structure Encrypt

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            clear_value_length*                                  Integer          In  
            clear_value                                          Binary           In  
            reserved                                             Binary           In  
            cipher_value_length*                                 Integer          Both
            cipher_value                                         Binary           Out 
            subject_public_key_info_length*                      Integer          In  
            subject_public_key_info*                             Binary           In  
            """
            return _do('csfppe2', kw)

if _plat in _verb['csfppv2']:
    if _plat == 'zos':
        def csfppv2(**kw):
            """
            csfppv2 - PKCS #11 Public Key Structure Verify

            Parameter  (* denotes mandatory input parameter)     Type             Dirn
            ---------------------------------------------------- ---------------- ----
            return_code                                          Integer          Out 
            reason_code                                          Integer          Out 
            exit_data_length                                     Integer          Both
            exit_data                                            Binary           Both
            rule_array_count*                                    Integer          In  
            rule_array*                                          String           In  
            signature_length*                                    Integer          In  
            signature                                            Binary           In  
            reserved                                             Binary           In  
            hash_length*                                         Integer          In  
            hash                                                 Binary           In  
            subject_public_key_info_length*                      Integer          In  
            subject_public_key_info*                             Binary           In  
            """
            return _do('csfppv2', kw)

_cat = {
    'linux': {
        'CCA nodes and resource control': {
            'csuaacm': 'Access Control Maintenance',
            'csuaact': 'Access Control Tracking',
            'csuacfq': 'Cryptographic Facility Query',
            'csuacfv': 'Cryptographic Facility Version',
            'csuacra': 'Cryptographic Resource Allocate',
            'csuacrd': 'Cryptographic Resource Deallocate',
            'csnbksi': 'Key Storage Initialization',
            'csualgq': 'Log Query',
            'csnbmkp': 'Master Key Process',
            'csuarnt': 'Random Number Tests'
        },
        'AES, DES, and HMAC cryptographic keys': {
            'csnbcki': 'Clear Key Import',
            'csnbcvg': 'Control Vector Generate',
            'csnbcvt': 'Control Vector Translate',
            'csnbcve': 'Cryptographic Variable Encipher',
            'csnbdkx': 'Data Key Export',
            'csnbdkm': 'Data Key Import',
            'csnbdkg': 'Diversified Key Generate',
            'csnbdkg2': 'Diversified Key Generate2',
            'csnbddk': 'Diversify Directed Key',
            'csndedh': 'EC Diffie-Hellman',
            'csnbkex': 'Key Export',
            'csnbkgn': 'Key Generate',
            'csnbkgn2': 'Key Generate2',
            'csnbkim': 'Key Import',
            'csnbkpi': 'Key Part Import',
            'csnbkpi2': 'Key Part Import2',
            'csnbkyt': 'Key Test',
            'csnbkyt2': 'Key Test2',
            'csnbkytx': 'Key Test Extended',
            'csnbktb': 'Key Token Build',
            'csnbktb2': 'Key Token Build2',
            'csnbktc': 'Key Token Change',
            'csnbktc2': 'Key Token Change2',
            'csnbktp': 'Key Token Parse',
            'csnbktp2': 'Key Token Parse2',
            'csnbktr': 'Key Translate',
            'csnbktr2': 'Key Translate2',
            'csnbckm': 'Multiple Clear Key Import',
            'csnbmms': 'Multi-MAC Scheme',
            'csndpkd': 'PKA Decrypt',
            'csndpke': 'PKA Encrypt',
            'csnbpex': 'Prohibit Export',
            'csnbpexx': 'Prohibit Export Extended',
            'csnbrka': 'Restrict Key Attribute',
            'csnbrng': 'Random Number Generate',
            'csnbrngl': 'Random Number Generate Long',
            'csndrkx': 'Remote Key Export',
            'csndsyx': 'Symmetric Key Export',
            'csndsxd': 'Symmetric Key Export with Data',
            'csndsyg': 'Symmetric Key Generate',
            'csndsyi': 'Symmetric Key Import',
            'csndsyi2': 'Symmetric Key Import2',
            'csndtbc': 'Trusted Block Create',
            'csnbukd': 'Unique Key Derive'
        },
        'Protecting data': {
            'csnbdec': 'Decipher',
            'csnbenc': 'Encipher',
            'csnbsad': 'Symmetric Algorithm Decipher',
            'csnbsae': 'Symmetric Algorithm Encipher',
            'csnbctt2': 'Cipher Text Translate2'
        },
        'Data integrity and message authentication': {
            'csnbhmg': 'HMAC Generate',
            'csnbhmv': 'HMAC Verify',
            'csnbmgn': 'MAC Generate',
            'csnbmgn2': 'MAC Generate2',
            'csnbmvr': 'MAC Verify',
            'csnbmvr2': 'MAC Verify2',
            'csnbmdg': 'MDC Generate',
            'csnbowh': 'One-Way Hash'
        },
        'Key storage mechanisms': {
            'csnbakrc': 'AES Key Record Create',
            'csnbakrd': 'AES Key Record Delete',
            'csnbakrl': 'AES Key Record List',
            'csnbakrr': 'AES Key Record Read',
            'csnbakrw': 'AES Key Record Write',
            'csnbkrc': 'DES Key Record Create',
            'csnbkrd': 'DES Key Record Delete',
            'csnbkrl': 'DES Key Record List',
            'csnbkrr': 'DES Key Record Read',
            'csnbkrw': 'DES Key Record Write',
            'csndkrc': 'PKA Key Record Create',
            'csndkrd': 'PKA Key Record Delete',
            'csndkrl': 'PKA Key Record List',
            'csndkrr': 'PKA Key Record Read',
            'csndkrw': 'PKA Key Record Write',
            'csnbckrc': 'Combined Key Record Create',
            'csnbckrd': 'Combined Key Record Delete',
            'csnbckrl': 'Combined Key Record List',
            'csnbckrr': 'Combined Key Record Read',
            'csnbckrw': 'Combined Key Record Write',
            'csndrkd': 'Retained Key Delete',
            'csndrkl': 'Retained Key List'
        },
        'Financial services': {
            'csnbapg': 'Authentication Parameter Generate',
            'csnbcpe': 'Clear PIN Encrypt',
            'csnbpgn': 'Clear PIN Generate',
            'csnbcpa': 'Clear PIN Generate Alternate',
            'csnbcsg': 'CVV Generate',
            'csnbckc': 'CVV Key Combine',
            'csnbcsv': 'CVV Verify',
            'csnbepg': 'Encrypted PIN Generate',
            'csnbptr': 'Encrypted PIN Translate',
            'csnbptr2': 'Encrypted PIN Translate2',
            'csnbptre': 'Encrypted PIN Translate Enhanced',
            'csnbpvr': 'Encrypted PIN Verify',
            'csnbpvr2': 'Encrypted PIN Verify2',
            'csnbfped': 'FPE Decipher',
            'csnbfpee': 'FPE Encipher',
            'csnbfpet': 'FPE Translate',
            'csnbffxd': 'Format Preserving Algorithms Decipher',
            'csnbffxe': 'Format Preserving Algorithms Encipher',
            'csnbffxt': 'Format Preserving Algorithms Translate',
            'csnbpcu': 'PIN Change/Unblock',
            'csnbpfo': 'Recover PIN from Offset',
            'csnbsky': 'Secure Messaging for Keys',
            'csnbspn': 'Secure Messaging for PINs',
            'csnbtrv': 'Transaction Validation'
        },
        'Financial services for DK PIN methods': {
            'csnbddpg': 'DK Deterministic Generate',
            'csnbdmp': 'DK Migrate PIN',
            'csnbdpmt': 'DK PAN Modify in Transaction',
            'csnbdpt': 'DK PAN Translate',
            'csnbdpc': 'DK PIN Change',
            'csnbdpv': 'DK PIN Verify',
            'csnbdpnu': 'DK PRW Card Number Update',
            'csnbdcu2': 'DK PRW Card Number Update2',
            'csnbdpcg': 'DK PRW CMAC Generate',
            'csnbdrpg': 'DK Random PIN Generate',
            'csnbdrg2': 'DK Random PIN Generate2',
            'csnbdrp': 'DK Regenerate PRW'
        },
        'TR-34 symmetric key management': {
            'csndt34b': 'TR-34 Bind-Begin (CSNDT34B)',
            'csndt34c': 'TR-34 Bind-Complete',
            'csndt34d': 'TR-34 Key Distribution',
            'csndt34r': 'TR-34 Key Receive'
        },
        'TR-31 symmetric key management': {
            'csnbt31c': 'TR31 Key Create',
            'csnbt31x': 'TR31 Translate',
            'csnbt31i': 'TR31 Key Import',
            'csnbt31p': 'TR31 Key Token Parse',
            'csnbt31o': 'TR31 Optional Data Build',
            'csnbt31r': 'TR31 Optional Data Read'
        },
        'Using digital signatures': {
            'csnddsg': 'Digital Signature Generate',
            'csnddsv': 'Digital Signature Verify'
        },
        'Managing PKA cryptographic keys': {
            'csndpkg': 'PKA Key Generate',
            'csndpki': 'PKA Key Import',
            'csndpkb': 'PKA Key Token Build',
            'csndktc': 'PKA Key Token Change',
            'csndpkt': 'PKA Key Translate',
            'csndpkx': 'PKA Public Key Extract',
            'csndpic': 'Public Infrastructure Certificate',
            'csndpim': 'Public Infrastructure Manage'
        },
        'Utility verbs': {
            'csnbxea': 'Code Conversion'
        }
    },
    'zos': {
        'Managing symmetric cryptographic keys': {
            'csnbcki': 'Clear Key Import',
            'csnbcvg': 'Control Vector Generate',
            'csnbcvt': 'Control Vector Translate',
            'csnbcve': 'Cryptographic Variable Encipher',
            'csnbdkx': 'Data Key Export',
            'csnbdkm': 'Data Key Import',
            'csnbdcm': 'Derive ICC MK',
            'csnbdsk': 'Derive Session Key',
            'csnbdkg': 'Diversified Key Generate',
            'csnbdkg2': 'Diversified Key Generate2',
            'csnbddk': 'Diversify Directed Key',
            'csndedh': 'ECC Diffie-Hellman',
            'csnbgim': 'Generate Issuer MK',
            'csnbket': 'Key Encryption Translate',
            'csnbkex': 'Key Export',
            'csnbkgn': 'Key Generate',
            'csnbkgn2': 'Key Generate2',
            'csnbkim': 'Key Import',
            'csnbkpi': 'Key Part Import',
            'csnbkpi2': 'Key Part Import2',
            'csnbkyt': 'Key Test',
            'csnbkyt2': 'Key Test2',
            'csnbkytx': 'Key Test Extended',
            'csnbktb': 'Key Token Build',
            'csnbktb2': 'Key Token Build2',
            'csnbktr': 'Key Translate',
            'csnbktr2': 'Key Translate2',
            'csnbckm': 'Multiple Clear Key Import',
            'csnbskm': 'Multiple Secure Key Import',
            'csndpkd': 'PKA Decrypt',
            'csndpke': 'PKA Encrypt',
            'csnbpex': 'Prohibit Export',
            'csnbpexx': 'Prohibit Export Extended',
            'csnbrng': 'Random Number Generate',
            'csnbrngl': 'Random Number Generate Long',
            'csndrkx': 'Remote Key Export',
            'csnbrka': 'Restrict Key Attribute',
            'csnbski': 'Secure Key Import',
            'csnbski2': 'Secure Key Import2',
            'csndsyx': 'Symmetric Key Export',
            'csndsxd': 'Symmetric Key Export with Data',
            'csndsyg': 'Symmetric Key Generate',
            'csndsyi': 'Symmetric Key Import',
            'csndsyi2': 'Symmetric Key Import2',
            'csndtbc': 'Trusted Block Create',
            'csnbukd': 'Unique Key Derive'
        },
        'Protecting data': {
            'csnbctt2': 'Cipher Text Translate2',
            'csnbdec': 'Decipher',
            'csnbdco': 'Decode',
            'csnbenc': 'Encipher',
            'csnbeco': 'Encode',
            'csnbsad': 'Symmetric Algorithm Decipher',
            'csnbsae': 'Symmetric Algorithm Encipher',
            'csnbsyd': 'Symmetric Key Decipher',
            'csnbsye': 'Symmetric Key Encipher'
        },
        'Verifying data integrity and authenticating messages': {
            'csnbhmg': 'HMAC Generate',
            'csnbhmv': 'HMAC Verify',
            'csnbmgn': 'MAC Generate',
            'csnbmgn2': 'MAC Generate2',
            'csnbmvr': 'MAC Verify',
            'csnbmvr2': 'MAC Verify2',
            'csnbmdg': 'MDC Generate',
            'csnbmms': 'Multi-MAC Scheme',
            'csnbowh': 'One-Way Hash Generate',
            'csnbsmg': 'Symmetric MAC Generate',
            'csnbsmv': 'Symmetric MAC Verify'
        },
        'Financial services': {
            'csnbapg': 'Authentication Parameter Generate',
            'csnbcpe': 'Clear PIN Encrypt',
            'csnbpgn': 'Clear PIN Generate',
            'csnbcpa': 'Clear PIN Generate Alternate',
            'csnbckc': 'CVV Key Combine',
            'csnbesc': 'EMV Scripting Service',
            'csnbeac': 'EMV Transaction',
            'csnbevf': 'EMV Verification Functions',
            'csnbepg': 'Encrypted PIN Generate',
            'csnbptr': 'Encrypted PIN Translate',
            'csnbptr2': 'Encrypted PIN Translate2',
            'csnbptre': 'Encrypted PIN Translate Enhanced',
            'csnbpvr': 'Encrypted PIN Verify',
            'csnbpvr2': 'Encrypted PIN Verify2',
            'csnbfld': 'Field Level Decipher',
            'csnbfle': 'Field Level Encipher',
            'csnbffxd': 'Format Preserving Algorithms Decipher',
            'csnbffxe': 'Format Preserving Algorithms Encipher',
            'csnbffxt': 'Format Preserving Algorithms Translate',
            'csnbfped': 'FPE Decipher',
            'csnbfpee': 'FPE Encipher',
            'csnbfpet': 'FPE Translate',
            'csnbpcu': 'PIN Change/Unblock',
            'csnbpfo': 'Recover PIN from Offset',
            'csnbsky': 'Secure Messaging for Keys',
            'csnbspn': 'Secure Messaging for PINs',
            'csndsbc': 'SET Block Compose',
            'csndsbd': 'SET Block Decompose',
            'csnbtrv': 'Transaction Validation',
            'csnbcsg': 'VISA CVV Service Generate',
            'csnbcsv': 'VISA CVV Service Verify'
        },
        'Financial services for DK PIN methods': {
            'csnbddpg': 'DK Deterministic PIN Generate',
            'csnbdmp': 'DK Migrate PIN',
            'csnbdpmt': 'DK PAN Modify in Transaction',
            'csnbdpt': 'DK PAN Translate',
            'csnbdpc': 'DK PIN Change',
            'csnbdpv': 'DK PIN Verify',
            'csnbdpnu': 'DK PRW Card Number Update',
            'csnbdcu2': 'DK PRW Card Number Update2',
            'csnbdpcg': 'DK PRW CMAC Generate',
            'csnbdrpg': 'DK Random PIN Generate',
            'csnbdrg2': 'DK Random PIN Generate2',
            'csnbdrp': 'DK Regenerate PRW'
        },
        'X9.143 (TR-31) symmetric-key management': {
            'csnbt31c': 'TR-31 Create',
            'csnbt31i': 'TR-31 Import',
            'csnbt31o': 'TR-31 Optional Data Build',
            'csnbt31r': 'TR-31 Optional Data Read',
            'csnbt31p': 'TR-31 Parse',
            'csnbt31x': 'TR-31 Translate'
        },
        'TR-34 symmetric key management': {
            'csndt34b': 'TR-34 Bind-Begin',
            'csndt34c': 'TR-34 Bind-Complete',
            'csndt34d': 'TR-34 Key Distribution',
            'csndt34r': 'TR-34 Key Receive'
        },
        'Using digital signatures': {
            'csnddsg': 'Digital Signature Generate',
            'csnddsv': 'Digital Signature Verify'
        },
        'Managing PKA cryptographic keys': {
            'csndpkg': 'PKA Key Generate',
            'csndpki': 'PKA Key Import',
            'csndpkb': 'PKA Key Token Build',
            'csndktc': 'PKA Key Token Change',
            'csndpkt': 'PKA Key Translate',
            'csndpkx': 'PKA Public Key Extract',
            'csndpic': 'Public Infrastructure Certificate',
            'csndrkd': 'Retained Key Delete',
            'csndrkl': 'Retained Key List'
        },
        'Key data set management': {
            'csnbkrc': 'CKDS Key Record Create',
            'csnbkrc2': 'CKDS Key Record Create2',
            'csnbkrd': 'CKDS Key Record Delete',
            'csnbkrr': 'CKDS Key Record Read',
            'csnbkrr2': 'CKDS Key Record Read2',
            'csnbkrw': 'CKDS Key Record Write',
            'csnbkrw2': 'CKDS Key Record Write2',
            'csfcrc': 'Coordinated KDS Administration',
            'csfmps': 'ICSF Multi-Purpose Service',
            'csfkdsl': 'Key Data Set List',
            'csfkdmr': 'Key Data Set Metadata Read',
            'csfkdmw': 'Key Data Set Metadata Write',
            'csfrrt': 'Key Data Set Record Retrieve',
            'csfkdu': 'Key Data Set Update',
            'csndkrc': 'PKDS Key Record Create',
            'csndkrd': 'PKDS Key Record Delete',
            'csndkrr': 'PKDS Key Record Read',
            'csndkrr2': 'PKDS Key Record Read2',
            'csndkrw': 'PKDS Key Record Write'
        },
        'Utilities': {
            'csfstat': 'Cryptographic Usage Statistic',
            'csfiqa': 'ICSF Query Algorithm',
            'csfiqf': 'ICSF Query Facility',
            'csfiqf2': 'ICSF Query Facility2'
        },
        'Trusted interfaces': {
            'csfpci': 'PCI Interface'
        },
        'Using PKCS #11 tokens and objects': {
            'csfpdmk': 'PKCS #11 Derive Multiple Keys',
            'csfpdvk': 'PKCS #11 Derive Key',
            'csfpgav': 'PKCS #11 Get Attribute Value',
            'csfpgkp': 'PKCS #11 Generate Key Pair',
            'csfpgsk': 'PKCS #11 Generate Secret Key',
            'csfphmg': 'PKCS #11 Generate Keyed MAC',
            'csfphmv': 'PKCS #11 Verify Keyed MAC',
            'csfpowh': 'PKCS #11 One-Way Hash, Sign, or Verify',
            'csfppks': 'PKCS #11 Private Key Sign',
            'csfppkv': 'PKCS #11 Public Key Verify',
            'csfpprf': 'PKCS #11 Pseudo-Random Function',
            'csfpsav': 'PKCS #11 Set Attribute Value',
            'csfpskd': 'PKCS #11 Secret Key Decrypt',
            'csfpske': 'PKCS #11 Secret Key Encrypt',
            'csfpskr': 'PKCS #11 Secret Key Reencrypt',
            'csfptrc': 'PKCS #11 Token Record Create',
            'csfptrd': 'PKCS #11 Token Record Delete',
            'csfptrl': 'PKCS #11 Token Record List',
            'csfpuwk': 'PKCS #11 Unwrap Key',
            'csfpwpk': 'PKCS #11 Wrap Key'
        },
        'Using the PKCS #11 key structure and raw key callable services': {
            'csfpgk2': 'PKCS #11 Generate Secret Key2',
            'csfppd2': 'PKCS #11 Private Key Structure Decrypt',
            'csfpps2': 'PKCS #11 Private Key Structure Sign',
            'csfppe2': 'PKCS #11 Public Key Structure Encrypt',
            'csfppv2': 'PKCS #11 Public Key Structure Verify'
        }
    }
}
# longest parameter name: issuer_confidentiality_master_key_identifier_length in csnbesc (51 chars)
#--- cut here ---

_error = {
    'linux': {
        0: {
            0: (
                "The verb completed processing successfully.",
            ),
            2: (
                "One or more bytes of a key do not have odd parity.",
            ),
            8: (
                "No value is present to be processed.",
            ),
            151: (
                "The key token supplies the MAC length or MACLEN4 is the default for key tokens that contain MAC or MACVER keys.",
            ),
            701: (
                "A new master-key value has duplicate thirds.",
            ),
            702: (
                "A provided master-key part does not have odd parity. See Master Key Process (CSNBMKP) about parity requirements for master key parts.",
            ),
            2013: (
                "The Pending Change Buffer (PCB) is empty. This return code and reason code pair applies only to IBM Z.",
            ),
            2146: (
                "A weaker key was used to wrap a stronger key and the Warn when weak wrap - Transport keys command (offset X'032C') was enabled in the active role.",
            ),
            2173: (
                "The specified payload format version for the output key token matches the payload format version of the input key token.",
            ),
            3010: (
                "This card is currently disabled. A card is placed in this state so that it can be moved from one piece of hardware to another, while keeping its secret keys and master keys intact. Normally, when a card has been moved a 'tamper' event is recorded and all secrets are erased. A TKE workstation is typically required to put a card in this state and to remove it from this state after the card is installed on the new hardware. This return code and reason code pair applies only to IBM Z.",
            ),
            3553: (
                "This is a combination reason code. Some number of the provided MAC values did not match; however, M of N did match. Also, the key token has been reenciphered.",
            ),
            10001: (
                "A key encrypted under the old master key was used.",
            ),
            10002: (
                "A fully qualified dataset name is longer than 64 bytes and the environment variable CSUxxxLD is not defined (where xxx is either AES, DES, or PKA). The current directory has been abbreviated as a single dot (period).",
            ),
            10003: (
                "A fully qualified dataset name is longer than 64 bytes and the environment variable CSUxxxLD is defined (where xxx is either AES, DES, or PKA). Only the dataset name is returned. Use the CSUxxxLD environment variable to determine the fully qualified dataset name.",
            ),
            10005: (
                "The certificate revocation list (CRL) passed to the TR-34 service has expired. However, the user has requested to ignore this using a keyword.",
            ),
            10006: (
                "The key receiving device (KRD) certificate passed to the TR-34 service has expired. However, the user has requested to ignore this using a keyword.",
            ),
            10007: (
                "Some number of the provided MAC values did not match, however M of N did match.",
            )
        },
        4: {
            1: (
                "The verification test failed.",
            ),
            13: (
                "The key token has an initialization vector and the initialization_vector parameter value is nonzero. The verb uses the value in the key token.",
            ),
            16: (
                "The rule_array and the rule_array_count are too small to contain the complete result.",
            ),
            17: (
                "The requested ID is not present in any profile in the specified cryptographic hardware component.",
            ),
            19: (
                "The financial PIN in a PIN block is not verified.",
            ),
            158: (
                "The verb did not process any key records.",
            ),
            166: (
                "The control vector is not valid because of parity bits, anti-variant bits, inconsistent KEK bits or because bits 59 - 62 are not zero.",
            ),
            179: (
                "The control vector keywords in the rule_array are ignored.",
            ),
            195: (
                "The key or key-part rule keyword provided does not match the length of the key in the enciphered key token. The output is based on the length specified, and not on the actual key length.",
            ),
            283: (
                "The coprocessor battery is low.",
            ),
            287: (
                "The PIN-block format is not consistent.",
            ),
            429: (
                "The digital signature is not verified. The verb completed its processing normally.",
            ),
            877: (
                "The sub-CA certificate loaded has a later expiration (validity:NotAfter field) than its issuer certificate.",
            ),
            937: (
                "The UTF8 name compare was done via memcmp.",
            ),
            945: (
                "The requested hash method differs from the hash method used when the certificate was loaded and activated.",
            ),
            963: (
                "The OA request requires currently unavailable resources. This is a transient condition. Please retry.",
            ),
            1024: (
                "Sufficient shares have been processed to create a new master key.",
            ),
            2039: (
                "At least one control vector bit cannot be parsed.",
            ),
            2042: (
                "The supplied passphrase is not valid.",
            ),
            2133: (
                "The verb_data value identifies one or more PIN decimalization tables to be deleted that are not stored on the coprocessor. All PIN tables that were requested to be deleted are removed.",
            ),
            2162: (
                "At least two of the key parts of a new operational or master key have identical parts and a warning has been requested by the setting of an appropriate access control point.",
            ),
            5009: (
                "The provided TR-31 optional block contains data that cannot be used by the HSM. It is rejected.",
            )
        },
        8: {
            12: (
                "The token-validation value in an external key token is not valid.",
            ),
            22: (
                "The ID number in the request field is not valid.",
            ),
            23: (
                "An access to the data area is outside the data-area boundary.",
            ),
            24: (
                "The master key verification pattern is not valid.",
            ),
            25: (
                "The value that the text_length parameter specifies is not valid.",
            ),
            26: (
                "The value of the PIN is not valid.",
            ),
            29: (
                "The token-validation value in an internal key token is not valid.",
            ),
            30: (
                "No record with a matching key label is in key storage.",
            ),
            31: (
                "The control vector does not specify a DATA key. The key may be a CIPHER key which does not have the XPRTCPAC bit set in the control vector.",
            ),
            32: (
                "A key label format is not valid.",
            ),
            33: (
                "A rule_array or other parameter specifies a keyword that is not valid.",
            ),
            34: (
                "A rule_array keyword combination is not valid or a keyword is specified that conflicts with another keyword.",
            ),
            35: (
                "A rule_array_count is not valid.",
            ),
            36: (
                "The action command must be specified in the rule_array.",
            ),
            37: (
                "The object type must be specified in the rule_array.",
            ),
            39: (
                "A control vector violation occurred. Check all control vectors employed with the verb. For security reasons, no detail is provided.",
            ),
            40: (
                "The service code does not contain numerical character data.",
            ),
            41: (
                "The keyword supplied with the key_form parameter is not valid.",
            ),
            42: (
                "The expiration date is not valid.",
            ),
            43: (
                "The keyword supplied with the key_length or the key_token_length parameter is not valid.",
            ),
            44: (
                "A record with a matching key label already exists in key storage.",
            ),
            45: (
                "The input character string cannot be found in the code table.",
            ),
            46: (
                "The card-validation value (CVV) is not valid.",
            ),
            47: (
                "A source key token is unusable because it contains data that is not valid or is undefined. This could be due to a incorrect combination of fields, such as having a NOCV key-encryption key with a non-default control vector.",
            ),
            48: (
                "One or more keys has a master key verification pattern that is not valid.",
            ),
            49: (
                "A key-token-version-number found in a key token is not supported.",
            ),
            50: (
                "The key-serial-number specified in the rule_array is not valid.",
            ),
            51: (
                "The value that the text_length parameter specifies is not a multiple of eight bytes.",
            ),
            54: (
                "The value that the pad_character parameter specifies is not valid.",
            ),
            55: (
                "The initialization vector in the key token is enciphered.",
            ),
            56: (
                "The master key verification pattern in the OCV is not valid.",
            ),
            58: (
                "The parity of the operating key is not valid.",
            ),
            59: (
                "Control information (for example, the processing method or the pad character) in the key token conflicts with that in the rule_array.",
            ),
            60: (
                "A cryptographic request with the FIRST or MIDDLE keywords and a text length less than eight bytes is not valid.",
            ),
            61: (
                "The keyword supplied with the key_type parameter is not valid.",
            ),
            62: (
                "The source key is not present.",
            ),
            63: (
                "A key token has an invalid token header (for example, not an internal token).",
            ),
            64: (
                "The RSA key is not permitted to perform the requested operation. Likely cause is key distribution usage is not enabled for the key.",
            ),
            65: (
                "The key token failed consistency checking.",
            ),
            66: (
                "The recovered encryption block failed validation checking.",
            ),
            67: (
                "RSA encryption failed.",
            ),
            68: (
                "RSA decryption failed.",
            ),
            70: (
                "An invalid block identifier (identifier tag) was found. Either a block ID (identifier tag) that was proprietary was found, a reserved block ID was used, a duplicate block ID was found, or the specified optional block in the TR-31 key block could not be found.",
            ),
            72: (
                "The value that the size parameter specifies is not valid (too small, too large, negative, or zero).",
            ),
            85: (
                "The date or the time value is not valid.",
            ),
            90: (
                "Access control checking failed. See the Required Commands descriptions for the failing verb.",
            ),
            91: (
                "The time that was sent in your logon request was more than five minutes different from the clock in the secure module.",
            ),
            92: (
                "The user profile is expired.",
            ),
            93: (
                "The user profile has not yet reached its activation date.",
            ),
            94: (
                "The authentication data (for example, passphrase) is expired.",
            ),
            95: (
                "Access to the data is not authorized.",
            ),
            96: (
                "An error occurred reading or writing the secure clock.",
            ),
            100: (
                "The PIN length is not valid.",
            ),
            101: (
                "The PIN check length is not valid. It must be in the range from 4 to the PIN length inclusive.",
            ),
            102: (
                "The value of the decimalization table is not valid.",
            ),
            103: (
                "The value of the validation data is not valid.",
            ),
            104: (
                "The value of the customer-selected PIN is not valid or the PIN length does not match the value supplied with the PIN_length parameter or defined by the PIN-block format specified in the PIN profile.",
            ),
            105: (
                "The value of the transaction_security parameter is not valid.",
            ),
            106: (
                "The PIN-block format keyword is not valid.",
            ),
            107: (
                "The format control keyword is not valid.",
            ),
            108: (
                "The value or the placement of the padding data is not valid.",
            ),
            109: (
                "The extraction method keyword is not valid.",
            ),
            110: (
                "The value of the PAN data is not numeric character data.",
            ),
            111: (
                "The sequence number is not valid.",
            ),
            112: (
                "The PIN offset is not valid.",
            ),
            114: (
                "The PVV value is not valid.",
            ),
            116: (
                "The clear PIN value is not valid. For example, digits other than 0 - 9 were found.",
            ),
            118: (
                "The issuer domestic code is invalid. This value must be five alphanumeric characters.",
            ),
            120: (
                "An origin or destination identifier is not valid.",
            ),
            121: (
                "The value of the inbound_key, key_value_structure, or source_key parameter is not valid.",
            ),
            125: (
                "A PKA92-encrypted key having the same Environment Identifier (EID) as the local node cannot be imported.",
            ),
            129: (
                "Required rule-array keyword not found.",
            ),
            153: (
                "The text length exceeds the system limits.",
            ),
            154: (
                "The key token specified by the key_identifier parameter is not an internal key token or a key label.",
            ),
            155: (
                "The value that the generated_key_identifier parameter specifies is not valid or it is not consistent with the value that the key_form parameter specifies.",
            ),
            156: (
                "A keyword is not valid with the specified parameters.",
            ),
            157: (
                "The key-token type is not specified in the rule_array.",
            ),
            159: (
                "The keyword supplied with the option parameter is not valid.",
            ),
            160: (
                "The key type and the key length are not consistent.",
            ),
            161: (
                "The value that the dataset_name_length parameter specifies is not valid.",
            ),
            162: (
                "The offset value is not valid.",
            ),
            163: (
                "The value that the dataset_name parameter specifies is not valid.",
            ),
            164: (
                "The starting address of the output area falls inside the input area.",
            ),
            165: (
                "The carry_over_character_count specified in the chaining vector is not valid.",
            ),
            168: (
                "A hexadecimal MAC value contains characters that are not valid or the MAC, on a request or reply failed, because the user session key in the host and the adapter card do not match.",
            ),
            169: (
                "Specific to MDC Generate, indicates that the length of the text supplied is not correct, either not long enough for the algorithm parameters used or not the correct multiple (must be multiple of eight bytes).",
            ),
            170: (
                "Special authorization through the operating system is required to use this verb.",
            ),
            171: (
                "The control_array_count value is not valid.",
            ),
            175: (
                "The key token cannot be parsed because no control vector is present.",
            ),
            180: (
                "A key token presented for parsing is null.",
            ),
            181: (
                "The key token is not valid. The first byte is not valid or an incorrect token type was presented.",
            ),
            183: (
                "The key type is not consistent with the key type of the control vector.",
            ),
            184: (
                "An input pointer is null.",
            ),
            185: (
                "A disk I/O error occurred: perhaps the file is in-use, does not exist, and so forth.",
            ),
            186: (
                "The key-type field in the control vector is not valid.",
            ),
            187: (
                "The requested MAC length (MACLEN4, MACLEN6, MACLEN8) is not consistent with the control vector (key-A, key-B).",
            ),
            191: (
                "The requested MAC length (MACLEN6, MACLEN8) is not consistent with the control vector (MAC-LN-4).",
            ),
            192: (
                "A key-storage record contains a record validation value that is not valid.",
            ),
            194: (
                "A private-key section length is invalid.",
            ),
            199: (
                "A public exponent is invalid.",
            ),
            204: (
                "A memory allocation failed. This can occur in the host and in the coprocessor. Try closing other host tasks. If the problem persists, contact the IBM support center.",
            ),
            205: (
                "The X9.23 ciphering method is not consistent with the use of the CONTINUE keyword.",
            ),
            323: (
                "The ciphering method the Decipher verb used does not match the ciphering method the Encipher verb used.",
            ),
            335: (
                "Either the specified cryptographic hardware component or the environment cannot implement this function.",
            ),
            340: (
                "One of the input control vectors has odd parity.",
            ),
            343: (
                "Either the data block or the buffer for the block is too small or a variable has caused an attempt to create an internal data structure that is too large.",
            ),
            345: (
                "Insufficient storage space exists for the data in the data block buffer.",
            ),
            374: (
                "Less data was supplied than expected or less data exists than was requested.",
            ),
            377: (
                "A key-storage error occurred.",
            ),
            382: (
                "A time-limit violation occurred.",
            ),
            385: (
                "The cryptographic hardware component reported that the data passed as part of a command is not valid for that command.",
            ),
            387: (
                "The cryptographic hardware component reported that the user ID or role ID is not valid.",
            ),
            393: (
                "The command was not processed because the profile cannot be used.",
            ),
            394: (
                "The command was not processed because the expiration date was exceeded.",
            ),
            397: (
                "The command was not processed because the active profile requires the user to be verified first.",
            ),
            398: (
                "The command was not processed because the maximum PIN or password failure limit is exceeded.",
            ),
            407: (
                "There is a PIN-block consistency-check-error.",
            ),
            439: (
                "Key cannot be completed because all required key parts have not yet been accumulated, or key is already complete.",
            ),
            441: (
                "Key part cannot be added because key is complete. The key to be processed should be partial, but the key is not partial according to the control vector or other control bits of the key.",
            ),
            442: (
                "DES keys with replicated halves are not allowed or a DES key with CV bit 40 = B'1' (DOUBLE-O or TRIPLE-O) has replicated key parts.",
            ),
            605: (
                "The number of output bytes is greater than the number that is permitted.",
            ),
            703: (
                "A new master-key value is one of the weak DES keys.",
            ),
            704: (
                "A new master key cannot have the same master key verification pattern as the current master key.",
            ),
            705: (
                "Both exporter keys specify the same key-encrypting key.",
            ),
            706: (
                "Pad count in deciphered data is not valid.",
            ),
            707: (
                "The master-key registers are not in the state required for the requested function.",
            ),
            714: (
                "A reserved parameter must be a null pointer or an expected value.",
            ),
            715: (
                "A parameter that must have a value of zero is not valid.",
            ),
            718: (
                "The hash value of the data block in the decrypted RSA-OAEP block does not match the hash of the decrypted data block.",
            ),
            719: (
                "The block format (BT) field in the decrypted RSA-OAEP block does not have the correct value.",
            ),
            720: (
                "The initial byte (I) in the decrypted RSA-OAEP block does not have a valid value.",
            ),
            721: (
                "The V field in the decrypted RSA-OAEP does not have the correct value.",
            ),
            752: (
                "The key-storage file path is not usable.",
            ),
            753: (
                "Opening the key-storage file failed.",
            ),
            754: (
                "An internal call to the key_test command failed.",
            ),
            756: (
                "Creation of the key-storage file failed.",
            ),
            760: (
                "An RSA-key modulus length in bits or in bytes is not valid.",
            ),
            761: (
                "An RSA-key exponent length is not valid.",
            ),
            762: (
                "The key values structure for CSNDPKB has a field in error. A length or format is not correct.",
            ),
            763: (
                "The section identification number within a key token is not valid.",
            ),
            770: (
                "The PKA key token has a field that is not valid.",
            ),
            771: (
                "The user is not logged on.",
            ),
            772: (
                "The requested role does not exist.",
            ),
            773: (
                "The requested profile does not exist.",
            ),
            774: (
                "The profile already exists.",
            ),
            775: (
                "The supplied data is not replaceable.",
            ),
            776: (
                "The requested ID is already logged on.",
            ),
            777: (
                "The authentication data is not valid.",
            ),
            778: (
                "The checksum for the role is in error.",
            ),
            779: (
                "The checksum for the profile is in error.",
            ),
            780: (
                "There is an error in the profile data.",
            ),
            781: (
                "There is an error in the role data.",
            ),
            782: (
                "The function-control-vector header is not valid.",
            ),
            783: (
                "The command is not permitted by the function-control-vector value.",
            ),
            784: (
                "The operation you requested cannot be performed because the user profile is in use.",
            ),
            785: (
                "The operation you requested cannot be performed because the role is in use.",
            ),
            786: (
                "A profile load is being attempted for a profile that has the same authentication key as another profile in the domain that already exists.",
            ),
            787: (
                "A profile load is being attempted for a profile that has a key that is too weak for the compliance level of the domain where the profile is being loaded.",
            ),
            816: (
                "The public-key certificate length is invalid.",
            ),
            817: (
                "The public key does not match.",
            ),
            818: (
                "The signature of the input public-key certificate does not verify.",
            ),
            819: (
                "The public-key certificate type is invalid or not allowed.",
            ),
            821: (
                "The subject name provided is either missing, malformed, or of invalid length.",
            ),
            822: (
                "The issuer name provided is either missing, malformed, or of invalid length.",
            ),
            823: (
                "The serial number provided is either unexpected, missing, malformed, or of invalid length.",
            ),
            825: (
                "The extension data provided is either unexpected, missing, malformed, or of invalid length.",
            ),
            826: (
                "The expiration days value provided is either unexpected, missing, or out of range.",
            ),
            827: (
                "The pathLenConstraint provided is either unexpected, missing, or out of range.",
            ),
            829: (
                "Error in GSK/SSL/ASN.1 processing.",
            ),
            830: (
                "Error in ASN.1 processing. No more data.",
            ),
            831: (
                "Error in ASN.1 processing. Length value is not valid.",
            ),
            833: (
                "Error in ASN.1 processing. Attribute value separator is missing.",
            ),
            834: (
                "Error in ASN.1 processing. Unknown attribute identifier.",
            ),
            835: (
                "Error in ASN.1 processing. Object identifier syntax error.",
            ),
            837: (
                "Error in ASN.1 processing. Interval is not valid.",
            ),
            838: (
                "Error in ASN.1 processing. X.500 name syntax error.",
            ),
            839: (
                "Error in ASN.1 processing. Data type is not correct.",
            ),
            841: (
                "Error in ASN.1 processing. Character string cannot be converted.",
            ),
            842: (
                "Error in ASN.1 processing. Indefinite-length encoding is not supported.",
            ),
            843: (
                "Error in ASN.1 processing. Data element must be constructed.",
            ),
            845: (
                "Error in ASN.1 processing. Data element must be an ASN.1 primitive.",
            ),
            846: (
                "Error in ASN.1 processing. Indefinite-length encoding is not allowed.",
            ),
            847: (
                "Error in ASN.1 processing. Data encoding is not valid.",
            ),
            849: (
                "Error in ASN.1 processing. Data value overflow.",
            ),
            850: (
                "Error in ASN.1 processing. Unused bit count is not valid.",
            ),
            851: (
                "Error in ASN.1 processing. Unused bit count is not valid for a segmented bit string.",
            ),
            853: (
                "Error in ASN.1 processing. Required data element is missing.",
            ),
            854: (
                "Error in ASN.1 processing. Excess data found at end of data element.",
            ),
            855: (
                "Error in ASN.1 processing. Parameter is not valid.",
            ),
            857: (
                "Error in ASN.1 processing. Data value is not present.",
            ),
            858: (
                "Error in ASN.1 processing. Selection is not within the valid range.",
            ),
            859: (
                "Error in ASN.1 processing. No selection found.",
            ),
            861: (
                "Error in ASN.1 processing. Syntax already set.",
            ),
            862: (
                "Error in ASN.1 processing. Codeset is not allowed.",
            ),
            863: (
                "Error in ASN.1 processing. Attribute value is not valid.",
            ),
            865: (
                "Error in ASN.1 processing. Attribute value is missing.",
            ),
            866: (
                "Error in ASN.1 processing. Object identifier element count is not valid.",
            ),
            867: (
                "Error in ASN.1 processing. Incorrect value for the first object identifier element.",
            ),
            869: (
                "Error in ASN.1 processing. Incorrect value for the second object identifier element.",
            ),
            870: (
                "Error in ASN.1 processing. Version is not supported.",
            ),
            871: (
                "Error in certificate processing. Certificate contains a duplicate extension.",
            ),
            873: (
                "The extension data provided conflicts with the rule array data provided.",
            ),
            874: (
                "Error in certificate processing. Elliptic Curve is not supported.",
            ),
            875: (
                "Error in certificate processing. Signature not supplied.",
            ),
            878: (
                "Error in certificate processing. Cryptographic algorithm is not supported.",
            ),
            879: (
                "Error in certificate processing. Incorrect Base64 encoding.",
            ),
            881: (
                "Error in certificate processing. Unrecognized file or message encoding.",
            ),
            882: (
                "The HSM internal clock has not been set.",
            ),
            883: (
                "Error in certificate processing. Key not supported by encryption or signature algorithm.",
            ),
            885: (
                "The X.509 certificate presented has an invalid, or missing KeyUsage extension.",
            ),
            886: (
                "Error in certificate processing. Certificate extension is not supported.",
            ),
            887: (
                "Error in certificate processing. The input certificate does not have a valid signature.",
            ),
            889: (
                "Error in certificate processing. Input/Output request failed.",
            ),
            890: (
                "Error in certificate processing. Database is not valid.",
            ),
            891: (
                "Error in certificate processing. Signature not supplied.",
            ),
            893: (
                "Error in certificate processing. Certificate extension data has an incorrect critical indicator.",
            ),
            894: (
                "Error in certificate processing. Required certificate extension is missing.",
            ),
            895: (
                "Error in certificate processing. Certificate not valid for host.",
            ),
            897: (
                "Error in certificate processing. Subject name is not valid.",
            ),
            898: (
                "Error in certificate processing. Certificate extension data is incorrect.",
            ),
            899: (
                "Error in certificate processing. Validation option is not valid.",
            ),
            901: (
                "Error in certificate processing. Name constraints violated.",
            ),
            902: (
                "Error in certificate processing. Record not found.",
            ),
            903: (
                "Error in certificate processing. Certificate chain is not trusted.",
            ),
            905: (
                "Error in certificate processing. Required basic constraints certificate extension is missing.",
            ),
            906: (
                "Error in certificate processing. An internal error has occurred.",
            ),
            907: (
                "Error in certificate processing. Issuer certificate not found.",
            ),
            909: (
                "Error in certificate processing. Name format is not supported.",
            ),
            910: (
                "Error in certificate processing. Self-signed certificate not in database.",
            ),
            911: (
                "Error in certificate processing. Certificate is expired.",
            ),
            913: (
                "Error in certificate processing. Certificate is not yet valid.",
            ),
            914: (
                "Error in certificate processing. Issuer name is not valid.",
            ),
            915: (
                "Error in certificate processing. Certificate is revoked.",
            ),
            917: (
                "Error in certificate processing. Numeric value is not valid.",
            ),
            918: (
                "Error in certificate processing. Variable argument security level is not valid.",
            ),
            919: (
                "Error in certificate processing. Variable argument validate root is not valid.",
            ),
            921: (
                "Error in certificate processing. Variable argument count is not valid.",
            ),
            922: (
                "Error in certificate processing. Extended key usage comparison failed.",
            ),
            923: (
                "Error in certificate processing. Certificate does not have an extended key usage extension.",
            ),
            925: (
                "Error in certificate processing. Extended key usage type is not supported for this operation.",
            ),
            926: (
                "Error in certificate processing. Extended key usage input is not supplied.",
            ),
            927: (
                "Error in certificate processing. Extended key usage input count is not valid.",
            ),
            929: (
                "Error in certificate processing. Input certificate not supplied.",
            ),
            930: (
                "Error in certificate processing. Incorrect key usage.",
            ),
            931: (
                "Error in certificate processing. Cannot match CRL distribution points.",
            ),
            933: (
                "Error in certificate processing. Acceptable policy intersection cannot be found.",
            ),
            934: (
                "Error in certificate processing. Certification path is too long.",
            ),
            935: (
                "Error in certificate processing. Issuer is not a certification authority.",
            ),
            939: (
                "Certificate presented to load as a certification authority does not have a true value for CA in basic constraints certificate extension.",
            ),
            941: (
                "Certificate presented to use as an end entity has a true value for cA in basic constraints certificate extension.",
            ),
            942: (
                "Error in certificate processing. Label is not unique.",
            ),
            943: (
                "Error in certificate processing. Certificate is not unique.",
            ),
            946: (
                "The requested hash method differes from the hash method used when the certificate was loaded.",
            ),
            947: (
                "Error in certificate processing. Record label is not valid.",
            ),
            949: (
                "Error in certificate processing. Multiple certificates exist for label.",
            ),
            950: (
                "Error in certificate processing. Record deleted.",
            ),
            954: (
                "Error in certificate processing. Subject name cannot be changed.",
            ),
            955: (
                "Error in certificate processing. Public key cannot be changed.",
            ),
            957: (
                "The Certificate presented is not in the proper state for the requested operation.",
            ),
            958: (
                "The Certificate hash presented does not match the stored hash.",
            ),
            959: (
                "Error in certificate processing. Database contains certificates signed by the certificate.",
            ),
            970: (
                "Error in certificate processing. The certificate revocation list is expired.",
            ),
            997: (
                "The algorithm identifier provided is either missing, malformed, or invalid.",
            ),
            998: (
                "The algorithm parameters provided are either missing, malformed, or invalid.",
            ),
            1001: (
                "Error in certificate processing. The provided expiration date is invalid.",
            ),
            1002: (
                "Error in certificate processing. The provided RSASSA PSS digest algorithm is not supported.",
            ),
            1003: (
                "Error in certificate processing. The provided RSASSA PSS mask generation algorithm is not supported.",
            ),
            1005: (
                "The provided private/public key pair and certificate are mismatched.",
            ),
            1006: (
                "The provided TR-31 optional block is not allowed with the provided key block header algorithm.",
            ),
            1007: (
                "The provided TR-31 optional block is malformed.",
            ),
            1009: (
                "The provided TR-31 optional block contains data that cannot be used by the HSM, so it must be rejected.",
            ),
            1010: (
                "The provided TR-31 optional block is not allowed with the provided key block header usage. For the CSNBT31X COMP-TAG, this indicates that the opt_blocks parameter is not empty.",
            ),
            1011: (
                "The provided set of TR-31 optional blocks contains duplicate block IDs provided either directly as input and or indirectly by specifying rule array keywords.",
            ),
            1013: (
                "The provided skeleton attributes do not match the attributes provided in the optional block.",
            ),
            1014: (
                "The DA optional block has more members than are allowed (expected one member).",
            ),
            1015: (
                "TR-31 block support is not available for this option.",
            ),
            1025: (
                "The registered public key or retained private key name already exists.",
            ),
            1026: (
                "The key name (registered public key or retained private key) does not exist.",
            ),
            1027: (
                "Environment identifier data is already set.",
            ),
            1028: (
                "Master key share data is already set.",
            ),
            1029: (
                "There is an error in the Environment Identifier (EID) data.",
            ),
            1030: (
                "There is an error in using the master key share data.",
            ),
            1031: (
                "There is an error in using registered public key or retained private key data.",
            ),
            1032: (
                "There is an error in using registered public key hash data.",
            ),
            1033: (
                "The public key hash was not registered.",
            ),
            1034: (
                "The public key was not registered.",
            ),
            1035: (
                "The public key certificate signature was not verified.",
            ),
            1037: (
                "There is a master key shares distribution error.",
            ),
            1038: (
                "The public key hash is not marked for cloning.",
            ),
            1039: (
                "The registered public key hash does not match the registered hash.",
            ),
            1040: (
                "The master key share enciphering key failed encipher.",
            ),
            1041: (
                "The master key share enciphering key failed decipher.",
            ),
            1042: (
                "The master key share digital signature generate failed.",
            ),
            1043: (
                "The master key share digital signature verify failed.",
            ),
            1044: (
                "There is an error in reading VPD data from the adapter.",
            ),
            1045: (
                "Encrypting the cloning information failed.",
            ),
            1046: (
                "Decrypting the cloning information failed.",
            ),
            1047: (
                "There is an error loading the new master key from the master key shares.",
            ),
            1048: (
                "The clone information has one or more sections that are not valid.",
            ),
            1049: (
                "The master key share index is not valid.",
            ),
            1050: (
                "The public-key encrypted-key is rejected because the Environment Identifier (EID) with the key is the same as the EID for this node.",
            ),
            1051: (
                "The private key is rejected because the key is not flagged for use in master-key cloning.",
            ),
            1052: (
                "The token identifier of the trusted block's header section is in the range X'20' - X'FF'. Check the token identifier of the trusted block.",
            ),
            1053: (
                "The active flag in the trusted block’s trusted block section X'14' is not disabled. Use the Trusted Block Create verb to create an inactive/external trusted block.",
            ),
            1054: (
                "The token identifier of the trusted block’s header section is not X'1E' (external). Use the Trusted Block Create verb to create an inactive/external trusted block.",
            ),
            1055: (
                "The active flag of the trusted block’s trusted block section X'14' is not enabled. Use the Trusted Block Create verb to create an active/external trusted block.",
            ),
            1056: (
                "The token identifier of the trusted block’s header section is not X'1F' (internal). Use the PKA Key Import verb to import the trusted block.",
            ),
            1057: (
                "The trusted block rule section X'12' rule ID does not match input parameter rule ID. Verify that the trusted block used has the rule section specified.",
            ),
            1058: (
                "The trusted block contains a value that is too small or too large.",
            ),
            1059: (
                "A trusted block parameter that must have a value of zero (or a grouping of bits set to zero) is invalid.",
            ),
            1060: (
                "The trusted block public key section failed consistency checking.",
            ),
            1061: (
                "The trusted block contains extraneous sections or subsections (TLVs). Check the trusted block for undefined sections or subsections.",
            ),
            1062: (
                "The trusted block contains missing sections or subsections (TLVs). Check the trusted block for required sections and subsections applicable to the verb invoked.",
            ),
            1063: (
                "The trusted block contains duplicate sections or subsections (TLVs). Check the trusted block’s sections and subsections for duplicates. Multiple rule sections are allowed.",
            ),
            1064: (
                "The trusted block expiration date has expired (as compared to the IBM 4764 clock). Validate the expiration date in the trusted block’s trusted information section’s Activation and Expiration Date TLV object",
            ),
            1065: (
                "The trusted block expiration date is at a date prior to the activation date. Validate the expiration date in the trusted block’s trusted information section’s Activation and Expiration Date TLV object.",
            ),
            1066: (
                "The trusted block public key modulus length in bits is not consistent with the byte length. The bit length must be less than or equal to byte length * 8 and greater than (byte length - 1) * 8.",
            ),
            1067: (
                "The trusted block public key modulus length in bits exceeds the maximum allowed bit length, as defined by the Function Control Vector.",
            ),
            1068: (
                "One or more trusted block sections or TLV objects contained data that is invalid (an example would be invalid label data in label section X'13').",
            ),
            1069: (
                "Trusted block verification was attempted by a verb other than CSNDDSV, CSNDKTC, CSNDPKI, CSNDRKX, or CSNDTBC.",
            ),
            1070: (
                "The trusted block rule ID contained within a rule section has invalid characters.",
            ),
            1071: (
                "The source key's length or CV does not match what is expected by the rule section in the trusted block that was selected by the rule ID input parameter.",
            ),
            1072: (
                "The activation data is not valid. Validate the activation data in the trusted block’s trusted information section’s Activation and Expiration Date TLV object.",
            ),
            1073: (
                "The source-key label does not match the template in the export key DES token parameters TLV object of the selected trusted block rule section.",
            ),
            1074: (
                "The control-vector value specified in the common export key parameters TLV object in the selected rule section of the trusted block contains a control vector that is not valid.",
            ),
            1075: (
                "The source-key label template in the export key DES token parameters TLV object in the selected rule section of the trusted block contains a label template that is not valid.",
            ),
            1077: (
                "Key wrapping option input error.",
            ),
            1078: (
                "Key wrapping Security Relevant Data Item (SRDI) error.",
            ),
            1079: (
                "The format of the decrypted PIN block is not supported in this function.",
            ),
            1081: (
                "The active role is not allowed to use a PIN-block with the specified format (ISO-1 or ISO-2).",
            ),
            1082: (
                "The key strength of the input or output key is not allowed by your access control point settings. For DES/TDES keys, consider also the effective strength of the key, whether there are repeated 56-bit sections among K1,K2 or K1,K2,K3. For example, if effective single-length TDES keys are disabled by access control point settings, consider if K1=K2, K2=K3, or K1=K2=K3.",
            ),
            1083: (
                "When the wrap type in the token indicates WRAPENH3, this verb requires a skeleton token. The verb cannot reuse a token containing a key. There may be multiple reasons for this. The most common is that the length of the key is hidden when the WRAPENH3 method is used. Therefore, a skeleton token with the true requested key length is needed.",
            ),
            1085: (
                "When the wrap type in the token indicates WRAPENH3, or WRAPENH3 is requested for a token and the right-most clear key material in K2 or K3, or both, is all 0, then the token can not be wrapped with WRAPENH3.",
            ),
            1100: (
                "There is a general hardware device driver execution error.",
            ),
            1101: (
                "There is a hardware device driver parameter that is not valid.",
            ),
            1102: (
                "There is a hardware device driver non-valid buffer length.",
            ),
            1103: (
                "The hardware device driver has too many opens. The device cannot open now.",
            ),
            1104: (
                "The hardware device driver is denied access.",
            ),
            1105: (
                "The hardware device driver device is busy and cannot perform the request now.",
            ),
            1106: (
                "The hardware device driver buffer is too small and the received data is truncated.",
            ),
            1107: (
                "The hardware device driver request is interrupted and the request is aborted.",
            ),
            1108: (
                "The hardware device driver detected a security tamper event.",
            ),
            1114: (
                "The communications manager detected that the host-supplied buffer for the reply control block is too small.",
            ),
            1115: (
                "The communications manager detected that the host-supplied buffer for the reply data block is too small.",
            ),
            1117: (
                "Hardware device driver operation not permitted.",
            ),
            1118: (
                "Hardware device driver received bad address.",
            ),
            1119: (
                "Hardware device driver hardware error.",
            ),
            1121: (
                "Hardware device driver firmware error.",
            ),
            1122: (
                "Hardware device driver temperature of out range.",
            ),
            1123: (
                "Hardware device driver received bad request.",
            ),
            1125: (
                "Hardware device driver host timeout.",
            ),
            2034: (
                "The environment variable that was used to set the default coprocessor is not valid, or does not exist for a coprocessor in the system.",
            ),
            2036: (
                "The contents of a chaining vector are not valid. Ensure the chaining vector was not modified by your application program.",
            ),
            2038: (
                "No RSA private key information is provided.",
            ),
            2041: (
                "A default card environment variable is not valid.",
            ),
            2050: (
                "The current key serial number field in the PIN profile variable is not valid (not hexadecimal or too many one bits).",
            ),
            2051: (
                "There is a non-valid message length in the OAEP-decoded information.",
            ),
            2053: (
                "No message found in the OAEP-decoded data.",
            ),
            2054: (
                "There is a non-valid RSA Enciphered Key cryptogram: OAEP optional encoding parameters failed validation.",
            ),
            2055: (
                "Based on the hash method and size of the symmetric key specified, the RSA public key size is too small to format the symmetric key into a PKOAEP2 message.",
            ),
            2062: (
                "The active role does not permit you to change the characteristic of a double-length key in the key_Part_Import parameter.",
            ),
            2065: (
                "The specified key token is not null.",
            ),
            2080: (
                "The group profile was not found.",
            ),
            2081: (
                "The group has duplicate elements.",
            ),
            2082: (
                "The group profile is not in the group.",
            ),
            2083: (
                "The group has the wrong user ID count.",
            ),
            2084: (
                "The group user ID failed.",
            ),
            2085: (
                "The profile is not in the specified group.",
            ),
            2086: (
                "The group role was not found.",
            ),
            2087: (
                "The group profile has not been activated.",
            ),
            2088: (
                "The expiration date of the group profile has been reached or exceeded.",
            ),
            2089: (
                "The verb contains multiple keywords or parameters that indicate the algorithm to be used, and at least one of these specifies a different algorithm from the others.",
            ),
            2090: (
                "A required SRDI was not found.",
            ),
            2091: (
                "A required CA SRDI was not found.",
            ),
            2093: (
                "Specific to IBM Z - an AES key is encrypted under a DES master key, which is not acceptable for the requested operation.",
            ),
            2095: (
                "The key_form is incompatible with the key_type.",
            ),
            2097: (
                "The key_length is incompatible with the key_type.",
            ),
            2098: (
                "Either a key bit length that was not valid was found in an AES key token (length not 128, 192, or 256 bits) or a version X'01' DES token had a token-marks field that was not valid.",
            ),
            2099: (
                "Invalid encrypted key length in the AES token, when an encrypted key is present.",
            ),
            2106: (
                "An input/output error occurred while accessing the logged on users table.",
            ),
            2110: (
                "Invalid wrapping type.",
            ),
            2111: (
                "Control vector enhanced bit (bit 56) conflicts with key wrapping keyword.",
            ),
            2113: (
                "A key token contains invalid payload.",
            ),
            2114: (
                "Clear-key bit length is out of range.",
            ),
            2115: (
                "Input key token cannot have a key present when importing the first key part; skeleton key token is required.",
            ),
            2118: (
                "One or more invalid values in the TR-31 key block header.",
            ),
            2119: (
                "The \"mode\" value in the TR-31 header is invalid or is not acceptable in the chosen operation.",
            ),
            2121: (
                "The \"algorithm\" value in the TR-31 header is invalid or is not acceptable in the chosen operation.",
            ),
            2122: (
                "For import, the exportability byte in the TR-31 header contains a value that does not support import of the key into CCA. For export, the requested exportability does not match circumstances (for example, a 'B' Key Block Version ID key can be wrapped only by a KEK that is wrapped in CBC mode, the ECB mode KEK violates ANSI X9.24).",
            ),
            2123: (
                "The length of the cleartext key in the TR-31 block is invalid (for example, the algorithm is 'D' for single-length DES, but the key length is not 64 bits).",
            ),
            2125: (
                "The Key Block Version ID in the TR-31 header contains an invalid value.",
            ),
            2126: (
                "The key-usage field in the TR-31 header contains a value that is not supported for import of the key into CCA.",
            ),
            2127: (
                "The key-usage field in the TR-31 header contains a value that is not valid with the other parameters in the header.",
            ),
            2129: (
                "Either a parameter for building a TR-31 key block (a TR-31 key block or a component, such as a tag for an optional block) contains one or more ASCII characters that are not printable as described in TR-31, or a field contains ASCII characters that are not allowed for that field.",
            ),
            2130: (
                "The control vector carried in the optional blocks of the TR-31 key block is inconsistent with other attributes of the key.",
            ),
            2131: (
                "The key-token failed the MAC validate step of the Key Block unwrap and verify steps (for either Key Block Version ID method). MAC validation failed for a parameter in a key block, such as a trusted block or a TR-31 key block. This might be the result of tampering, corruption, or using a validation key that is different from the one use to generate the MAC.",
            ),
            2134: (
                "No valid PIN decimalization tables are present.",
            ),
            2135: (
                "The PIN decimalization table provided as input is not allowed to be used because it does not match any of the active tables stored on the coprocessor.",
            ),
            2137: (
                "There is an error involving the PIN decimalization table input data. No PIN tables have been changed.",
            ),
            2138: (
                "At least one of the PIN decimalization tables requested to be activated is empty or already in the active state (not in the loaded state). No PIN tables have been activated.",
            ),
            2139: (
                "At least one PIN decimalization table provided as input to be activated does not match the corresponding table that is loaded on the coprocessor. No PIN tables have been changed from the loaded state to the active state.",
            ),
            2141: (
                "The key verification pattern for the key-encrypting key is not valid.",
            ),
            2142: (
                "A key-usage field setting prevents operation.",
            ),
            2143: (
                "A key-management field setting prevents operation.",
            ),
            2145: (
                "An attempt to wrap a stronger key with a weaker key was disallowed.",
            ),
            2147: (
                "The key type to be generated is not valid.",
            ),
            2149: (
                "The key to be generated is stronger than the input material.",
            ),
            2151: (
                "At least one PIN decimalization table identifier provided as input is out of range or is a duplicate. No PIN tables have been changed.",
            ),
            2153: (
                "The input token is incompatible with the service (that is, clear key when encrypted key was expected).",
            ),
            2154: (
                "At least one key token does not have the required key type for the specified function. For TR-31 tokens, this may indicate wrong usage or mode. For example, a KEK with TR-31 mode of key use \"E\" when \"D\" is required.",
            ),
            2158: (
                "There is a mismatch between ECC key tokens of curve types, key lengths, or both. Curve types and key lengths must match.",
            ),
            2159: (
                "A key-encrypting key is invalid.",
            ),
            2161: (
                "A wrap type, either requested or default, is in conflict with one or more input tokens.",
            ),
            2163: (
                "At least two of the key parts of a new operational or master key have identical parts and an error has been requested by the setting of an appropriate access control point.",
            ),
            2165: (
                "An RSA key token contains a private section that is not valid with this command.",
            ),
            2167: (
                "Invalid hash type in certificate.",
            ),
            2169: (
                "Invalid signature type in certificate.",
            ),
            2170: (
                "Translation of text using an outbound key that has an effective key strength weaker than the effective strength of the inbound key is not allowed.",
            ),
            2174: (
                "The provided data was not hexadecimal digits.",
            ),
            2175: (
                "A weak PIN was presented. The PIN change has been rejected.",
            ),
            2177: (
                "The PAN presented to the PAN change verb was the same as the PAN in the encrypted PIN block. The change has been rejected.",
            ),
            2178: (
                "The PAN provided is inconsistent with a PAN incorporated in another piece of data.",
            ),
            2181: (
                "",
            ),
            2182: (
                "A rule array keyword was passed to the TR31 Key Import (CSNBT31I) callable service or a TR-31 Key Block header field indicated that a particular TR-31 optional block was required. This optional block was not found in the TR-31 key block or the optional block has data that is invalid for the service call.",
            ),
            2183: (
                "There is an error in the weak PIN entry structure input header length. No entries have been changed.",
            ),
            2185: (
                "For at least one of the inputs, the weak PIN entry requested to be activated is not in the loaded state. No weak PIN entries have been activated.",
            ),
            2186: (
                "For at least one of the inputs, the weak PIN entry requested to be activated did not match the weak PIN entry structure to be activated. No weak PIN entries have been activated.",
            ),
            2187: (
                "One or more of the weak PIN entry ID numbers in the input verb data was invalid, out or range, or a duplicate. No weak PIN entries have been changed.",
            ),
            2189: (
                "There is an error in the weak PIN entry structure input type. No entries have been changed.",
            ),
            2190: (
                "There is an error in the weak PIN entry structure input header version. No entries have been changed.",
            ),
            2191: (
                "There is an error in the weak PIN entry structure input header count. No entries have been changed.",
            ),
            2193: (
                "The presented PIN is a duplicate of one already in the table. No entries have been changed.",
            ),
            2194: (
                "Invalid or out of range passphrase length.",
            ),
            2197: (
                "The presented PIN failed verification. No processing has been done.",
            ),
            2198: (
                "The presented CMAC failed verification. No processing has been done.",
            ),
            2199: (
                "A variable-length symmetric key-token (version X'05') contains invalid key-usage field data.",
            ),
            2201: (
                "A variable-length symmetric key-token (version X'05') contains invalid key-management field data.",
            ),
            2203: (
                "RSA engine check-sum error.",
            ),
            2227: (
                "The triple-length key cannot be imported because the TR-31 key block does not include a CCA control vector.",
            ),
            2229: (
                "The type of the specified key is not valid because a diversified key-generating key must be used to derive this symmetric key type.",
            ),
            2231: (
                "There was a problem converting or formatting the PAN.",
            ),
            2232: (
                "There was a problem converting or formatting the cardholder name.",
            ),
            2233: (
                "There was a problem converting or formatting the track 1 data.",
            ),
            2235: (
                "There was a problem converting or formatting the track 2 data.",
            ),
            2237: (
                "Data presented for VFPE processing is not in VFPE enciphered.",
            ),
            2238: (
                "An incorrect PIN profile is specified.",
            ),
            2239: (
                "The check digit compliance indicator/keyword denotes compliant check digit but the input PAN does not have a compliant check digit.",
            ),
            2243: (
                "The key-derivation section is missing or the attributes in the key-derivation section do not match those in the output skeleton token as defined by AES-DUKPT derivation data.",
            ),
            2245: (
                "A randomly generated source key is required, but the pedigree of the source key indicates that the key is not randomly generated.",
            ),
            2246: (
                "A required tag-length-value (TLV) object is not present in the IBM Extended Associated Data (IEAD) section.",
            ),
            2247: (
                "Error in PSS signature salt length.",
            ),
            2254: (
                "The SECURE LOG SRDI that is stored on the coprocessor is full, no auditable actions are allowed.",
            ),
            2261: (
                "Cannot adjust time twice within a 24 hour period.",
            ),
            2262: (
                "Last adjustment time was > 24 hours; however, the amount of time to be adjusted is > 1 second.",
            ),
            2298: (
                "Hash function has a digest size less than the bit length of the curve.",
            ),
            2401: (
                "Tried to enter compliance mode or change compliance state but not in correct starting mode.",
            ),
            2402: (
                "Tried to use a compliance-tagged key but domain is not in active compliance mode.",
            ),
            2403: (
                "This verb is not allowed to use compliance-tagged key tokens.",
            ),
            2405: (
                "This service of this verb is not allowed to use with compliance-tagged tokens.",
            ),
            2406: (
                "An attempt was made to use compliant-tagged tokens with non-compliant-tagged tokens or with legacy compliant-tagged tokens. All compliant-tagged tokens must be the same level.",
                "Either use all compliant-tagged tokens or all non-compliant-tagged tokens to the latest level.",
            ),
            2407: (
                "This service has been asked to generate or derive a comp-tagged key, or to check a key token for compliance but the requested/given strength is too weak for the configured compliance mode.",
            ),
            2409: (
                "This service has been asked to generate or derive a comp-tagged key, or to check a key token for compliance, but the requested/given key type or usage is non-compliant.",
            ),
            2410: (
                "This service has been asked to use or create a Key-Encrypting-Key (KEK) that has had the NOCV flag set in token flags. Since the flags are not part of the CV it is possible the flag was added on the host side. These types of KEKs are non-compliant.",
            ),
            2411: (
                "The requested service is only available when the domain is configured in migration mode, and the domain is not in this mode now.",
            ),
            2413: (
                "The service has been asked to use a comp-tagged KEK to wrap or unwrap an external token but the external token key type is non-compliant.",
            ),
            2414: (
                "The service for comp-tag migration checking or migration tagging has been given a token type that is not currently supported.",
            ),
            2415: (
                "The service to enter imprint or compliance mode cannot complete because card cannot support compliance mode.",
            ),
            2417: (
                "A token passed in identifies a KDF for a compliance mode that is not the current compliance mode.",
            ),
            2418: (
                "A token passed into KTR2 already has a comp-tag in CV.",
            ),
            2419: (
                "Failed to retrieve the compliance mode flags.",
            ),
            2421: (
                "A CCA service was requested without the COMPMODE keyword for a domain that is in imprint mode or a compliance mode that requires the COMPMODE keyword.",
            ),
            2422: (
                "A CCA service was passed the COMPMODE keyword but the domain is not in imprint mode or a compliance mode.",
            ),
            2423: (
                "Cannot change default imprint mode role (INITADDM) while in imprint mode.",
            ),
            2425: (
                "INIT-AC inactive and activate COMPMODE keywords were different",
            ),
            2426: (
                "Action is restricted because domain is in imprint mode. For example the default domain-scope profile cannot update DFLTxxxx or its own role. Also, the CSNBMKP and CSNDPIM verbs cannot be used in imprint mode.",
            ),
            2427: (
                "A compliance-tagged token was passed to the HSM while the HSM was in Migration Mode. Compliance-tag token services are not available in migration mode.",
            ),
            2429: (
                "A CCA service was requested that, because of the compliance state of the domain, requires a signed command from a TKE. However, the request was not received in this format.",
            ),
            2430: (
                "A CCA service has been passed a key part to be ether the first key part or to be combined with previously passed key parts for either the Master Key or an operational key that is being built from parts. The key part passed may be long enough but is not valid because it matches (bit for bit) one of the known weak key patterns (such as all 0x00 bytes) for that key algorithm.",
            ),
            2431: (
                "A CCA service has been passed an external token with the COMP-TAG marker or bit set. This is bit 58 in the Control Vector (CV) for DES tokens.",
            ),
            2433: (
                "The attempted operation must be performed as a dual-control operation when the target domain is in compliance or imprint mode. The command was single control.",
            ),
            2434: (
                "The ACP list associated with the role-to-load violates the PCI-HSM complimentary ACP restrictions.",
            ),
            2435: (
                "The ACP quorum rules are not satisfied.",
            ),
            2437: (
                "Provided PIN block formats do not match in compliance mode.",
            ),
            2438: (
                "An attempt was made to update DFLTxxxx role with one or more ACPs from the complimentary ACP list while in imprint- or compliance-mode.",
            ),
            2439: (
                "An attempt to load DFLTxxxx from a card-scope domain when 'xxxx' is a domain-scope domain.",
            ),
            2510: (
                "The input tweak length for format FF2 or FF2.1 exceeds the maximum allowed, as calculated by (length * log2(tweak_alphabet_length)) <= (15 - 2) * 8.",
            ),
            2511: (
                "The input plaintext or ciphertext length for format FF2 or FF2.1 exceeds the maximum allowed, as calculated by (length * log2(alphabet_length)) / 2 <= (15 - 1) * 8.",
            ),
            2513: (
                "Invalid duplicate data provided to an API, such as when the alphabet provided to an FF2 service has duplicate characters.",
            ),
            2514: (
                "An error was found in the ISO PIN block format. The specific error is not noted. This error will only be returned if ACP X'039F' is enabled.",
            ),
            2849: (
                "A verb data keyword specifies a keyword that is not valid.",
            ),
            2850: (
                "A verb data keyword combination is not valid.",
            ),
            2851: (
                "The verb data length value is not valid.",
            ),
            2945: (
                "A required verb data keyword is not found.",
            ),
            2946: (
                "Initialization vector length is too small, or text length exceeds maximum.",
            ),
            2947: (
                "The computed authentication tag does not match the data identified by the key_parms parameter.",
            ),
            3001: (
                "The RSA-OAEP block contains a PIN block and the verb did not request PINBLOCK processing.",
            ),
            3006: (
                "Specific to IBM Z - UDX not authorized.",
            ),
            3009: (
                "Specific to IBM Z - UDX Password hash mismatch.",
            ),
            3011: (
                "CRT component is too long.",
            ),
            3013: (
                "The longitudinal redundancy check (LRC) checksum in the AES key-token does not match the LRC checksum of the clear key.",
            ),
            3047: (
                "Use of clear key provided is not allowed. A secure key is required.",
            ),
            3055: (
                "The CPRB domain does not match the PCB domain.",
            ),
            3057: (
                "Missing parameter in TLV.",
            ),
            3059: (
                "Session failure.",
            ),
            6000: (
                "The specified device is already allocated.",
            ),
            6001: (
                "No device is allocated.",
            ),
            6002: (
                "The specified device does not exist.",
            ),
            6003: (
                "The specified device is an improper type.",
            ),
            6013: (
                "The length of the cryptographic resource name is not valid.",
            ),
            6014: (
                "The cryptographic resource name is not valid or does not refer to a coprocessor that is available in the system.",
            ),
            6015: (
                "An ECC curve type is invalid, its usage is inconsistent, or the required hardware level is not available.",
            ),
            6017: (
                "Curve size p is invalid or its usage is inconsistent.",
            ),
            6018: (
                "Error returned from CLiC module.",
            ),
            6019: (
                "Domain already allocated.",
            ),
            6021: (
                "No domain has been allocated.",
            ),
            6022: (
                "A group does not exist.",
            ),
            6023: (
                "User does not belong to required group.",
            ),
            10028: (
                "One of the following occurred:",
                "    Either the left half of the control vector in a key identifier (internal or external) equates to a key type that is not valid for the service you are using or the value is not that of any control vector. For example, an exporter key-encrypting key is not valid in the key import callable service.",
                "    An attempt was made to export a non-DATA key to CPACF protected key format. The key may be a CIPHER key which does not have the XPRTCPAC bit set in the control vector.",
                "User action:",
                "Determine which key identifier is in error and use the key identifier that is required by the service. If this is an attempt to export a key to CPACF protected key format, either use a DATA key or a CIPHER key with the XPRTCPAC bit set in the control vector.",
            ),
            10036: (
                "Specific to IBM Z - Invalid control vectors (L-R) in key token supplied.",
            ),
            10044: (
                "Specific to IBM Z - The key_type parameter and the CV key type for the supplied key token do not match.",
            ),
            10056: (
                "Specific to IBM Z - The key_type parameter contains TOKEN, which is invalid for the requested operation.",
            ),
            10124: (
                "Specific to IBM Z - The key id cannot be exported because of prohibit export restriction in the token supplied.",
            ),
            10128: (
                "Specific to IBM Z - The NOCV-KEK or CV-KEK rule_array keyword does not apply in this case. Check other keywords passed.",
            ),
            10129: (
                "Specific to IBM Z - The NOCV-KEK importer key or transport key is not allowed in the Remote Key Export operation requested.",
            )
        },
        12: {
            97: (
                "File space in key storage is insufficient to complete the operation.",
            ),
            196: (
                "The device driver, the security server, or the directory server is not installed or is not active. File permissions are not valid for your application.",
            ),
            197: (
                "There is a key-storage file I/O error or the file is not found.",
            ),
            206: (
                "The key-storage file is not valid or the master-key verification failed. There is an unlikely, but possible, synchronization problem with the Master Key Process verb.",
            ),
            207: (
                "The verification method flags in the profile are not valid.",
            ),
            319: (
                "Passed to the CVV Verify or CVV Generate verb, the Verb Unique data corresponds to a PAN length of 19, but the overall length is wrong. This indicates that the host code is out of date.",
            ),
            324: (
                "There is insufficient memory available to process your request, either memory in the host computer or memory inside the coprocessor including the flash EPROM used to store keys, profiles, and other application data.",
            ),
            338: (
                "This cryptographic hardware device driver is not installed or is not responding, or the CCA code is not loaded in the coprocessor.",
            ),
            764: (
                "The master keys are not loaded and, therefore, a key cannot be recovered or enciphered.",
            ),
            768: (
                "One or more paths for key-storage directory operations are improperly specified.",
            ),
            769: (
                "An internal error has occurred with the parameters to a cryptographic algorithm.",
            ),
            2007: (
                "The change type in the Pending Change Buffer is not recognized.",
            ),
            2015: (
                "The domain stored in the domain mask does not match what was included as the domain in the CPRB.",
            ),
            2017: (
                "The operation is attempting to call 'SET' for a master key, but has passed an invalid Master Key Verification Pattern.",
            ),
            2021: (
                "The card is disabled in the TKE path.",
            ),
            2037: (
                "Invalid domain specified.",
            ),
            2043: (
                "In the course of TKE communication through the host library to an adapter, a particular requested OA certificate was not found. A small number of these errors are typical when communication with a TKE is initiated.",
            ),
            2045: (
                "The CCA software is unable to claim a semaphore. The system might be short of resources.",
            ),
            2046: (
                "The CCA software is unable to list all the keys. The limit of 500,000 keys might have been reached.",
            ),
            2049: (
                "An error occurred while unlocking a semaphore in order to release the exclusive control of that semaphore.",
            ),
            2073: (
                "TKE command received when TKE disabled.",
            ),
            2074: (
                "Invalid version found in Connectivity Programming Request/Reply Block (CPRB).",
            ),
            2101: (
                "Invalid AES flags in the function control vector (FCV).",
            ),
            2117: (
                "Thread specific CLiC objects are not in proper state.",
            ),
            2155: (
                "The length of the fully qualified dataset name exceeds the maximum size that the verb can process.",
            ),
            2225: (
                "An internal outbound authentication manager error occurred, or the OA manager is disabled.",
            ),
            3046: (
                "The wrong usage was attempted in an operation with a retained key.",
            ),
            2242: (
                "The reply message block is too long for the host buffer.",
            ),
            3550: (
                "The Dilithium operation failed because the minimum hardware requirement was not met.",
            )
        },
        16: {
            99: (
                "An unrecoverable error occurred in the security server; contact the IBM support center.",
            ),
            336: (
                "An error occurred in a cryptographic hardware or software component.",
            ),
            337: (
                "A device software error occurred.",
            ),
            339: (
                "A system error occurred in the interprocess communication routine.",
            ),
            444: (
                "The verb-unique-data has an invalid length.",
            ),
            556: (
                "The request parameter block failed consistency checking.",
            ),
            708: (
                "The cryptographic engine is returning inconsistent data.",
            ),
            709: (
                "Cryptographic engine internal error. Could not access the master-key data.",
            ),
            710: (
                "An unrecoverable error occurred while attempting to update master-key data items.",
            ),
            712: (
                "An unexpected error occurred in the master-key manager.",
            ),
            800: (
                "A problem occurred in internal SHA operation processing.",
            ),
            2022: (
                "TKE-related internal file open error.",
            ),
            2047: (
                "Unable to transfer request data from host to coprocessor.",
            ),
            2057: (
                "Internal error: memory allocation failure.",
            ),
            2058: (
                "Internal error: unexpected return code from OAEP routines.",
            ),
            2059: (
                "Internal error: OAEP SHA-1 request failure.",
            ),
            2061: (
                "Internal error in Symmetric Key Import, OAEP-decode: enciphered message too long.",
            ),
            2063: (
                "The reply message too long for the requestor's command reply buffer.",
            ),
            2107: (
                "Internal files failed verification check when loading from encrypted storage.",
            ),
            2150: (
                "An error occurred while attempting to open or save the DECTABLE SRDI that is stored on the coprocessor.",
            ),
            2195: (
                "An error occurred reading the weak PIN file stored on the coprocessor.",
            )
        }
    },
    'zos': {
        0: {
            0: (
                "The call to the ICSF callable service was successfully processed. No error was encountered.",
                "User action: None.",
            ),
            2: (
                "The call to the ICSF callable service was successfully processed. A minor error was detected. A key used in the service did not have odd parity. This key could be one provided by you as a parameter or be a key (perhaps one of many keys) that was retrieved from the in-storage CKDS.",
                "User action: Refer to the reason code obtained when the key passed to this service was transformed into operational form using clear key import, multiple clear key import, key import, secure key import, or multiple secure key import callable services. Check if any of the services prepared an even parity key. If one of these services reported an even parity key, you need to know which key is affected. If none of these services identified an even parity key, then the even parity key detected was found on the CKDS. Report this to your administrator.",
                "REASONCODES: ICSF 4 (4)",
            ),
            4: (
                "The call to the ICSF callable service was successfully processed. A minor error was detected. A key used in the service did not have odd parity. This key could be one provided by you as a parameter or be a key (perhaps one of many keys) that was retrieved from the in-storage CKDS.",
                "User action: Refer to the reason code obtained when the key passed to this service was transformed into operational form using clear key import, multiple clear key import, key import, secure key import, or multiple secure key import callable services. Check if any of the services prepared an even parity key. If one of these services reported an even parity key, you need to know which key is affected. If none of these services identified an even parity key, then the even parity key detected was found on the CKDS. Report this to your administrator.",
                "REASONCODES:TSS 2 (2)",
            ),
            8: (
                "The CKDS key record read callable service attempted to read a NULL key record. The returned key token contains a null token.",
                "User action: None required.",
            ),
            2146: (
                "The call to the callable service was successfully processed. A key was wrapped by a weaker key. This reason code is returned when either the \"Warn when weak wrap - Transport keys\" or \"Warn when weak wrap - Master keys\" access control point is enabled.",
                "User action: None required. If you wish to prohibit weak key wrapping, enable the access control point \"Prohibit weak wrapping - Transport keys\" and \"Prohibit weak wrapping - Master keys\" access control points using the TKE workstation.",
            ),
            2173: (
                "The call to the callable service was successfully processed. The key token format was already payload version 1 (fixed-length).",
            ),
            3010: (
                "The call to CSFIQF was successful. Additionally, the coprocessor adapter is disabled by TKE.",
            ),
            3365: (
                "KDS multi-purpose service completed and there are informational messages logged.",
            ),
            3423: (
                "The key retrieved from the CKDS should not be used to encrypt data.",
                "CSNBKRR2 was called with the label of an archived key. The key is a symmetric data-encrypting key. The PROTKEY rule array keyword was specified. The CSF.KDS.KEY.ARCHIVE.DATA.DECRYPT control is enabled.",
                "User action: Do not use this key to encrypt data. Contact your ICSF administrator for guidance.",
            ),
            3500: (
                "The Options Data Set Refresh function completed. All changes were successful.",
            ),
            3553: (
                "This is a combination reason code. Some number of the provided MAC values did not match; however, M of N did match. Also, the key token has been reenciphered.",
                "User action: Investigate the MAC values that failed verification.",
            ),
            3997: (
                "Clear RSA CRT private key material passed to a callable service had prime p less than prime q which is in violation of the standard. The key parts have been corrected by swapping primes p and q, swapping CRT exponents dp and dq, and recalculating qInv = q^-1 mod p (called U in IBM Common Cryptographic Architecture (CCA) publications).",
            ),
            10000: (
                "The call to the callable service was successfully processed. The keys in one or more key identifiers have been reenciphered from encipherment under the old master key to encipherment under the current master key.",
                "User action: If you obtained your operational token from a file, replace the token in the file with the token just returned from ICSF.",
                "Management of internal tokens is a user responsibility. Consider the possible case where the token for this call was fetched from a file, and where this reason code is ignored. For the next invocation of the service, the token will be fetched from the file again, and the service will give this reason code again. If this continues until the master key is changed again, then the next use of the internal token will fail.",
            ),
            10001: (
                "The call to the callable service was successfully processed. The keys in one or more key identifiers were encrypted under the old master key. The callable service was unable to reencipher the key.",
            ),
            10003: (
                "The call to the callable service was successfully processed. Weak key used. The strength of the KEK key is less than the strength of the key to be wrapped.",
                "If Access Control Point 'Prohibit weak wrapping - Transport keys' is not enabled, this informational Reason Code will be returned. If Access Control Point 'Prohibit weak wrapping - Transport keys' is enabled you will receive an error from the callable service.",
                "User action: None.",
            ),
            10005: (
                "During X.509 certificate processing, the certificate revocation list was expired.",
                "User action: Obtain an up-to-date certificate revocation list for processing.",
            ),
            10006: (
                "During X.509 certificate processing, the KRD credential was expired.",
                "User action: Obtain an up-to-date KRD credential for processing.",
            ),
            10007: (
                "Some number of the provided MAC values did not match; however, M of N did match.",
                "User action: Investigate the MAC values that failed verification.",
            )
        },
        4: {
            1: (
                "The verification test failed.",
                "REASONCODES: This reason code also corresponds to these ICSF reason codes: FA0 (4000), 1F40 (8000), 1F44 (8004), 2328 (9000), 232C (9004), 2AF8 (11000), or 36B8 (14008).",
            ),
            19: (
                "This is a combination reason code value. The call to the Encrypted PIN verify (PINVER) callable service was successfully processed. However, the trial PIN that was supplied does not match the PIN in the PIN block.",
                "User action: The PIN is incorrect. If you expected the reason code to be zero, check that you are using the correct key.",
                "REASONCODES: ICSF BD4 (3028)",
            ),
            20: (
                "The input text length was odd rather than even. The right nibble of the last byte is padded with X'00'.",
                "User action: None",
                "REASONCODES: ICSF 7D0 (2000)",
            ),
            166: (
                "The control vector is not valid because of parity bits, anti-variant bits, inconsistent KEK bits, or because bits 59 to 62 are not zero.",
            ),
            179: (
                "The control vector keywords that are in the rule array are ignored.",
            ),
            215: (
                "PTR2AUTH usage of the authentication key is being ignored because the Encrypted PIN Translate2 - Permit ISO-4 to ISO-4 PTR2AUTH access control is not enabled in the domain role.",
                "User action: Contact your ICSF administrator to enable the access control.",
            ),
            429: (
                "The digital signature verify ICSF callable service completed successfully but the supplied digital signature failed verification.",
                "User action: None",
                "REASONCODES: ICSF 2AF8 (11000)",
            ),
            2000: (
                "The input text length was odd rather than even. The right nibble of the last byte is padded with X'00'.",
                "User action: None",
                "REASONCODES: TSS 14 (20)",
            ),
            2078: (
                "The call to CKDS Key Record Read was successful. The key label exists in the CKDS. The key label contains a clear DES or AES key token and is not returned to the caller.",
            ),
            2162: (
                "A weak master key was detected when the final key part was loaded for the DES or RSA master key. A key is weak if any of the three parts are the same as another part. For example, when the first and third key parts are the same, the key is weak (effectively a double-length key).",
                "User action: Create new key values for the new master key and retry master key entry.",
            ),
            3002: (
                "The call to the CVV Verify callable service was successfully processed. However, the trial CVV that was supplied does not match the generated CVV. In addition, a key in the key identifier has been reenciphered.",
                "REASONCODES: See reason code 4000 (return code 4) for more details about the incorrect CVV. See reason code 10000 (return code 0) for more details about the key reencipherment.",
            ),
            3017: (
                "The call to create a list of information completed successfully, however the storage supplied for the list was insufficient to hold the complete list.",
            ),
            3018: (
                "Input hash value could not be verified.",
            ),
            3028: (
                "The call to the Encrypted PIN verify (PINVER) callable service was successfully processed. However, the trial PIN that was supplied does not match the PIN in the PIN block.",
                "User action: The PIN is incorrect. If you expected the reason code to be zero, check that you are using the correct key.",
                "REASONCODES: TSS 13 (19)",
            ),
            3032: (
                "This is a combination reason code value. The call to the Encrypted PIN verify (PINVER) callable service was successfully processed. However, the trial PIN that was supplied does not match the PIN in the PIN block.",
                "In addition, a key in a key identifier token has been reenciphered.",
                "REASONCODES: See reason code 3028 (return code 4) for more detail about the incorrect PIN. See reason code 10000 (return code 0) for more detail about the key reencipherment.",
            ),
            3068: (
                "The verification pattern of an encrypted CPACF key block does not match the current wrapping key's verification pattern.",
            ),
            3300: (
                "The KDS list service found no records that matched the label filter and search criteria specified.",
            ),
            3301: (
                "The key data set specified for the KDS list, KDS metadata read, and KDS metadata write services is empty or was not specified in the options data set.",
            ),
            3302: (
                "The key data set selected for the KDS list, KDS metadata read, and KDS metadata write services is not in KDSR format. Either a rule array keyword, the search criteria, or metadata specified requires the data set to be in KDSR format.",
                "User action: Convert the key data set to KDSR format or restrict the metadata to the type supported by your key data set format.",
            ),
            3303: (
                "The call to the KDS list service completed successfully, but the storage supplied for the list was insufficient to hold the complete list. The label count parameter contains the number of labels returned and the output list length parameter contains the number of bytes in the output area that are filled in.",
                "User action: Call the service again to get more entries for the list. The continuation_area parameter contains the information necessary to continue the search where this request left off. Pass the continuation_area parameter unchanged on subsequent requests.",
            ),
            3307: (
                "The KDS metadata write service attempted to archive a record that is already archived.",
            ),
            3316: (
                "The PKCS #11 token handle specified for the KDS list service is for a token that does not have objects in the TKDS.",
            ),
            3328: (
                "The KDS metadata write service was not able to set the archive flag because either the prohibit archive flag is enabled or was not able to set the prohibit archive flag because the archive flag is enabled.",
            ),
            3329: (
                "The KDS metadata write service was supplied a date that is out of range:",
                "    The key material validity end date may not be in the past.",
                "    The key material validity start date may not be after the end date.",
                "    The last referenced date may not be in the future.",
                "User action: Correct the date specified and rerun the request.",
            ),
            3341: (
                "The KDS metadata write service attempted to recall a record that is not archived.",
            ),
            3346: (
                "The KDS metadata write service processed all the records in the label list and the processing of one or more records did not complete successfully.",
                "User action: Check the results list and determine which records failed.",
            ),
            3363: (
                "KDS multi-purpose service completed, but there are messages logged that require attention.",
            ),
            3366: (
                "KDS multi-purpose service completed and there are informational messages logged.",
            ),
            3393: (
                "The ARQC could not be verified.",
                "User action: Ensure that the correct cryptogram information was passed, the correct key mode was specified, and the correct issuer master key was used.",
            ),
            3397: (
                "Failure to verify the data authentication code.",
                "User action: Ensure that the correct PAN and PAN sequence number were passed and the correct issuer master key was used.",
            ),
            3398: (
                "Failure to verify the dynamic number.",
                "User action: Ensure that the correct ATC was passed and the correct issuer master key was used.",
            ),
            3501: (
                "The Options Data Set Refresh function completed. No changes were detected.",
            ),
            3503: (
                "The Options Data Set Refresh function completed. Some changes were made.",
                "User action: Check the ICSF joblog.",
            ),
            3541: (
                "An attempt was made to compliant-check or compliant-tag a key token. The key token already has the compliant tag.",
                "User action: None.",
            ),
            4000: (
                "The CVV did not verify.",
                "User action: Regenerate the CVV.",
                "REASONCODES: TSS 1 (1)",
            ),
            4004: (
                "Rewrapping is not allowed for one or more keys.",
            ),
            5007: (
                "The PAN presented as input to the Card Number Update2 verb was different from the PAN in the clear PBF-0 block.",
            ),
            8000: (
                "The call to the MAC verification (MACVER) callable service was successfully processed. However, the trial MAC that you supplied does not match that of the message text.",
                "User action: The message text may have been modified, such that its contents cannot be trusted. If you expected the reason code to be zero, check that you are using the correct key. Check that all segments of the message were presented and in the correct sequence. Also check that the trial MAC corresponds to the message being authenticated.",
                "REASONCODES: TSS 1 (1)",
            ),
            8004: (
                "This is a combination reason code value. The call to the MAC verification (MACVER) or Multi-Mac Scheme callable service was successfully processed. However, the MAC that you supplied does not match that of the message text.",
                "In addition, a key in a key identifier token has been reenciphered.",
                "User action: See reason code 8000 (return code 4) for more detail about the incorrect MAC. See reason code 10000 (return code 0) for more detail about the key reencipherment.",
                "REASONCODES: TSS 1 (1)",
            ),
            9000: (
                "The call to the key test service processed successfully, but the key test pattern was not verified.",
                "User action: Investigate why the key failed. When determining this, you can reinstall or regenerate the key.",
                "REASONCODES: TSS 1 (1)",
            ),
            9004: (
                "This is a combination reason code value. The call to the key test service processed successfully, but the key test pattern was not verified. Also, the key token has been reenciphered.",
                "User action: Investigate why the key failed. When determining this, you can reinstall or regenerate the key.",
                "REASONCODES: TSS 1 (1)",
            ),
            11000: (
                "The digital signature verify ICSF callable service completed, but the supplied digital signature failed verification or an input wrapped PKCS #11 object failed validation.",
                "User action: None required.",
                "REASONCODES: TSS 1AD (429)",
            ),
            14008: (
                "The PKDS record failed the authentication test.",
                "User action: The record has changed since ICSF wrote it to the PKDS. The user action is application dependent.",
                "REASONCODES: TSS 1 (1)",
            ),
            36112: (
                "CKDS conversion completed successfully, but some tokens could not be rewrapped. For more information about the key tokens that could not be rewrapped, see the CSFM729I message or messages.",
            )
        },
        8: {
            12: (
                "A key identifier was passed to a service or token. It is checked in detail to ensure that it is a valid token, and that the fields within it are valid values. There is a token validation value (TVV) in the token, which is a non-cryptographic value. This value was again computed from the rest of the token, and compared to the stored TVV. If these two values are not the same, this reason code is returned.",
                "User action: The contents of the token have been altered because it was created by ICSF or TSS. Review your program to see how this could have been caused.",
            ),
            22: (
                "The ID number in the request field is not valid. The PAN data or transaction information is incorrect.",
            ),
            23: (
                "Offset length not correct for data to be inserted.",
            ),
            24: (
                "A key identifier was passed to a service. The master key verification pattern in the token shows that the key was created with a master key that is neither the current master key nor the old master key. Therefore, it cannot be reenciphered to the current master key.",
                "User action: Re-import the key from its importable form (if you have it in this form), or repeat the process you used to create the operational key form. If you cannot do one of these, you cannot repeat any previous cryptographic process that you performed with this token.",
                "REASONCODES: ICSF 2714 (10004)",
            ),
            25: (
                "A length parameter has an incorrect value. The value in the length parameter could have been zero (when a positive value was required) or a negative value. If the supplied value was positive, it could have been larger than your installation's defined maximum, or for MDC generation with no padding, it could have been less than 16 or not an even multiple of 8.",
                "User action: Check the length you specified. If necessary, check your installation's maximum length with your ICSF administrator. Correct the error.",
            ),
            29: (
                "A key identifier was passed to a service or token. It is checked in detail to ensure that it is a valid token, and that the fields within it are valid values. There is a token validation value (TVV) in the token, which is a non-cryptographic value. This value was again computed from the rest of the token, and compared to the stored TVV. If these two values are not the same, this reason code is returned.",
                "User action: The contents of the token have been altered because it was created by ICSF or TSS. Review your program to see how this could have been caused.",
                "REASONCODES: ICSF 2710 (10000)",
            ),
            30: (
                "A key label was supplied for a key identifier parameter. This label is the label of a key in the in-storage CKDS or PKDS. A key record with that label (and the specific type if required by the ICSF callable service) could not be found. For a retained key label, this error code is also returned if the key is not found in the CCA coprocessor specified in the PKDS record.",
                "User action: Check with your administrator if you believe that this key should be in the in-storage CKDS or the PKDS. The administrator may be able to bring it into storage. If this key cannot be in storage, use a different label.",
                "REASONCODES: ICSF 271C (10012)",
            ),
            31: (
                "The control vector did not specify a DATA key. The key may be a CIPHER key which does not have the XPRTCPAC bit set in the control vector.",
                "REASONCODES: ICSF 272C (10028)",
            ),
            32: (
                "You called the CKDS key record create callable service, but the key_label parameter syntax was incorrect.",
                "User action: Correct key_label syntax.",
                "REASONCODES: ICSF 3EA0 (16032)",
            ),
            33: (
                "The rule_array parameter contents or a parameter value is not correct.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the correct value.",
                "REASONCODES: ICSF 7E0 (2016)",
            ),
            34: (
                "A rule_array keyword combination is not valid or a keyword is specified that conflicts with another parameter.",
                "REASONCODES: ICSF 7E0 (2016)",
            ),
            35: (
                "The rule_array_count parameter contains a number that is not valid.",
                "User action: Refer to the rule_array_count parameter described in this publication under the appropriate callable service for the correct value.",
                "REASONCODES: ICSF 7DC (2012)",
            ),
            39: (
                "A control vector violation occurred.",
                "REASONCODES: This reason code also corresponds to these ICSF reason codes: 272C (10028), 2730 (10032), 2734 (10036), 2744 (10052), 2768 (10088), 278C (10124), 3E90 (16016), 2724 (10020).",
            ),
            40: (
                "The service code does not contain numerical data.",
                "REASONCODES: ICSF BE0 (3040)",
            ),
            41: (
                "The key_form parameter is neither IM nor OP. Most constants, these included, can be supplied in lowercase or uppercase. Note that this parameter is 4 bytes long, so the value IM or OP is not valid. They must be padded on the right with blanks.",
                "User action: Review the value provided and change it to IM or OP, as required.",
            ),
            42: (
                "The expiration date is not numeric (X'F0' through X'F9'). The parameter must be character representations of numerics or hexadecimal data.",
                "User action: Review the numeric parameters or fields required in the service that you called and change to the format and values required.",
                "REASONCODES: ICSF BE0 (3040)",
            ),
            43: (
                "The value specified for the key_length parameter of the key generate callable service is not valid.",
                "User action: Review the value provided and change it as appropriate.",
                "REASONCODES: See also the ICSF reason code 80C (2060) or 2710 (10000) for additional information.",
            ),
            44: (
                "The CKDS key record create callable service requires that the key created not already exist in the CKDS. A key of the same label was found.",
                "User action: Make sure the application specifies the correct label. If the label is correct, contact your ICSF security administrator or system programmer.",
            ),
            45: (
                "An input character is not in the code table.",
                "User action: Correct the code table or the source text.",
            ),
            47: (
                "A source key token is unusable because it contains data that is not valid or undefined. This could be due to a incorrect combination of fields, such as having a NOCV key-encryption key with a non-default control vector.",
                "REASONCODES: This reason code also corresponds to these ICSF reason codes: 83C (2108), 2754 (10068), 2758 (10072), 275C (10076), 2AFC (11004), 2B04 (11012), 2B08 (11016), 2B10 (11024). See those reason codes for additional information.",
            ),
            48: (
                "One or more keys has a master key verification pattern that is not valid.",
                "This reason code also corresponds to these ICSF reason codes: 2714 (10004) and 2B0C (11020). See those reason codes for additional information.",
            ),
            49: (
                "Key identifiers contain a version number. The version number in a supplied key identifier (internal or external) is inconsistent with one or more fields in the key identifier, making the key identifier unusable.",
                "User action: Use a token containing the required version number.",
                "REASONCODES: ICSF 2738 (10040)",
            ),
            51: (
                "The encipher and decipher callable services sometime require text (plaintext or ciphertext) to have a length that is an exact multiple of 8 bytes. Padding schemes always create ciphertext with a length that is an exact multiple of 8. If you want to decipher ciphertext that was produced by a padding scheme, and the text length is not an exact multiple of 8, then an error has occurred. The CBC mode of enciphering requires a text length that is an exact multiple of 8.",
                "The value that the text_length parameter specifies is not a multiple of the cryptographic algorithm block length.",
                "User action: Review the requirements of the service you are using. Either adjust the text you are processing or use another process rule.",
            ),
            56: (
                "The master key verification pattern in the OCV is not valid.",
            ),
            61: (
                "The keyword supplied with the key_type parameter is not valid.",
                "REASONCODES: This reason code also corresponds to these ICSF reason codes: 2720 (10016), 2740 (10048), 274C (10060). See those reason codes for additional information.",
            ),
            62: (
                "The source key was not found.",
                "REASONCODES: ICSF 271C (10012)",
            ),
            63: (
                "This check is based on the first byte in the key identifier parameter. The key identifier provided is either an internal token, where an external or null token was required; or an external or null token, where an internal token was required. The token provided may be none of these, and, therefore, the parameter is not a key identifier at all. Another cause is specifying a key_type of IMP-PKA for a key in importable form.",
                "User action: Check the type of key identifier required and review what you have provided. Also check that your parameters are in the required sequence.",
                "REASONCODES: ICSF 7F8 (2040)",
            ),
            64: (
                "The supplied key is not permitted to perform the requested operation. Probable causes are:",
                "    The private key can be used only for digital signature. Key management services are disallowed.",
                "    This service requires an RSA private key that is translatable. The specified key may not be used in the PKA Key Translate callable service.",
                "    The private key restricts the signature formatting rule it can be used with and the rule array indicates a different formatting rule.",
                "User action: Supply a private key with the correct key usage for the service.",
            ),
            65: (
                "The RSA public or private key specified a modulus length that is incorrect for this service.",
                "User action: Re-invoke the service with an RSA key with the proper modulus length.",
                "REASONCODES: ICSF 2B18 (11032) and 2B58 (11096)",
            ),
            66: (
                "The recovered encryption block was not a valid PKCS-1.2 or zero-pad format. (The format is verified according to the recovery method specified in the rule-array.) If the recovery method specified was PKCS-1.2, refer to PKCS-1.2 for the possible error in parsing the encryption block.",
                "User action: Ensure that the parameters passed to CSNDSYI or CSNFSYI are correct. Possible causes for this error are incorrect values for the RSA private key or incorrect values in the RSA_enciphered_key parameter, which must be formatted according to PKCS-1.2 or zero-pad rules when created.",
                "REASONCODES: ICSF 2B20 (11040)",
            ),
            67: (
                "DES or RSA encryption failed.",
            ),
            68: (
                "DES or RSA decryption failed.",
            ),
            70: (
                "Identifier tag for optional block is invalid: conflicts with IBM reserved tag, is a duplicate to a tag already found, is bad in combination with a tag already found when parsing a section of optional blocks, or is otherwise invalid.",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            72: (
                "The value specified for length parameter for a key token, key, or text field is not valid.",
                "User action: Correct the appropriate length field parameter.",
                "REASONCODES: This reason code also corresponds to these ICSF reason codes: 2AF8 (11000) and 2B14 (11028). See those reason codes for additional information.",
            ),
            90: (
                "Access is denied for this request. This is due to an access control point in the domain role either being disabled or an access control point being enabled that restricts the use of a parameter such as a rule array keyword.",
                "User action: Check the reference information for the callable service to determine which access control points are involved in the request. Contact the ICSF administrator to determine if the access control points are in the correct state. The access control points can be enabled/disabled using the TKE workstation.",
            ),
            100: (
                "A request was made to the Clear PIN generate or Encrypted PIN verify callable service, and the PIN_length parameter has a value outside the valid range. The valid range is from 4 to 16, inclusive.",
                "User action: Correct the value in the PIN_length parameter to be within the valid range from 4 to 16.",
                "REASONCODES: ICSF BBC (3004)",
            ),
            101: (
                "A request was made to the Clear PIN generate callable service, and the PIN_check_length parameter has a value outside the valid range. The valid range is from 4 to 16, inclusive.",
                "User action: Correct the value in the PIN_check_length parameter to be within the valid range from 4 to 16.",
                "REASONCODES: ICSF BC0 (3008)",
            ),
            102: (
                "The value of the decimalization table is not valid.",
                "REASONCODES: ICSF BE0 (3040)",
            ),
            103: (
                "The value of the validation data is not valid.",
                "REASONCODES: ICSF BE0 (3040)",
            ),
            104: (
                "The value of the customer-selected PIN is not valid or the PIN length does not match the value specified.",
                "REASONCODES: ICSF BE0 (3040)",
            ),
            105: (
                "The trans_sec_parm field in the data_array parameter is not valid. The key index may be incorrect.",
                "User action: Correct the value in the key index, held within the trans_sec_parm field, to hold a number from the valid range.",
                "REASONCODES: ICSF BC4 (3012)",
            ),
            106: (
                "A request was made to the Encrypted PIN Translate or the Encrypted PIN verify callable service, and the PIN block value in the input_PIN_profile or output_PIN_profile parameter has a value that is not valid.",
                "User action: Correct the PIN block value.",
            ),
            107: (
                "A request was made to the Encrypted PIN Translate callable service and the format control value in the input_PIN_profile or output_PIN_profile parameter has a value that is not valid. The only valid value is NONE.",
                "User action: Correct the format control value to NONE.",
            ),
            108: (
                "The value of the PAD data is not valid.",
                "REASONCODES: ICSF B08 (3016)",
            ),
            109: (
                "The extraction method keyword is not valid.",
            ),
            110: (
                "The value of the PAN data is not valid.",
                "REASONCODES: ICSF BE0 (3040)",
            ),
            111: (
                "A request was made to the Encrypted PIN Translate callable service. The sequence_number parameter was required, but was not the integer value 99999.",
                "User action: Specify the integer value 99999.",
            ),
            116: (
                "The supplied PIN value is incorrect.",
                "User action: Correct the PIN value.",
                "REASONCODES: ICSF BBC (3004)",
            ),
            121: (
                "The source_key_identifier or inbound_key_identifier you supplied is not a valid string.",
                "User action: In the PKA key generate service, an invalid exponent or modulus length was specified.",
            ),
            122: (
                "The outbound_KEK_count or inbound_KEK_count you supplied is not a valid ASCII hexadecimal string.",
                "User action: Check that you specified a valid ASCII hexadecimal string for the outbound_KEK_count or inbound_KEK_count parameter.",
            ),
            129: (
                "A Required Rule Array keyword was not specified.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the correct value.",
            ),
            154: (
                "This check is based on the first byte in the key identifier parameter. The key identifier provided is either an internal token, where an external or null token was required; or an external or null token, where an internal token was required. The token provided may be none of these, and, therefore, the parameter is not a key identifier at all. Another cause is specifying a key_type of IMP-PKA for a key in importable form.",
                "User action: Check the type of key identifier required and review what you have provided. Also check that your parameters are in the required sequence.",
                "REASONCODES: ICSF 7F8 (2040)",
            ),
            155: (
                "The value that the generated_key_identifier parameter specifies is not valid,or it is not consistent with the value that the key_form parameter specifies.",
            ),
            156: (
                "A keyword is not valid with the specified parameters.",
                "REASONCODES: ICSF 2790 (10128)",
            ),
            157: (
                "The rule_array parameter contents are incorrect.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the correct value.",
                "REASONCODES: ICSF 7E0 (2016)",
            ),
            159: (
                "A parameter requires Rule Array keyword that is not specified.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the correct value.",
            ),
            160: (
                "The key_type and the key_length are not consistent.",
                "User action: Review the key_type parameter provided and match it with the key_length parameter.",
            ),
            162: (
                "A request was made to the Remote Key Export callable service, and the certificate_parms parameter contains incorrect values. One or more of the offsets and/or lengths for the modulus, public exponent, and/or digital signature would indicate overlap between two or all three of the fields within the certificate parameter.",
                "User Action: Correct the values in the certificate_parms parameter to indicate the actual offsets and lengths of the modulus, public exponent, and digital signature within the certificate parameter.",
            ),
            164: (
                "Two parameters (perhaps the plaintext and ciphertext areas, or text_in and text_out areas) overlap each other. That is, some part of these two areas occupy the same address in memory. This condition cannot be processed.",
                "User action: Determine which two areas are responsible, and redefine their positions in memory.",
            ),
            165: (
                "The contents of a chaining vector passed to a callable service are not valid. If you called the MAC Generate callable service, or the MDC Generate callable service with a MIDDLE or LAST segmenting rule, the count field has a number that is not valid. If you called the MAC verification callable service, then this will have been a MIDDLE or LAST segmenting rule.",
                "User action: Check to ensure that the chaining vector is not modified by your program. The chaining vector returned by ICSF should only be used to process one message set, and not intermixed between alternating message sets. This means that if you receive and process two or more independent message streams, each should have its own chaining vector. Similarly, each message stream should have its own key identifier.",
                "If you use the same chaining vector and key identifier for alternating message streams, you will not get the correct processing performed.",
                "REASONCODES: ICSF 7F4 (2036)",
            ),
            175: (
                "The DES key token cannot be created because no control vector or a control vector of all zeroes is present.",
                "User action: Supply a key token with a valid control vector for the key type required.",
            ),
            180: (
                "A null key token was passed in the key identifier parameter. When the key type is TOKEN, a valid token is required.",
                "User action: Supply a valid token to the key identifier parameter.",
            ),
            181: (
                "This check is based on the first byte in the key identifier parameter. The key identifier provided is either an internal token, where an external or null token was required; or an external or null token, where an internal token was required. The token provided may be none of these, and, therefore, the parameter is not a key identifier at all. Another cause is specifying a key_type of IMP-PKA for a key in importable form.",
                "User action: Check the type of key identifier required and review what you have provided. Also check that your parameters are in the required sequence.",
                "This reason code also corresponds to these ICSF reason codes: 7F8 (2040), 2B24 (11044) and 3E98 (16024). See those reason codes for additional information.",
            ),
            183: (
                "A cross-check of the control vector the key type implies has shown that it does not correspond with the control vector present in the supplied internal key identifier.",
                "User action: Change either the key type or key identifier.",
                "REASONCODES: ICSF 273C (10044)",
            ),
            184: (
                "An input pointer is null.",
            ),
            199: (
                "The public exponent in the RSA public key is not valid.",
                "User action: If you created a skeleton token using the CSNDPKB service, correct the key value structure and rerun the CSNDPKB service. If you are using a key generated on another system, the key cannot be used with ICSF.",
            ),
            204: (
                "A memory allocation failed.",
            ),
            335: (
                "The requested function is not implemented on the coprocessor.",
            ),
            340: (
                "One of the input control vectors has odd parity.",
            ),
            343: (
                "Either the data block or the buffer for the block is too small.",
            ),
            345: (
                "Insufficient storage space exists for the data in the data block buffer.",
            ),
            346: (
                "The requested command is not valid in the current state of the cryptographic hardware component.",
            ),
            374: (
                "Less data was supplied than expected or less data exists than was requested.",
                "REASONCODES: ICSF 7D4 (2004) and ICSF 7E0 (2016)",
            ),
            385: (
                "The cryptographic hardware component reported that the data passed as part of the command is not valid for that command.",
            ),
            407: (
                "A PIN block consistency check error occurred.",
                "REASONCODES: ICSF BC8 (3016)",
            ),
            439: (
                "Key cannot be completed because all required key parts have not yet been accumulated, or key is already complete.",
                "User action: If the key is not already complete, add the required number of key parts to the key before completing it.",
            ),
            441: (
                "One or more input parameters indicates the key to be processed should be partial, but the key is not partial according to the CV or other control bits of the key.",
                "User action: Check that the partial key option of any input parameters is consistent with the partial key setting of any key tokens being used.",
            ),
            442: (
                "A DES key with the control vector form bits indicating unique key parts has replicated key parts.",
                "User action: This key cannot be used with ICSF. Contact your ICSF administrator.",
            ),
            605: (
                "The number of output bytes is greater than the number that is permitted.",
            ),
            703: (
                "A new master key value was found to be one of the weak DES keys.",
            ),
            704: (
                "The new master key would have the same master key verification pattern as the current master key.",
            ),
            705: (
                "The same key-encrypting key was specified for both exporter keys.",
            ),
            706: (
                "While deciphering ciphertext that had been created using a padding technique, it was found that the last byte of the plaintext did not contain a valid count of pad characters.",
                "Note that some cryptographic processing has taken place, and the clear_text parameter may contain some or all of the deciphered text.",
                "User action: The text_length parameter was not reduced. Therefore, it contains the length of the base message, plus the length of the padding bytes and the count byte. Review how the message was padded prior to being enciphered. The count byte that is not valid was created prior to the message's encipherment.",
                "You may need to check whether the ciphertext was not created using a padding scheme. Otherwise, check with the creator of the ciphertext on the method used to create it. You could also look at the plaintext to review the padding scheme used, if any.",
                "REASONCODES: ICSF 7EC (2028)",
            ),
            707: (
                "The master key registers are not in the state required for the requested function.",
                "User action: Contact your ICSF administrator.",
            ),
            714: (
                "A reserved parameter was not a null pointer or an expected value.",
                "REASONCODES: ICSF 844 (2116)",
            ),
            715: (
                "A parameter was specified with a non-zero value. For example:",
                "Key Token Build",
                "    The value of the master_key_version_number parameter must be zero when the KEY keyword is specified.",
                "Key Token Build",
                "    The value of the pad_character parameter must be zero when building a MAC token.",
                "DK PIN Change",
                "    The value of the script_initialization_vector parameter must be zero.",
                "Recover PIN from Offset",
                "    The reserved_1 field must be zero.",
                "User action: Check that you specified the valid value for the parameter.",
                "REASONCODES: ICSF 834 (2100)",
            ),
            719: (
                "The RSA-OAEP block did not verify when it decomposed. The block type is incorrect (must be X'03').",
                "User action: Re-create the RSA-OAEP block.",
                "REASONCODES: ICSF 2B38 (11064)",
            ),
            720: (
                "The RSA-OAEP block did not verify when it decomposed. The random number I is not correct (must be non-zero with the high-order bit equal to zero).",
                "User action: Re-create the RSA-OAEP block.",
                "REASONCODES: ICSF 2B40 (11072)",
            ),
            721: (
                "The RSA-OAEP block did not verify when it decomposed. The verification code is not correct (must be all zeros).",
                "User action: Re-create the RSA-OAEP block.",
                "REASONCODES: ICSF 2BC3 (11068)",
            ),
            760: (
                "The RSA public or private key specified a modulus length that is incorrect for this service.",
                "User action: Re-invoke the service with an RSA key with the proper modulus length.",
                "REASONCODES: ICSF 2B48 (11080)",
            ),
            762: (
                "The key values structure for CSNDPKB has a field in error. A length or format is not correct.",
                "User action: Correct the key values structure.",
            ),
            770: (
                "A reserved field in a parameter, probably a key identifier, has a value other than zero.",
                "User action: Key identifiers should not be changed by application programs for other uses. Review any processing you are performing on key identifiers and leave the reserved fields in them at zero.",
                "This reason code also corresponds to these ICSF reason codes: 7E8 (2024) and 2B00 (11008). See those reason codes for additional information.",
                "REASONCODES: ICSF 2B00 (11008)",
            ),
            777: (
                "The authentication data or its length is not valid.",
                "User action: Correct the authorization data parameters.",
            ),
            783: (
                "The command is not permitted by the function's control vector value.",
                "REASONCODES: ICSF Return code 12, reason code 2B0C (11020)",
            ),
            821: (
                "The subject distinguished name (SDN) provided is either missing, malformed, or of invalid length.",
                "User action: Correct the SDN value and retry the function.",
            ),
            822: (
                "The issuer distinguished name (IDN) provided is either missing, malformed, or of invalid length.",
                "User action: Correct the IDN value and retry the function.",
            ),
            823: (
                "The serial number provided is either unexpected, missing, malformed, or of invalid length.",
                "User action: Correct the serial number value and retry the function.",
            ),
            825: (
                "The extension data provided is either unexpected, missing, malformed, or of invalid length.",
                "User action: Correct the extension data and retry the function.",
            ),
            826: (
                "The validity (notBefore/notAfter) expiration days value provided is either unexpected, missing, or out of range.",
                "User action: Correct the validity value and retry the function.",
            ),
            827: (
                "The pathLenConstraint value provided is either unexpected, missing, or out of range.",
                "User action: Correct the pathLenConstraint value and retry the function.",
            ),
            829: (
                "Error in GSK/SSL/ASN.1 processing.",
                "User action: Contact the IBM Support Center.",
            ),
            830: (
                "ASN.1 DER encoding error detected in an input data. More data was expected, but none was found.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            831: (
                "ASN.1 DER encoding error detected in an input value. A length value is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            833: (
                "ASN.1 DER encoding error detected in an input value. An attribute value separator is missing.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            834: (
                "ASN.1 DER encoding error detected in an input value. An unknown attribute identifier was found.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            835: (
                "ASN.1 DER encoding error detected in an input value. An object identifier syntax error was found.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            837: (
                "ASN.1 DER encoding error detected in an input value. An validity interval is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            838: (
                "ASN.1 DER encoding error detected in an input value.",
                "User action: Correct the ASN.1 DER encoded input.Error in ASN.1 processing. X.500 name syntax error.",
            ),
            839: (
                "ASN.1 DER encoding error detected in an input value. An unexpected data type was found.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            841: (
                "ASN.1 DER encoding error detected in an input value. A character string cannot be converted.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            842: (
                "ASN.1 DER encoding error detected in an input value. Indefinite-length encoding was encountered, but is not supported.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            843: (
                "ASN.1 DER encoding error detected in an input value. A data element must be constructed, but is not.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            845: (
                "ASN.1 DER encoding error detected in an input value. A data element must be an ASN.1 primitive, but it is not.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            846: (
                "ASN.1 DER encoding error detected in an input value. Indefinite-length encoding was found, but is not allowed.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            847: (
                "ASN.1 DER encoding error detected in an input value. A data encoding is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            849: (
                "ASN.1 DER encoding error detected in an input value. Data value overflow was encountered.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            850: (
                "ASN.1 DER encoding error detected in an input value. The unused bit count in a BIT STRING is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            851: (
                "ASN.1 DER encoding error detected in an input value. An unused bit count was encountered, but it is not valid for a segmented bit string.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            854: (
                "ASN.1 DER encoding error detected in an input value. Excess data was found at the end of the data element.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            855: (
                "ASN.1 DER encoding error detected in an input value. A parameter is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            857: (
                "ASN.1 DER encoding error detected in an input value. A data value is not present where it is expected.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            858: (
                "ASN.1 DER encoding error detected in an input value. A selection value is not within the valid range.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            859: (
                "ASN.1 DER encoding error detected in an input value. No selection was found where it was expected.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            861: (
                "ASN.1 DER encoding error detected in an input value. Syntax is already set.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            862: (
                "ASN.1 DER encoding error detected in an input value. The codeset is not allowed.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            863: (
                "ASN.1 DER encoding error detected in an input value. The specified attribute value is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            865: (
                "ASN.1 DER encoding error detected in an input value. An attribute value is missing.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            866: (
                "ASN.1 DER encoding error detected in an input value. An object identifier element count is not valid.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            867: (
                "ASN.1 DER encoding error detected in an input value. An incorrect value for the first object identifier element was found.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            869: (
                "ASN.1 DER encoding error detected in an input value. An incorrect value for the second object identifier element was found.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            870: (
                "ASN.1 DER encoding error detected in an input value. The specified version is not supported.",
                "User action: Correct the ASN.1 DER encoded input.",
            ),
            871: (
                "A duplicate extension was found in a certificate.",
                "User action: Correct the certificate.",
            ),
            873: (
                "The extension data provided conflicts with the rule array data provided.",
                "User action: Modify the DER encoded extensions or the rule array, or both.",
            ),
            874: (
                "The Elliptic Curve algorithm was used, but it is not supported.",
                "User action: Correct the algorithm.",
            ),
            875: (
                "A certificate signature was not found where it is expected.",
                "User action: Correct the certificate.",
            ),
            878: (
                "The cryptographic algorithm specified is not supported.",
                "User action: Correct the algorithm.",
            ),
            879: (
                "An error was found in the Base64 encoding of an input certificate.",
                "User action: Correct the certificate.",
            ),
            881: (
                "An unrecognized file or message encoding was found.",
                "User action: Correct the file or message.",
            ),
            882: (
                "A request cannot be processed because the coprocessor internal clock has not been set.",
                "User action: Use the TKE workstation to set the internal clock.",
            ),
            883: (
                "The key specified is not supported by encryption or the signature algorithm.",
                "User action: Correct the key.",
            ),
            885: (
                "The input certificate has an invalid or missing KeyUsage extension.",
                "User action: Correct the certificate.",
            ),
            886: (
                "An input certificate extension is not supported.",
                "User action: Correct the extension.",
            ),
            887: (
                "The input certificate does not have a valid signature.",
                "User action: Correct the certificate. If this is a compliance check, ensure that the root certificate that signed the operational certificate is loaded onto all CEX6C and later CCA coprocessors.",
            ),
            891: (
                "Error in certificate processing. Signature not supplied.",
                "User action: Correct the certificate or certificates. If using a self-signed certificate in the Digital Signature Verify (CSNDDSV/CSNFDSV) callable service, check the required hardware table for the service to ensure the correct hardware is available.",
                "If this is a compliance check, ensure that a root certificate is loaded onto all CEX6C and later CCA coprocessors.",
            ),
            893: (
                "An extension has an incorrect critical indicator.",
                "User action: Correct the extension.",
            ),
            894: (
                "A required certificate extension was not supplied.",
                "User action: Supply the required extension.",
            ),
            895: (
                "During certificate processing, a certificate was found to be not valid for the host.",
                "User action: Correct the certificate.",
            ),
            897: (
                "A subject distinguished name (SDN) is not valid.",
                "User action: Correct the SDN.",
            ),
            898: (
                "Certificate extension data is not valid.",
                "User action: Correct the extension.",
            ),
            899: (
                "A certificate validation option is not valid.",
                "User action: Correct the validation option.",
            ),
            901: (
                "Name constraint restrictions have been violated in a certificate or certificate chain.",
                "User action: Correct the certificate or certificates.",
            ),
            903: (
                "A certificate chain is not trusted.",
                "User action: Correct the certificate or certificates.",
            ),
            905: (
                "The required certificate basic constraints extension was not found.",
                "User action: Supply the required extension.",
            ),
            906: (
                "During certificate processing, an internal error occurred.",
                "User action: Contact the IBM support center.",
            ),
            907: (
                "Error in certificate processing. Issuer certificate not found.",
                "User action: Review the supplied certificates and correct the problem.",
            ),
            909: (
                "The name format is not supported.",
                "User action: Specify a supported name format.",
            ),
            910: (
                "The end entity certificate for a certificate or certificate chain has not been loaded into the coprocessor adapter.",
                "User action: The root certificate must be loaded using the TKE workstation. Contact the system administrator.",
            ),
            911: (
                "Error in certificate processing. Certificate is expired.",
                "User action: Review the supplied certificates and correct the problem.",
            ),
            913: (
                "A certificate is not valid according to its validity period.",
                "User action: Correct the certificate.",
            ),
            914: (
                "A certificate issuer distinguished name (IDN) is not valid.",
                "User action: Correct the IDN.",
            ),
            915: (
                "Error in certificate processing. Certificate is revoked.",
                "User action: Review the supplied certificates and correct the problem.",
            ),
            917: (
                "A certificate numeric value is not valid.",
                "User action: Correct the numeric value.",
            ),
            918: (
                "A certificate variable argument security level is not valid.",
                "User action: Correct the security level.",
            ),
            919: (
                "A variable argument validate root was found that is not valid.",
                "User action: Correct the argument validate root.",
            ),
            921: (
                "A variable argument count is not valid.",
                "User action: Correct the argument count.",
            ),
            922: (
                "Extended key usage comparison checking failed.",
                "User action: Correct the key usage or usages.",
            ),
            923: (
                "An input certificate does not have an extended key usage extension.",
                "User action: Correct the certificate.",
            ),
            925: (
                "An extended key usage setting is not supported for this operation",
                "User action: Correct the key usage or usages.",
            ),
            926: (
                "An extended key usage was not supplied.",
                "User action: Correct the key usage or usages input.",
            ),
            927: (
                "An extended key usage input count is not valid.",
                "User action: Correct the key usage input count.",
            ),
            930: (
                "An incorrect key usage was found.",
                "User action: Correct the key usage.",
            ),
            933: (
                "Error in certificate processing. Acceptable policy intersection cannot be found.",
                "User action: Review the supplied certificates and correct the problem. Consider using the RFC-ANY keyword.",
            ),
            941: (
                "A certificate presented to use as an end entity has a true value for cA in basic constraints certificate extension.",
                "User action: Correct the certificate.",
            ),
            959: (
                "The coprocessor adapter contains certificates signed by the certificate.",
                "User action: Use an operational certificate that has not been used to sign other certificates.",
            ),
            965: (
                "Error in X.509 certificate processing. The enumeration value is not valid.",
                "User action: Review the supplied certificates and correct the problem.",
            ),
            966: (
                "The certificate revocation list provided is either missing, malformed, or the length is not valid.",
                "User action: Supply a valid certificate revocation list.",
            ),
            967: (
                "The TR-34 input token provided is either missing, malformed, or the length is not valid.",
                "User action: Provide a correct, well-formed TR-34 token as required by the service.",
            ),
            969: (
                "The freshness indicator provided is either missing, malformed, or the length is not valid.",
                "User action: Provide a correct and well-formed freshness indicator as required by the service.",
            ),
            970: (
                "Error in X.509 certificate processing. The certificate revocation list is expired.",
                "User action: Obtain an up-to-date certificate revocation list for processing.",
            ),
            971: (
                "Error in X.509 certificate processing. The revocation information is not yet valid.",
                "User action: Obtain an up-to-date certificate revocation list for processing.",
            ),
            973: (
                "Error in X.509 certificate processing. The certificate revocation list cannot be found.",
                "User action: Obtain an up-to-date certificate revocation list for processing.",
            ),
            974: (
                "The Signed Attributes data is either missing, malformed, or of invalid length.",
            ),
            975: (
                "The Credential IDs provided in separate inputs do not match.",
            ),
            977: (
                "The clear KBH does not match encrypted KBH.",
            ),
            978: (
                "The random data in key token does not match reference value.",
            ),
            979: (
                "Error in certificate processing. The PKCS #7 CMS version is not supported.",
            ),
            981: (
                "Error in certificate processing. An unsupported PKCS #7 content type is encountered.",
            ),
            982: (
                "Error in certificate processing. The PKCS #7 content information does not contain any content data.",
            ),
            983: (
                "Error in certificate processing. The API is not supported.",
            ),
            985: (
                "Error in certificate processing. An unsupported version is encountered.",
            ),
            986: (
                "Error in certificate processing. An X.509 cryptographic algorithm is not available.",
            ),
            987: (
                "Error in certificate processing. A recipient certificate is not found while creating or processing an enveloped message.",
            ),
            989: (
                "Error in certificate processing. The encryption key size is not supported.",
            ),
            990: (
                "Error in certificate processing. A signer certificate is not found while creating or processing a signed message.",
            ),
            991: (
                "Error in certificate processing. The specified digest algorithm and the key algorithm are incompatible.",
            ),
            993: (
                "Error in certificate processing. The set of authenticated attributes that are supplied within the attributes_signers parameter must not include the content-type authenticated attribute.",
            ),
            994: (
                "Error in certificate processing. The set of authenticated attributes that are supplied within the attributes_signers parameter must not include the message-digest authenticated attribute.",
            ),
            995: (
                "Error in certificate processing. DES and Triple DES encryption keys must have odd parity for each key byte.",
            ),
            997: (
                "The QSA algorithm identifier provided is either missing, malformed, or not valid.",
            ),
            998: (
                "The QSA algorithm parameters provided are either missing, malformed, or not valid.",
            ),
            1005: (
                "During X.509 certificate processing, the private/public key pair provided in one parameter and the certificate were mismatched.",
                "User action: Provide matching private/public key pair and certificate.",
            ),
            1006: (
                "The provided TR-31 Optional Block is not allowed with the provided Key Block Header algorithm.",
                "User action: Correct the optional block or algorithm.",
            ),
            1007: (
                "The provided TR-31 Optional Block is malformed.",
                "User action: Correct the optional block.",
            ),
            1009: (
                "The provided TR-31 Optional Block contains data that cannot be used by the HSM (crypto card), so it was rejected.",
                "User action: Correct the optional block.",
            ),
            1010: (
                "The provided TR-31 Optional Block is not allowed with the provided Key Block Header usage. When using CSNBT31X/CSNET31X with the COMP-TAG keyword, this indicates that the opt blocks parameter is not empty.",
                "User action: Correct the optional block.",
            ),
            1011: (
                "The provided set of TR-31 Optional Blocks contains duplicate block IDs provided either directly as input or indirectly by specifying rule array keywords.",
                "User action: Correct the optional blocks or rule array keywords.",
            ),
            1013: (
                "The provided skeleton attributes do not match the attributes provided in the optional block.",
                "User action: Correct the attributes or optional block.",
            ),
            1014: (
                "The DA optional block has more members than are allowed (expected one member).",
                "User action: Correct the DA optional block.",
            ),
            1015: (
                "TR-31 block support is not available for this option.",
                "User action: Use supported optional blocks.",
            ),
            1025: (
                "Registered public key or retained private key name already exists.",
            ),
            1026: (
                "Registered public key or retained private key name does not exist.",
            ),
            1029: (
                "There is an error in the Environment Identification data.",
            ),
            1035: (
                "The signature does not match the certificate signature during an RKX call.",
                "User Action: Check that the key used to check the signatures is the correct.",
            ),
            1050: (
                "A KEK RSA-enciphered at this node (EID) cannot be imported at this same node.",
            ),
            1052: (
                "Token identifier of the trusted block's header section is in the range 0x20 and 0xFF.",
                "User Action: Check the token identifier of the trusted block.",
            ),
            1053: (
                "The Active flag in the trusted block's trusted block section 0x14 is not disabled.",
                "User Action: Use the trusted block create callable service to create an inactive/external trusted block.",
            ),
            1054: (
                "Token identifier of the trusted block's header section is not 0x1E (external).",
                "User Action: Use the trusted block create callable service to create an inactive/external trusted block.",
            ),
            1055: (
                "The Active flag of the trusted block's trusted block section 0x14 is not enabled.",
                "User Action: Use the trusted block create callable service to create an active/external trusted block.",
            ),
            1056: (
                "Token identifier of the trusted block's header section is not 0x1F (internal).",
                "User Action: Use the PKA public key import callable service to import the trusted block.",
            ),
            1057: (
                "Trusted block rule section 0x12 Rule ID does not match input parameter rule ID.",
                "User Action: Verify the trusted block used has the rule section specified.",
            ),
            1058: (
                "Trusted block contains a value that is too small/too large.",
            ),
            1059: (
                "A trusted block parameter that must have a value of zero (or a grouping of bits set to zero) is invalid.",
            ),
            1060: (
                "Trusted block public key section failed consistency checking.",
            ),
            1061: (
                "Trusted block contains extraneous sections or subsections (TLVs).",
                "User Action: Check the trusted block for undefined sections or subsections.",
            ),
            1062: (
                "Trusted block is missing sections or subsections (TLVs).",
                "User Action: Check the trusted block for required sections and subsections applicable to the callable service invoked.",
            ),
            1063: (
                "Trusted block contains duplicate sections or subsections (TLVs).",
                "User Action: Check the trusted block's sections and subsections for duplicates. Multiple rule sections are allowed.",
            ),
            1064: (
                "Trusted block expiration date has expired (as compared to the 4764 clock).",
                "User Action: Validate the expiration date in the trusted block's trusted information section's Activation and Expiration Date TLV Object.",
            ),
            1065: (
                "Trusted block expiration date is at a date prior to the activation date.",
                "User Action: Validate the expiration date in the trusted block's trusted information section's Activation and Expiration Date TLV Object.",
            ),
            1066: (
                "Trusted Block Public Key Modulus bit length is not consistent with the byte length. The bit length must be less than or equal to byte length * 8 and greater than (byte length - 1) * 8.",
            ),
            1067: (
                "Trusted block Public Key Modulus Length in bits exceeds the maximum allowed bit length as defined by the Function Control Vector.",
            ),
            1068: (
                "One or more trusted block sections or TLV Objects contained data which is invalid (an example would be invalid label data in label section 0x13).",
            ),
            1069: (
                "Trusted block verification was attempted by a function other than CSNDDSV, CSNDKTC, CSNDKPI, CSNDRKX, or CSNDTBC.",
            ),
            1070: (
                "Trusted block rule ID contained within a Rule section contains invalid characters.",
            ),
            1071: (
                "The source key's length or CV does not match what is expected by the rule section in the trusted block that was selected by the rule ID input parameter.",
            ),
            1072: (
                "The activation data is not valid.",
                "User Action: Validate the activation data in the trusted block's trusted information section's Activation and Expiration Date TLV Object.",
            ),
            1073: (
                "The source-key label does not match the template in the export key DES token parameters TLV object of the selected trusted block rule section.",
            ),
            1074: (
                "The control-vector value specified in the common export key parameters TLV object in the selected rule section of the trusted block contains a control vector that is not valid.",
            ),
            1075: (
                "The source-key label template in the export key DES token parameters TLV object in the selected rule section of the trusted block contains a label template that is not valid.",
            ),
            1081: (
                "The ISO-1 format PIN block or ISO-2 PIN block operation is not allowed by your configuration.",
                "For ISO-1, the Disallow PIN block format ISO-1 access control is enabled.",
                "For ISO-2, one of the following access control points is enabled:",
                "    Disallow ISO-2 PIN block generation operations",
                "    Disallow ISO-2 PIN block verify operations",
                "    Disallow ISO-2 PIN block translation operations",
                "User Action: Check with your ICSF administrator.",
            ),
            1082: (
                "The key strength of the input or output key is not allowed by your access control point settings. For DES/TDES keys, consider also the effective strength of the key, whether there are repeated 56-bit sections among K1,K2 or K1,K2,K3. For example, if effective single-length TDES keys are disabled by ACP, consider if K1=K2, K2=K3, or K1=K2=K3.",
                "User Action: If weak key usage is permitted by your installation, determine the failing key strength and disable access control point 'Disable 56-bit length DES Keys', 'Disable 56-bit effective length DES keys', 'Disable RSA keys with less than 1024-bit modulus length', 'Disable RSA keys with less than 2048-bit modulus length', or 'Disable ECC keys weaker than 224-bit'.",
            ),
            1083: (
                "When the wrap type in the key token indicates WRAPENH3, this service requires a skeleton token. The token cannot contain a key.",
                "User Action: Supply a skeleton key token with the required key attributes for this service.",
            ),
            1085: (
                "The clear key value of a key to be wrapped with the WRAPENH3 method has a value of all zeros for K2, K3, or both. This value is not allowed.",
                "User Action: Shorten the key to not include a value of all zeros or change the value to a non-zero value.",
            ),
            2001: (
                "TKE: DH generator is greater than the modulus.",
            ),
            2002: (
                "TKE: DH registers are not in a valid state for the requested operation.",
            ),
            2003: (
                "TKE: TSN does not match TSN in pending change buffer.",
            ),
            2004: (
                "A length parameter has an incorrect value. The value in the length parameter could have been zero (when a positive value was required) or a negative value. If the supplied value was positive, it could have been larger than your installation's defined maximum, or for MDC generation with no padding, it could have been less than 16 or not an even multiple of 8.",
                "User action: Check the length you specified. If necessary, check your installation's maximum length with your ICSF administrator. Correct the error.",
                "REASONCODES: TSS 019 (025)",
            ),
            2005: (
                "TKE: PCB data exceeds maximum data length.",
            ),
            2008: (
                "Two parameters (perhaps the plaintext and ciphertext areas, or text_in and text_out areas) overlap each other. That is, some part of these two areas occupy the same address in memory. This condition cannot be processed.",
                "User action: Determine which two areas are responsible, and redefine their positions in memory.",
                "REASONCODES: TSS 0A4 (164)",
            ),
            2009: (
                "TKE: ACI cannot load both roles and profiles in one call.",
            ),
            2010: (
                "TKE: ACI can only load one role or one profile at a time.",
            ),
            2011: (
                "TKE: DH transport key algorithm match.",
            ),
            2012: (
                "The rule_array_count parameter contains a number that is not valid.",
                "User action: Refer to the rule_array_count parameter described in this publication under the appropriate callable service for the correct value.",
                "REASONCODES: TSS 023 (035)",
            ),
            2013: (
                "TKE: Length of hash pattern for keypart is not valid for DH transport key algorithm specified.",
            ),
            2014: (
                "TKE: PCB buffer is empty.",
            ),
            2015: (
                "An error occurred in the Domain Manager.",
            ),
            2016: (
                "The rule_array parameter contents are incorrect. One or more of the rules specified are not valid for this service OR some of the rules specified together may not be combined.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the correct value.",
                "REASONCODES: TSS 021 (033)",
            ),
            2018: (
                "The form parameter specified in the random number generate callable service should be ODD, EVEN, or RANDOM. One of these values was not supplied.",
                "User action: Change form parameter to use one of the required values for the form parameter.",
                "REASONCODES: TSS 021 (033)",
            ),
            2019: (
                "TKE: Signature in request CPRB did not verify.",
            ),
            2020: (
                "TKE: TSN in request CPRB is not valid.",
            ),
            2024: (
                "A reserved field in a parameter, probably a key identifier, has a value other than zero.",
                "User action: Key identifiers should not be changed by application programs for other uses. Review any processing you are performing on key identifiers and leave the reserved fields in them at zero.",
            ),
            2027: (
                "TKE: DH transport key hash pattern does not match.",
            ),
            2028: (
                "While deciphering ciphertext that had been created using a padding technique, it was found that the last byte of the plaintext did not contain a valid count of pad characters. Note that all cryptographic processing has taken place, and the clear_text parameter contains the deciphered text.",
                "When deciphering ciphertext that had been created using Galois/Counter Mode (GCM) either through PKCS #11 Secret key decrypt (CSFPSKD or CSFPSKD6), PKCS #11 Unwrap Key (CSFPUWK and CSFPUWK6), or Symmetric Key Decipher (CSNBSYD, CSNBSYD1, CSNESYD, or CSNESYD1), the GCM tag provided did not match the data provided. No cleartext was returned.",
                "User action: The text_length parameter was not reduced. Therefore, it contains the length of the base message, plus the length of the padding bytes and the count byte. Review how the message was padded prior to it being enciphered. The count byte that is not valid was created prior to the message's encipherment.",
                "You may need to check whether the ciphertext was not created using a padding scheme. Otherwise, check with the creator of the ciphertext on the method used to create it. You could also look at the plaintext to review the padding scheme used, if any.",
                "If using GCM, verify that the parameters provided (ciphertext, additional authenticated data, and tag) match those provided to, or returned from, the corresponding call to PKCS #11 Secret key encrypt (CSFPSKE or CSFPSKE6), PKCS #11 Wrap Key (CSFPWPK and CSFPWPK6), or Symmetric Key Encipher (CSNBSYE, CSNBSYE1, CSNESYE, or CSNESYE1).",
                "REASONCODES: TSS 2C2 (706)",
            ),
            2029: (
                "TKE: Request data block hash does not match hash in CPRB.",
            ),
            2030: (
                "TKE: DH supplied hash length is not correct.",
            ),
            2031: (
                "Reply data block too large.",
            ),
            2033: (
                "TKE: Change type does not match PCB change type.",
            ),
            2036: (
                "The contents of a chaining vector or the chaining data passed to a callable service are not valid. If you called the MAC Generate callable service, or the MDC Generate callable service with a MIDDLE or LAST segmenting rule, the count field has a number that is not valid. If you called the MAC verification callable service, then this will have been a MIDDLE or LAST segmenting rule. If you called the Symmetric Key Encipher, Symmetric Key Decipher, PKCS #11 Secret Key Encrypt or PKCS #11 Secret Key Decrypt, the chaining data passed is unusable, either because a CONTINUE or FINAL was not preceded by an INITIAL or CONTINUE, or because an attempt was made to continue chaining calls after a partial block has been processed.",
                "User action: Check to ensure that the chaining vector or chaining data is not modified by your program. The chaining vector or chaining data returned by ICSF should only be used to process one message set, and not intermixed between alternating message sets. This means that if you receive and process two or more independent message streams, each should have its own chaining vector. Similarly, each message stream should have its own key identifier.",
                "If you use the same chaining vector and key identifier for alternating message streams, you will not get the correct processing performed.",
                "REASONCODES: TSS 0A5 (165)",
            ),
            2038: (
                "No RSA private key information was provided in the supplied token.",
                "User action: Check that the token supplied was of the correct type for the service.",
            ),
            2040: (
                "This check is based on the first byte in the key identifier parameter. The key identifier provided is either an internal token, where an external or null token was required; or an external or null token, where an internal token was required. The token provided may be none of these, and, therefore, the parameter is not a key identifier at all. Another cause is specifying a key_type of IMP-PKA for a key in importable form.",
                "User action: Check the type of key identifier required and review what you have provided. Also check that your parameters are in the required sequence.",
                "REASONCODES: TSS 03F (063) and TSS 09A (154)",
            ),
            2044: (
                "The caller must be in task mode, not SRB mode.",
            ),
            2048: (
                "The key_form is not valid for the key_type",
                "User action: Review the key_form and key_type parameters. For a key_type of IMP-PKA, the secure key import callable service supports only a key_form of OP.",
            ),
            2050: (
                "A DUKPT keyword was specified, but there is an error in the PIN_profile key serial number.",
                "User action: Correct the PIN profile key serial number.",
            ),
            2051: (
                "Invalid message length in OAEP-decoded information.",
            ),
            2052: (
                "A single-length key, passed to the secure key import callable service in the clear_key parameter, must be padded on the right with binary zeros. The fact that it is a single-length key is identified by the key_form parameter, which identifies the key as being DATA, MACGEN, MACVER, and so on.",
                "User action: If you are providing a single-length key, pad the parameter on the right with zeros. Alternatively, if you meant to pass a double-length key, correct the key_form parameter to a valid double-length key type.",
            ),
            2053: (
                "No message found in OAEP-decoded information.",
            ),
            2054: (
                "Invalid RSA enciphered key cryptogram; OAEP optional encoding parameters failed validation.",
            ),
            2055: (
                "Based on the hash method and size of the symmetric key specified, the RSA public key size is too small to format the symmetric key into a PKOAEP2 message.",
            ),
            2056: (
                "The key_form parameter is neither IM nor OP. Most constants, these included, can be supplied in lowercase or uppercase. Note that this parameter is 4 bytes long, so the value IM or OP is not valid. They must be padded on the right with blanks.",
                "User action: Review the value provided and change it to IM or OP, as required.",
                "REASONCODES: TSS 029 (041)",
            ),
            2060: (
                "The value specified for the key_length parameter of the key generate callable service is not valid.",
                "User action: Review the value provided and change it as appropriate.",
                "REASONCODES: TSS 02B (043)",
            ),
            2064: (
                "The key_type and the key_length are not consistent.",
                "User action: Review the key_type parameter provided and match it with the key_length parameter.",
                "REASONCODES: TSS 0A0 (160)",
            ),
            2065: (
                "A null key token was not specified for a key identifier parameter.",
                "User action: Check the service description and determine which key identifier parameter must be a null token.",
            ),
            2067: (
                "TKE: A key part register is in an invalid state. This includes the case where an attempt is made to load a FIRST key part, but a register already contains a key or key part with the same key name.",
                "User action: Supply a different label name for the key part register or clear the existing key part register with the same label name.",
            ),
            2068: (
                "You supplied a key identifier or token to the key generate, key import, multiple secure key import, key export, or CKDS key record write callable service. This key identifier holds an importer or exporter key, and the NOCV bit is on in the token. Only programs running in supervisor state or in a system key (key 0–7) may provide a key identifier with this bit set on. Your program was not running in supervisor state or a system key.",
                "User action: Either use a different key identifier, or else run in supervisor state or a system key.",
            ),
            2069: (
                "TKE: The control vector in the key part register does not match the control vector in the key structure.",
            ),
            2070: (
                "TKE: All key part registers are already in use.",
                "User action: Either free existing key part registers by loading keys from ICSF or clearing selected key part registers from TKE or select another coprocessor for loading the key part register.",
            ),
            2071: (
                "TKE: The key part hash pattern supplied does not match the hash pattern of the key part currently in the register.",
            ),
            2075: (
                "TKE: The length of the key part received is different from the length of the accumulated value already in the key part register.",
            ),
            2076: (
                "A request was made to the key import callable service to import a single-length key. However, the right half of the key in the source_key_identifier parameter is not zeros. Therefore, it appears to identify the right half of a double-length key. This combination is not valid. This error does not occur if you are using the word TOKEN in the key_type parameter.",
                "User action: Check that you specified the value in the key_type parameter correctly, and that you are using the correct or corresponding source_key_identifier parameter.",
            ),
            2077: (
                "TKE: An error occurred storing or retrieving the key part register data.",
                "User action: Verify that the selected coprocessor is functioning correctly and retry the operation.",
            ),
            2079: (
                "An encrypted symmetric key token was passed to the service (CSNBSMG, CSNBSMV, CSNBSYD, CSNBSYE, or CSNDPKE) where only a clear key token is supported.",
            ),
            2089: (
                "The algorithm does not match the algorithm of the key identifier.",
                "User action: Make sure the rule_array keywords specified are valid for the type of key specified. Refer to the rule_array parameter described in this publication under the appropriate callable service for the valid values.",
            ),
            2093: (
                "Key identifiers contain a version number. The version number in a supplied key identifier (internal or external) is inconsistent with one or more fields in the key identifier, making the key identifier unusable.",
                "User action: Use a token containing the required version number.",
            ),
            2094: (
                "The key_length value is not compatible with the key_form value.",
            ),
            2095: (
                "The value in the key_form parameter is incompatible with the value in the key_type parameter.",
                "User action: Ensure compatibility of the selected parameters.",
            ),
            2097: (
                "The value in the key_identifier_length parameter is incompatible with the value in the key_type parameter.",
                "User action: Ensure compatibility of the selected parameters.",
            ),
            2098: (
                "Either a key bit length that was not valid was found in an AES key token (length not 128, 192, or 256 bits) or a version X'01' DES token had a token-marks field that was not valid.",
            ),
            2099: (
                "Encrypted key length in an AES key token was not valid when an encrypted key is present in the token.",
            ),
            2100: (
                "A parameter was specified with a non-zero value. For example:",
                "Key Token Build",
                "    The value of the master_key_version_number parameter must be zero when the KEY keyword is specified.",
                "Key Token Build",
                "    The value of the pad_character parameter must be zero when building a MAC token.",
                "DK PIN Change",
                "    The value of the script_initialization_vector parameter must be zero.",
                "PKA Key Generate",
                "    The value of the regeneration_data_length parameter must be zero when generating a DSS key.",
                "User action: Check that you specified the valid value for the parameter.",
                "REASONCODES: TSS 2CB (715)",
            ),
            2102: (
                "In operational key load, the key part register specified is incompatible with the rule provided.",
            ),
            2104: (
                "An input character is not in the code table.",
                "User action: Correct the code table or the source text.",
                "REASONCODES: TSS 02D (045)",
            ),
            2108: (
                "An unused field must be binary zeros, and an unused key identifier field generally must be zeros.",
                "User action: Correct the parameter list.",
                "REASONCODES: TSS 02F (047)",
            ),
            2110: (
                "The supplied symmetric key token is wrapped using a method that is not supported by the CCA coprocessor or this release of ICSF. The token cannot be used for this request.",
                "User action: See CCA key wrapping for support requirements.",
            ),
            2111: (
                "There is an inconsistency between the wrapping information in the key token and the request to wrap a key.",
            ),
            2112: (
                "The length is incorrect for the key type.",
                "User action: Check the key length parameter. DATA keys may have a length of 8, 16, or 24. MAC keys must have a length of 8. All other keys should have a length of 16. Also check that the parameters are in the required sequence.",
            ),
            2113: (
                "A key token contains invalid payload.",
                "User action: Re-create the key token.",
            ),
            2116: (
                "Parameter contents or a parameter value is not correct.",
                "User action: Specify a valid value for the parameter.",
                "REASONCODES: TSS 021 (033)",
            ),
            2118: (
                "Invalid value or values in TR-31 key block header.",
                "User action: Check the TR-31 key block header for correctness. Also check that the PADDING optional block is the last optional block in a set of optional blocks.",
            ),
            2119: (
                "\"Mode\" value in the TR-31 header is invalid or is not acceptable in the chosen operation.",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            2121: (
                "\"Algorithm\" value in the TR-31 header is invalid or is not acceptable in the chosen operation.",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            2122: (
                "If importing a TR-31 key block, the exportability byte in the TR-31 header contains a value that is not supported. If exporting a TR-31 key block, the requested exportability is inconsistent with the key block. For example a ‘B’ Key Block Version ID key can only be wrapped by a KEK that is wrapped in CBC mode, the ECB mode KEK violates ANSI X9.24.",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            2123: (
                "The length of the cleartext key in the TR-31 block is invalid, for example the algorithm is \"D\" for single-DES but the key length is not 64 bits.",
                "User action: Check that the values in the TR-31 header are consistent with the key fields.",
            ),
            2125: (
                "The Key Block Version ID in the TR-31 header contains an invalid value.",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            2126: (
                "The key usage field in the TR-31 header contains a value that is not supported for import of the key into CCA.",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            2127: (
                "The key usage field in the TR-31 header contains a value that is not valid with the other parameters in the header.",
                "User action: Check the TR-31 key block header for correctness",
            ),
            2129: (
                "A parameter to a TR-31 service such as a TR-31 key block, a set of optional blocks, or a single optional block contains invalid characters. It may be that the parameter contains EBCDIC characters when ASCII is expected or vice-versa, or the wrong characters were found in a field which only accepts a limited range of characters. For example some length fields can be populated by characters '0' - '9' and 'A' - 'F', while other length fields can only contain characters '0' - '9'.",
                "User action: Check the TR-31 parameters for correctness",
            ),
            2130: (
                "The CV carried in the TR-31 key block optional blocks is inconsistent with other attributes of the key",
                "User action: Check the TR-31 key block header for correctness.",
            ),
            2131: (
                "The MAC validate step failed for a parameter. This may result from tampering, corruption, or attempting to use a different key to validate the MAC from the one used to generate it.",
                "User action: Check each parameter which includes a MAC for correctness. If the parameter is wrapped by a key-encrypting-key (KEK), ensure that the correct KEK is supplied.",
            ),
            2134: (
                "The requested PIN decimalization table does not exist or no PIN decimalization tables have been stored in the coprocessor.",
            ),
            2135: (
                "The supplied PIN decimalization table is not in the list of active tables stored in the coprocessor.",
            ),
            2141: (
                "A key verification pattern failed to verify. Either the key-encrypting key provided to unwrap an encrypted key contained in an external key-token is incorrect or an external key-token is invalid.",
            ),
            2142: (
                "The key usage attributes of the variable-length key token does not allow the requested operation. For example, the request might have been to encrypt data, but encryption is not allowed, or the request might have been to use the ECB cipher mode, but that mode is not allowed.",
                "User action: Use the variable-length key token in a manner consistent with its usage attributes or create a new key token with the desired attributes.",
            ),
            2143: (
                "On a call to Key Translate2 using the REFORMAT Encipherment rule and providing a variable-length AES token, the key management fields for input_key_token contain disallowed values or prohibit the operation.",
                "User action: Call Key Translate2 using a key token whose key-management fields contain allowed values.",
            ),
            2145: (
                "The service failed because a key would have been wrapped by a weaker key (transport or master key). This is disallowed by the \"Prohibit weak wrapping - Transport keys\" and \"Prohibit weak wrapping - Master keys\" access control points.",
                "User action: If weak key wrapping is to be allowed, disable access control point \"Prohibit weak wrapping - Transport keys\" and \"Prohibit weak wrapping - Master keys\" using the TKE workstation.",
            ),
            2147: (
                "The key type that was to be generated by this callable service is not valid.",
                "User action: Refer to the parameters described in this publication under the appropriate callable service for the correct parameter values.",
            ),
            2149: (
                "The key that was to be generated by this callable service is stronger than the input material.",
                "User action: Validate the key material is is at least as strong as the key to be generated.",
            ),
            2153: (
                "The input token is incompatible with the service (for example, clear key when encrypted key was expected).",
            ),
            2154: (
                "At least one key token passed to this callable service does not have the required key type for the specified function.",
                "For TR-31 tokens, this may indicate wrong usage or mode. For example, a KEK with mode of use E when D is required.",
                "User action: Refer to the parameters described in this publication under the appropriate callable service for the correct parameter values.",
            ),
            2158: (
                "There is a mismatch between ECC key tokens of either curve types, key lengths, or both.",
                "User action: Correct the inputs so that the curve types and the key lengths match.",
            ),
            2159: (
                "One or more key-encrypting key passed to the service is not valid for the service.",
                "User action: Check the requirements of the service and the key-encrypting keys you supplied, determine which key is incorrect and supply a key that is correct.",
            ),
            2161: (
                "The requested or default wrapping method conflicts with one or both input tokens.",
                "User action: On the call to the CVV Key Combine service, make sure that the desired wrapping method (either specified as a rule_array keyword or the default wrapping method) is consistent with the wrapping method of the input token or tokens. For example, an input token that can only be wrapped in the enhanced method (ENH-ONLY flag on in the CV) cannot produce an output token wrapped in the original method (ECB mode).",
            ),
            2163: (
                "A weak master key was detected when the final key part was loaded for the DES or RSA master key. A key is weak if any of the three parts are the same as another part. For example, when the first and third key parts are the same, the key is weak (effectively a double-length key).",
                "User action: Create new key values for the new master key and retry master key entry.",
            ),
            2165: (
                "The RSA key token contains a private section that is not valid with the service.",
            ),
            2170: (
                "Translation of text using an outbound key that has an effective key strength weaker than the effective strength of the inbound key is not allowed.",
                "User action: Provide an outbound key of equal or greater key strength of the inbound key.",
            ),
            2175: (
                "A weak PIN was presented. The PIN change has been rejected.",
                "User action: Provide another PIN.",
            ),
            2177: (
                "The PAN presented to the DK PAN change service was the same as the PAN in the encrypted PIN block. The change has been rejected.",
                "User action: Check the PAN parameters and correct the parameter in error.",
            ),
            2178: (
                "The PAN data supplied to the DK Deterministic PIN Generate service does not match the supplied data in the account_info_ER parameter.",
                "User action: Supply the correct PAN.",
            ),
            2182: (
                "A rule array keyword was passed to the TR-31 Import Callable Service (CSNBT31I) callable service or a TR-31 key block header field indicated that a TR-31 optional block was required. This optional block was not found in the TR-31 key block or the optional block as data that is invalid for the service call.",
                "User action: Check that the rule array and TR-31 key block are consistent for the requested service call.",
            ),
            2197: (
                "The input PIN could not be verified.",
                "User action: Ensure that the correct values were supplied for the parameters used to verify the PIN and ensure that the input PIN is correct.",
            ),
            2198: (
                "The supplied MAC was compared against a MAC calculated from the supplied parameters. The MACs did not match.",
                "User action: Ensure that the correct values were supplied for the parameters used to calculate the MAC and ensure that the supplied MAC is correct.",
            ),
            2199: (
                "A variable-length symmetric key-token (version X'05') contains invalid key-usage field data.",
                "User action: Supply a valid key token",
            ),
            2201: (
                "A variable-length symmetric key-token (version X'05') contains invalid key-management field data.",
                "User action: Supply a valid key token",
            ),
            2203: (
                "A malformed request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2204: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2205: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2206: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2207: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2208: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2209: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2210: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2211: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2212: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2213: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2214: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2215: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2216: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2217: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2218: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2219: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2220: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2221: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2222: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2223: (
                "A request caused processor recovery and ICSF takes a dump to capture the data for analysis.",
                "User action: Contact the system programmer to save the dump and contact the ICSF administrator to contact IBM.",
            ),
            2229: (
                "The type of key specified is not valid because a diversified key generating key must be used to derive this symmetric key type.",
                "User action: Supply a valid key type or token for the service.",
            ),
            2231: (
                "There was a problem converting or formatting the PAN.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the valid values.",
            ),
            2232: (
                "There was a problem converting or formatting the cardholder name.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the valid values.",
            ),
            2233: (
                "There was a problem converting or formatting the track 1 data.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the valid values.",
            ),
            2235: (
                "There was a problem converting or formatting the track 2 data.",
                "User action: Refer to the rule_array parameter described in this publication under the appropriate callable service for the valid values.",
            ),
            2237: (
                "Data presented for VFPE processing is not in VFPE enciphered.",
            ),
            2238: (
                "The supplied PIN profile has an invalid value.",
                "User action: Review the requirement of the service and correct the PIN profile.",
            ),
            2239: (
                "The check digit compliance keyword denotes compliant check digit, but the input PAN does not have a compliant check digit.",
            ),
            2243: (
                "The key derivation section is missing or the attributes in the key derivation section do not match those in the output skeleton token.",
                "User action: Ensure the key derivation section is present and correctly matches the output skeleton token.",
            ),
            2245: (
                "The CSNDEDH service was called and the key-token pedigree / key source of the ECC private key did not meet requirements; for example, it was not randomly generated.",
                "User action: Supply an ECC private key token with the correct pedigree.",
            ),
            2246: (
                "The CSNDPKG service was passed an ECC private key token that is ill-formed. The token has an associated data section version of X'01' and is missing the IBM extended associated data required for a version X'01' token.",
                "User action: Supply an ECC private key token with the correct IBM extended associated data for a version X'01' token.",
            ),
            2247: (
                "An error was encountered in the RSA PSS signature salt length.",
                "User action: Correct the PSS salt length.",
            ),
            2254: (
                "The SECURE LOG SRDI that is stored on the coprocessor is full. No auditable actions are allowed.",
                "User action: Inform the system programmer that the coprocessor adapter secure log is full.",
            ),
            2298: (
                "The hash function specified in the rule array has a digest size less than the bit length of the curve of the key.",
                "User action: Select a hash function large enough for the curve.",
            ),
            2402: (
                "An attempt was made to use a compliance-tagged key, but the domain is not in an active compliance mode.",
                "User action: Place the domain in compliance mode and retry the request.",
            ),
            2403: (
                "An attempt was made to use compliant-tagged tokens with a callable service that does not allow compliant-tagged tokens.",
                "User action: Either use a different callable service or non-compliant-tagged tokens.",
            ),
            2405: (
                "An attempt was made to perform a callable service operation that is not allowed with compliant-tagged tokens. Though the callable service supports compliant-tagged tokens, the specific operation requested of the service does not.",
                "User action: See the callable service documentation for restrictions on the use of compliant-tagged tokens.",
            ),
            2406: (
                "An attempt was made to use compliant-tagged tokens with non-compliant-tagged tokens.",
                "User action: Either use all compliant-tagged tokens or all non-compliant-tagged tokens in the service.",
            ),
            2407: (
                "An attempt was made to generate a compliant-tagged key token or check the compliance of a key token. The strength of the key is too weak for the configured compliance mode.",
                "User action: Increase the strength of the key to be compliant with the configured compliance mode and retry the request.",
            ),
            2409: (
                "An attempt was made to generate a compliant-tagged key token or check the compliance of a key token. The key type or usage is not compliant with the configured compliance mode.",
                "User action: Update the key type or usage to be compliant with the configured compliance mode and retry the request.",
            ),
            2410: (
                "An attempt was made to generate a NOCV KEK compliant-tagged key token or check the compliance of a NOCV KEK key token. NOCV KEKs cannot be compliant-tagged.",
                "User action: If attempting to generate a compliant-tagged KEK, recreate the skeleton token without the NOCV flag. NOCV KEKs cannot be compliant-tagged.",
            ),
            2413: (
                "An attempt was made to use a compliant-tagged KEK to wrap or unwrap an external key token, but the key type, a key attribute, or the wrapping method of the external key token is not compliant.",
                "User action: Only use compliant-tagged KEKs with compliant key tokens, or change to use a non-compliant-tagged KEK.",
            ),
            2414: (
                "An attempt was made to either check the compliance of or apply the compliance tag to an unsupported key token.",
                "User action: Only attempt to compliant-check or compliant-tag supported key tokens.",
            ),
            2417: (
                "The key derivation function value in the key token is invalid. The token is possibly corrupted.",
                "User action: Recreate the key token if possible.",
            ),
            2418: (
                "A token or key block that is already compliant-tagged was passed to a callable service with either the \"COMP-CHK\" or \"COMP-TAG\" rule.",
            ),
            2419: (
                "Unable to retrieve the compliance mode flags. This is an internal error.",
                "User action: Contact IBM Service.",
            ),
            2426: (
                "The operation is not allowed in imprint mode.",
                "User action: Remove the coprocessor out of imprint mode and retry the operation.",
            ),
            2429: (
                "A CCA service was requested that, because of the compliance state of the domain, requires a signed command from a TKE. However, the request was not received in the correct format.",
                "User action: Use the TKE to perform the operation.",
            ),
            2431: (
                "An external key token has the compliance tag, but it is not allowed.",
                "User action: Recreate the external key token without the compliance tag.",
            ),
            2437: (
                "The PIN block translation is not allowed.",
                "User action: See Table 4 for the PIN block translations allowed when using compliant-tagged key tokens.",
            ),
            2501: (
                "The length of the random data is invalid.",
                "User action: Select a valid length for the random data.",
            ),
            2502: (
                "The length of the additional derivation data is invalid.",
                "User action: Select and define additional derivation data which is valid.",
            ),
            2503: (
                "The length of the derivation data is invalid.",
                "User action: Select a valid length for the derivation data.",
            ),
            2505: (
                "The length of the key type vector is invalid.",
                "User action: Select a valid length for the key type vector.",
            ),
            2506: (
                "The PIN changes request failed authentication.",
                "User action: Correct the PAN authentication data.",
            ),
            2507: (
                "The key type vector contains invalid values.",
                "User action: Correct the key type vector.",
            ),
            2509: (
                "The length of the PAN data is invalid.",
                "User action: Correct the PAN data length.",
            ),
            2510: (
                "The input tweak length for format FF2 or FF2.1 exceeds the maximum allowed, as calculated by (length * log2(tweak_alphabet_length)) <= (15 - 2) * 8.",
            ),
            2511: (
                "The input plaintext or ciphertext length for format FF2 or FF2.1 exceeds the maximum allowed, as calculated by (length * log2(alphabet_length)) / 2 <= (15 - 1) * 8.",
            ),
            2513: (
                "Duplicate data found in a parameter value. For example, the alphabet for to a FFX service has duplicate characters.",
                "User action: Correct the parameter value.",
            ),
            2514: (
                "An error was found in the ISO PIN block format. The specific error is not noted.",
                "User action: Examine the PIN profile, PAN data, and other input data to ensure the inputs are correct.",
            ),
            2849: (
                "A keyword was passed in the service_data parameter of Key Token Build2 service and it is not a valid keyword for the service.",
                "User action: Correct the keywords in the service_data parameter.",
            ),
            2850: (
                "The combination of keywords in the service_data parameter of the Key Token Build2 service is not valid.",
                "User action: Check the keywords allowed for the key type being derived and correct the service_data parameter.",
            ),
            2851: (
                "The service_data_length parameter of the Key Token Build2 service does not have a valid value.",
                "User action: The length must be a multiple of 8 and the keywords in the service_data parameter must be left-justified and padded with blanks.",
            ),
            2945: (
                "A required keyword for the key type being derived is not in the service_data parameter of the Key Token Build2 service.",
                "User action: Review the keywords for the key type being derived and supply all required keywords.",
            ),
            2946: (
                "The maximum amount of plaintext/ciphertext that can be processed in the GCM mode by the CSNBSAD and CSNBSAE services was exceeded.",
            ),
            2947: (
                "When deciphering ciphertext that had been created using Galois/Counter Mode (GCM) with the CSNBSAD service, the GCM tag provided did not match the data provided. No cleartext was returned.",
                "User action: Verify that the parameters provided (ciphertext, additional authenticated data, and tag) match those provided to, or returned from, the corresponding call to the CSNBSAE service.",
            ),
            3001: (
                "SET Block Decompose service was called with an encrypted OAEP block with a block contents identifier that indicates a PIN block is present. No PIN encrypting key was supplied to process the PIN block. The block contents identifier is returned in the block_contents_identifier parameter.",
                "User action: Supply a PIN encrypting key and resubmit the job.",
            ),
            3003: (
                "An output parameter is too short to hold the output of the request. The length parameter for the output parameter has been updated with the required length for the request.",
                "User action: Update the size of the output parameter and length specified in the length field and resubmit the request.",
            ),
            3004: (
                "A request was made to the Clear PIN generate or Encrypted PIN verify callable service, and the PIN_length parameter has a value outside the valid range. The valid range is from 4 to 16, inclusive.",
                "User action: Correct the value in the PIN_length parameter to be within the valid range from 4 to 16.",
                "REASONCODES: TSS 064 (100)",
            ),
            3006: (
                "The UDX verb in the coprocessor is not authorized to be executed.",
            ),
            3008: (
                "A request was made to the Clear PIN generate, Clear PIN generate alternate, or Encrypted PIN verify callable service, and the PIN_check_length parameter has a value outside the valid range. The valid range is from 4 to 16, inclusive.",
                "User action: Correct the value in the PIN_check_length parameter to be within the valid range from 4 to 16.",
                "REASONCODES: TSS 065 (101)",
            ),
            3009: (
                "For PKCS #11 attribute processing, an attribute has been specified in the template that is not consistent with another attribute of the object being created or updated.",
                "User action: Correct the template for the object.",
            ),
            3011: (
                "The CRT value (p, q, Dp, Dq or U) is longer than the length allowed by the parameter block for clear key processing on an accelerator. A modulus whose length is less than or equal to 1024 bits is 64 bytes in length. A modulus whose length is greater than 1024 bits but less than or equal to 2048 bits is 128 bytes in length.",
                "User action: Reconfigure the accelerator as a coprocessor to make use of the key (if the CRT value is not in error and there is no coprocessor installed).",
                "REASONCODES: TSS 065 (101)",
            ),
            3012: (
                "A request was made to the Clear PIN generate, Clear PIN generate alternate, Encrypted PIN generate, or Encrypted PIN verify callable service to generate a VISA-PVV PIN, and the trans_sec_parm field has a value outside the valid range. The field being checked in the trans_sec_parm is the key index, in the 12th byte. This trans_sec_parm field is part of the data_array parameter.",
                "User action: Correct the value in the key index, held within the trans_sec_parm field in the data_array parameter, to hold a number from the valid range.",
                "REASONCODES: TSS 069 (105)",
            ),
            3013: (
                "The AES clear key value LRC in the token failed validation.",
                "User action: Correct the AES clear key value.",
            ),
            3016: (
                "A request was made to the Encrypted PIN Translate or the Encrypted PIN verify callable service and the PIN block value or the input_PIN_profile or output_PIN_profile parameter has a value or contents that are not valid.",
                "This could be due to:",
                "    The PIN profile is not valid.",
                "    The PAD digit field is not valid.",
                "    The PIN block has been inadvertantly changed.",
                "    The IPINENC or PINVER key value is not the same as was used to create the encrypted PIN block.",
                "User action: Correct the PIN block value, PIN profile, or key identifier, as appropriate.",
                "REASONCODES: TSS 06A (106)",
            ),
            3019: (
                "The call to insert or delete a z/OS PKCS #11 token object failed because the token was not found in the TKDS or a request to delete a PKCS #11 session object failed because the token was not found.",
            ),
            3020: (
                "For a PKCS #11 callable service, the PKCS #11 object specified is the incorrect class for the request.",
                "User action: Specify the correct class of object for the service.",
            ),
            3021: (
                "The call to add a z/OS PKCS #11 token failed because the token already exists in the TKDS or a request to add a z/OS PKCS #11 token object failed because an object with the same handle already exists.",
            ),
            3022: (
                "The call to add or update a z/OS PKCS #11 token object failed because the supplied attributes are too large to be stored in the TKDS.",
            ),
            3024: (
                "A request was made to the Encrypted PIN Translate callable service and the format control value in the input_PIN_profile or output_PIN_profile parameter has a value that is not valid. The only valid value is NONE.",
                "User action: Correct the format control value to NONE.",
                "REASONCODES: TSS 06B (107)",
            ),
            3025: (
                "The call to create a list of z/OS PKCS #11 tokens, a list of objects of a z/OS PKCS #11 token, the information for a z/OS PKCS #11 token or the attributes of a PKCS #11 object failed because the length of the output field was insufficient to hold the data. The length field has been updated with the length of a single list or entry, token information or object attributes.",
            ),
            3026: (
                "The z/OS PKCS #11 token or object handle syntax is invalid.",
            ),
            3027: (
                "The call to read or update a z/OS PKCS #11 token or token object failed because the token or object was not found in the TKDS or the call to read or update a PKCS #11 session object failed because the object was not found.",
            ),
            3028: (
                "A request was made to the Clear PIN generate callable service. The clear_PIN supplied as part of the data_array parameter for an GBP-PINO request begins with a zero (0). This value is not valid.",
                "User action: Correct the clear_PIN value.",
                "REASONCODES: TSS 074 (116)",
            ),
            3029: (
                "For PKCS #11 attribute processing, an invalid attribute was specified in the template. The attribute is neither a PKCS #11 or vendor-specified attribute supported by this implementation of PKCS #11.",
                "User action: Correct the template by removing the invalid attribute or changing the attribute to a valid attribute.",
            ),
            3030: (
                "An invalid value was specified for a particular PKCS #11 attribute in a template when creating or updating an object.",
            ),
            3031: (
                "The certificate specified in creating a PKCS #11 certificate object was not properly encoded.",
            ),
            3033: (
                "The attribute template for creating or updating a PKCS #11 object was incomplete. Required attributes for the object class were not specified in the template.",
            ),
            3034: (
                "The call to modify PKCS #11 object attributes failed because the CKA_MODIFIABLE attribute was set to false when the object was re-created.",
            ),
            3035: (
                "For PKCS #11 attribute processing, an attribute was specified in the template which cannot be set or updated by the application. See z/OS Cryptographic Services ICSF Writing PKCS #11 Applications for a definition of attributes that can be set or updated by the application.",
                "User action: Remove the offending attribute from the template.",
            ),
            3036: (
                "A request was made to the Encrypted PIN Translate callable service. The sequence_number parameter was required, but was not the integer value 99999.",
                "User action: Specify the integer value 99999.",
                "REASONCODES: TSS 06F (111)",
            ),
            3038: (
                "For a PKCS #11 callable service, the attributes of the PKCS #11 object specified do not permit the requested function.",
                "User action: Specify an object that permits the requested function.",
            ),
            3039: (
                "For a PKCS #11 callable service, where a PKCS #11 key object is required, the specified object is not of the correct key type for the requested function.",
                "User action: Specify an object that is the correct class of key.",
            ),
            3040: (
                "The PAN, expiration date, service code, decimalization table data, validation data, or pad data is not numeric (X'F0' through X'F9'). The parameter must be character representations of numerics or hexadecimal data.",
                "User action: Review the numeric parameters or fields required in the service that you called and change to the format and values required.",
                "REASONCODES: TSS 028 (040), TSS 02A (042), TSS 066 (102), TSS 067 (103), TSS 068 (104), TSS 069 (105), TSS 06E (110)",
            ),
            3041: (
                "PKCS #11 wrap key callable service failed because the wrapping key object is not of the correct class to wrap the key specified to be wrapped.",
                "User action: Specify a wrapping key object of the correct class to wrap the key object.",
            ),
            3043: (
                "PKCS #11 wrap key callable service failed because the key object to be wrapped does not exist or the key class does not match the wrapping mechanism.",
                "User action: Specify an existing key object that is correct for the wrapping mechanism.",
            ),
            3044: (
                "A PKCS #11 session data space is full. The request to create or update an object failed and the object was not created or updated.",
                "User action: Delete unused session objects and cryptographic state objects from incomplete chained operations to create space for new or updated objects.",
            ),
            3045: (
                "PKCS #11 wrap key callable service failed because the key object to be wrapped has CKA_EXTRACTABLE set to false.",
                "User action: Specify another key object that can be extracted.",
            ),
            3046: (
                "A key token was passed to a service using high performance encrypted key operations and SAF failed your request to use the key token.",
                "User action: Contact your ICSF or security administrator if you need to pass key tokens to a service using high performance encrypted key operations.",
            ),
            3047: (
                "A clear key was provided when a secure key was required.",
                "User action: Correct the appropriate key identifier.",
            ),
            3050: (
                "A caller is attempting to overwrite one token type with another (for example, AES over DES).",
            ),
            3051: (
                "Input hash value pattern is not valid.",
            ),
            3052: (
                "A clear key token was supplied to a service where a secure token is required.",
            ),
            3053: (
                "A service was called with no parameter list, but a parameter list was expected.",
                "User action: Call the service with a parameter list.",
            ),
            3054: (
                "A request was made to a callable service with a key token wrapped with the enhanced X9.24 CBC method. Tokens wrapped with the enhanced method are not supported by this release of ICSF.",
                "User action: Contact your ICSF administrator to resolve which key token is to be used.",
            ),
            3059: (
                "The provided key_identifier refers to an encrypted variable-length CCA key token or a key label of an encrypted variable-length CCA key token. The key-management field in the CCA token does not allow its use in high performance encrypted key operations.",
                "User action: Supply a key token or the label of a key token with the required key-management settings.",
            ),
            3061: (
                "The provided asymmetric key identifier cannot be used for the requested function. PKA Key Management Extensions have been enabled by a CSF.PKAEXTNS.ENABLE profile in the XFACILIT class. A CSFKEYS profile covering the key includes an ICSF segment, and the ASYMUSAGE field of that segment restricts the key from being used for the specified function.",
                "An SMF type 82 subtype 27 record is logged in the SMF database.",
            ),
            3062: (
                "The provided symmetric key identifier cannot be exported using the provided asymmetric key identifier. PKA Key Management Extensions have been enabled by a CSF.PKAEXTNS.ENABLE profile in the XFACILIT class. A CSFKEYS or XCSFKEY profile covering the symmetric key includes an ICSF segment and the SYMEXPORTABLE field of that segment places restrictions on how the key can be exported. The SYMEXPORTABLE field either specifies BYNONE, or else specifies BYLIST but the provided asymmetric key identifier is not one of those permitted to export the symmetric key (as identified by the SYMEXPORTCERTS or SYMEXPORTKEYS fields).",
                "An SMF type 82 subtype 27 record is logged to the SMF database.",
            ),
            3063: (
                "ICSF key store policy checking is active. The request failed the ICSF token policy check because the caller is not authorized to the label for the token in the key data set (CKDS or PKDS). The request is not allowed to continue because the token check policy is in FAIL mode.",
                "SMF type 82 subtype 25 records are logged in the SMF dataset. An SMF type 80 with event code qualifier of ACCESS is logged.",
                "The policy is defined by the CSF.CKDS.TOKEN.CHECK.LABEL.FAIL resource or the CSF.PKDS.TOKEN.CHECK.LABEL.FAIL resource in the XFACILIT class.",
            ),
            3064: (
                "ICSF key store policy checking is active. The specified token does not exist in the key data set (CKDS or PKDS as appropriate). The CSF-CKDS-DEFAULT or CSF-PKDS-DEFAULT resource in the CSFKEYS class is either not defined or the caller is not authorized to the CSF-CKDS-DEFAULT or CSF-PKDS-DEFAULT resource. The resource is not in WARNING mode, so the request is not allowed to continue.",
                "An SMF type 80 record with event qualifier ACCESS is logged indicating the request failed.",
                "The policy is defined by the CSF.CKDS.TOKEN.CHECK.DEFAULT.LABEL or the CSF.PKDS.TOKEN.CHECK.DEFAULT.LABEL resource in the XFACILIT class.",
            ),
            3065: (
                "ICSF token policy checking is active. The caller is requesting to add a token to the key data set (CKDS or PKDS as appropriate) that already exists within the key data set. The request fails.",
                "The policy is defined by the CSF.CKDS.TOKEN.NODUPLICATES resource or the CSF.PKDS.TOKEN.NODUPLICATES resource in the XFACILIT class.",
            ),
            3067: (
                "The provided key_identifier refers to an encrypted CCA key token or a key label of an encrypted CCA key token, and the CSFKEYS profile covering it does not allow its use in high performance encrypted key operations.",
                "User action: Contact your ICSF or security administrator if you need to use this key with an ICSF service that supports secure keys for CPACF. For more details, see 'Enabling use of encrypted keys in callable services that exploit CPACF' in z/OS Cryptographic Services ICSF Administrator's Guide.",
            ),
            3068: (
                "A cryptographic operation using a specific PKCS #11 key object is being requested. The key object has exceeded its useful life for the operation requested. The request is not processed.",
                "User action: Use a different key.",
            ),
            3070: (
                "A cryptographic operation that requires FIPS 140-2 compliance is being requested. The desired algorithm, mode, or key size is not approved for FIPS 140-2. The request is not processed.",
                "User action: Repeat the request using an algorithm, mode, and/or key size approved for FIPS 140-2. Refer to z/OS Cryptographic Services ICSF Writing PKCS #11 Applications for this list of approved algorithms, modes, and key sizes.",
            ),
            3071: (
                "An application using a z/OS PKCS #11 token that is marked ‘Write Protected’ is attempting to do one of the following:",
                "    Store a persistent object in the token.",
                "    Delete the token.",
                "    Reinitialize the token.",
                "ICSF always marks the session object only omnipresent token as ‘Write Protected.’ ICSF will also mark an ordinary token ‘Write Protected’ if it contains objects not supported by this release of ICSF.",
                "User action: Use a z/OS PKCS #11 token that is not marked ‘Read Only’ or, if this is an ordinary token (not the omnipresent token), attempt the delete or reinitialization from a different member of the sysplex.",
            ),
            3076: (
                "The provided symmetric key label refers to an encrypted CCA key token, and the CSFKEYS profile covering it does not allow it to be returned in its protected-key CPACF form.",
                "User Action: Contact your ICSF or security administrator if you need to use this label in calls to the CKDS Key Record Read2 service with the PROTKEY rule. For information about the SYMCPACFRET field of the ICSF segment, see 'Enabling use of encrypted keys in callable services that exploit CPACF' in z/OS Cryptographic Services ICSF Administrator's Guide.",
            ),
            3079: (
                "A request was made to use a key token wrapped with the X9.24 enhanced wrapping method introduced in HCR7780. Key tokens wrapped with the enhanced method cannot be used on this release. Also, key tokens wrapped with the enhanced method cannot be updated or deleted from the CKDS on this release.",
                "User Action: Run your application on a release that support the enhanced wrapping method.",
            ),
            3080: (
                "The use of a PKA key token has been attempted. The token is not supported on the release of ICSF currently running.",
                "User Action: Check the ICSF release for support of this token type.",
            ),
            3083: (
                "The specified key token buffer length is of insufficient size for the buffer to contain the output key token.",
                "User action: Specify a key token buffer that is sufficiently large enough to receive the output key token.",
            ),
            3084: (
                "The key token associated with the specified key label is a variable-length token, which is not compatible with this callable service.",
                "User action: Either modify the program logic to utilize a key label that is associated with a compatible key token or use an ICSF callable service that supports the symmetric key token type provided.",
            ),
            3085: (
                "Rule array keyword specifies a function not supported by this hardware. Some examples include:",
                "    ECC specified in rule array for the PKA Key Token Change callable service, but request is being executed on a system that does not support ECC keys.",
                "    PROTKEY specified in rule array for the CKDS Key Record Read2 callable service against a clear key label, but request is being executed on a system that does not have CP Assist for Cryptographic Functions.",
                "    PROTKEY specified in rule array for the CKDS Key Record Read2 against a secure key label, but request is being executed on a system that either does not have a cryptographic coprocessor or does not have one with a sufficient level of licensed internal code (LIC).",
                "User Action: Specify a different, supported, rule array keyword or execute the service on a system that supports the function.",
            ),
            3086: (
                "Specified token is not supported by this hardware. For example, an ECC token is being used but request is being executed on a system that does not support ECC keys.",
                "User Action: Specify a different, supported, token, or execute the request on a system that supports the function.",
            ),
            3087: (
                "A coordinated KDS refresh was attempted to an empty KDS. The new KDS of a coordinated KDS refresh must be initialized and must contain the same MKVP values as the active KDS.",
                "User action: Perform a coordinated KDS refresh using a new KDS that is initialized and that contains the same MKVP values as the active KDS.",
            ),
            3088: (
                "A coordinated KDS change master key was attempted and either the new KDS or backup KDS contained a different LRECL attribute from the active KDS. The new KDS and optionally the backup KDS must contain the same LRECL attribute as the active KDS during a coordinate KDS change master key.",
                "User action: Perform a coordinated KDS change master key using a new KDS and optionally a backup KDS with the same LRECL attribute as the active KDS.",
            ),
            3089: (
                "The new KDS specified for a coordinated KDS change master key was not empty when the operation began. The new KDS must be empty before performing a coordinated KDS change master key.",
                "User action: Perform the coordinated KDS change master key with a new KDS that is empty.",
            ),
            3090: (
                "The backup KDS specified for a coordinated KDS change master key was not empty when the operation began. When using the optional backup function, the backup KDS must be empty before performing a coordinated KDS change master key.",
                "User action: Perform the coordinated KDS change master key with a backup KDS that is empty.",
            ),
            3091: (
                "The new KDS specified for a coordinated KDS refresh contains different MKVPs than the active KDS. In order to perform a coordinated KDS refresh, the new KDS specified must contain the same MKVPs as the active KDS.",
                "User action: Perform the coordinated KDS refresh with a new KDS that contains the same MKVPs as the active KDS.",
            ),
            3092: (
                "The system that is trying to do the CCMK has rejected update requests for higher version records, so the in-store KDS is incomplete and cannot be used for CCMK.",
                "User action: Retry the function from a sysplex KDS cluster member running the highest ICSF FMID level.",
            ),
            3103: (
                "The new KDS specified for either a coordinated KDS refresh or coordinated KDS change master key is not a valid data set name.",
                "User action: Specify a valid data set name for the new KDS when performing either a coordinated KDS refresh or coordinated KDS change master key.",
            ),
            3104: (
                "The backup KDS specified for a coordinated KDS change master key is not a valid data set name.",
                "User action: Specify a valid data set name for the backup KDS when performing a coordinated KDS change master key.",
            ),
            3105: (
                "A coordinated KDS refresh or coordinated KDS change master key was attempted while at least one ICSF instance in the sysplex was below the HCR7790 FMID level. The coordinated KDS refresh and coordinated KDS change master key functions are only available when all ICSF instances in the sysplex, regardless of active KDS, are running at the HCR7790 FMID level or higher.",
                "User action: Remove or upgrade ICSF instances in the sysplex that are running below the HCR7790 FMID level and retry the function.",
            ),
            3106: (
                "Either a coordinated KDS refresh or coordinated KDS change master key was attempted while another coordinated KDS refresh or coordinated KDS change master key was still in progress. The coordinated KDS function was initiated by this ICSF instance. Only one coordinated KDS function may execute at a time in the sysplex.",
                "User action: Wait for the previous coordinated KDS function to complete and retry the function.",
            ),
            3107: (
                "A coordinated KDS change master key was attempted using a new KDS with the same name as the active KDS. The new KDS name must be different from the active KDS when performing a coordinated KDS change master key.",
                "User action: Specify a new KDS with a different name from the active KDS and retry the function. Coordinated KDS change master key requires the new KDS to be allocated and match the same VSAM attributes as the active KDS.",
            ),
            3108: (
                "A coordinated KDS change master key was attempted using a backup KDS with the same name as the active KDS. When using the backup function, the backup KDS name must be different from the active KDS when performing a coordinated KDS change master key.",
                "User action: Specify a backup KDS with a different name from the active KDS and retry the function. Coordinated KDS change master key requires the backup KDS to be allocated and match the same VSAM attributes as the active KDS.",
            ),
            3109: (
                "A coordinated KDS change master key was attempted using a new KDS with the same name as the backup KDS. If a backup KDS is specified, its name must be different from the new KDS.",
                "User action: Specify a backup KDS with a different name from the new KDS and retry the function. The backup KDS is optional. Coordinated KDS change master key requires the new KDS, and optionally the backup KDS, to be allocated and match the same VSAM attributes as the active KDS.",
            ),
            3110: (
                "A coordinated KDS refresh or coordinated KDS change master key was attempted using an archive KDS name that is not valid.",
                "User action: Specify a valid data set name for the archive KDS and retry the function. The archive data set name is optional. The optional archive KDS name must not exist on the system prior to performing a coordinated KDS refresh or a coordinated KDS change master key.",
            ),
            3111: (
                "A coordinated KDS change master key was attempted using an archive KDS with the same name as the backup KDS. When using the archive and backup functions, the archive KDS name must be different from the backup KDS.",
                "User action: Specify an archive KDS with a different name from the backup KDS and retry the function. The archive KDS name and the backup KDS are optional. The archive KDS name must not exist on the system prior to performing a coordinated KDS refresh or a coordinated KDS change master key. The backup KDS must be allocated and match the same VSAM attributes as the active KDS.",
            ),
            3112: (
                "A coordinated KDS refresh or a coordinated KDS change master key was attempted using an archive KDS with the same name as the active KDS. When using the archive function, the archive KDS name must be different from the active KDS.",
                "User action: Specify an archive KDS with a different name from the active KDS and retry the function. The archive KDS name must not exist on the system prior to performing a coordinated KDS refresh or a coordinated KDS change master key.",
            ),
            3113: (
                "A coordinated KDS refresh or a coordinated KDS change master key was attempted using an archive KDS with the same name as the new KDS. When using the archive function, the archive KDS name must be different from the new KDS.",
                "User action: Specify an archive KDS with a different name than the new KDS and retry the function. The archive KDS name must not exist on the system prior to performing a coordinated KDS refresh or a coordinated KDS change master key.",
            ),
            3114: (
                "Either a coordinated KDS refresh or coordinated KDS change master key was attempted while another coordinated KDS refresh or coordinated KDS change master key was still in progress. The coordinated KDS function was initiated by another ICSF instance in the sysplex. Only one coordinated KDS function may execute at a time in the sysplex.",
                "User action: Wait for the previous coordinated KDS function to complete and retry the function.",
            ),
            3120: (
                "A coordinated KDS change master key was attempted on an active KDS that was not initialized. The active KDS must be initialized before performing a coordinated KDS change master key.",
                "User action: Initialize the active KDS and retry the function",
            ),
            3121: (
                "The archive option was specified for a coordinated KDS refresh of the active KDS. The archive option is only valid for coordinated KDS refreshes to a new KDS or coordinated KDS change master key.",
                "User action: Do not specify an archive data set when performing a coordinated KDS refresh of the active KDS.",
            ),
            3132: (
                "The archive data set name specified for coordinated KDS refresh or coordinated KDS change master key is too long. The archive data set name must allow enough space for renaming the KDS VSAM data and index portions within 44 characters.",
                "User action: Specify a shorter name for the archive data set name to allow enough space for renaming the KDS VSAM data and index portions within 44 characters. The archive data set name is optional. When specified, the archive data set name must not exist on the system prior to performing the coordinated KDS function.",
            ),
            3133: (
                "During a coordinated KDS refresh or coordinated KDS change master key with the archive option specified, the active KDS could not be renamed to the archive data set name. This failure occurred because the active KDS VSAM data and index suffix names were not valid for performing the rename.",
                "User action: Consider alternate names for the active KDS VSAM data and index suffixes. The archive data set name is optional. When specified the archive data set name must not exist on the system prior to performing the coordinated KDS function.",
            ),
            3134: (
                "A coordinated KDS change master key attempted to use a new KDS that is currently another sysplex members active KDS. Performing a coordinated KDS change master key to another sysplex member's active KDS is not allowed as it would alter all sysplex members configured in that sysplex KDS group.",
                "User action: Specify a new KDS that is not currently the active KDS of another sysplex member and retry the function.",
            ),
            3135: (
                "A coordinated KDS conversion was attempted against a KDS that was already in common record format (KDSR).",
                "User action: Specify a KDS that is not already in common record format (KDSR) and retry the function.",
            ),
            3163: (
                "The supplied clear key value has replicated key parts. A rule array keyword or control vector in the supplied key token require that all key parts be unique.",
                "User action: Supply a key value that has unique key parts.",
            ),
            3201: (
                "Operation requested requires a clear key, but a secure key was supplied.",
                "User action: Use a different key, one that is clear.",
            ),
            3304: (
                "There is a mismatch between the key data set specified in the rule array and a search criteria for the KDS list service. The key data set must be CKDS when the criteria is CKDS type. The key data set must be TKDS when the criteria is TKDS type. The key data set must be CKDS or PKDS when the criteria is unsupported CCA key. The key data set must be PKDS when the criteria is a weak CCA key.",
                "User action: Specify the correct key data set in the rule array.",
            ),
            3305: (
                "The metadata type in a structure in the metadata list for the KDS list service is zero and not allowed.",
                "User action: Specify a valid metadata tag.",
            ),
            3306: (
                "A criterion flag in the search criteria for the KDS list service was not valid.",
            ),
            3308: (
                "The length of the handle for a TKDS token for the KDS list service was not correct.",
                "User action: Specify a valid token handle and a length of 32.",
            ),
            3309: (
                "Output area specified for the KDS list and the KDS metadata read services is too small to contain the requested data. For the KDS metadata read service, the output is restricted to 1000 bytes.",
                "User action: Increase the size of the output area and specify the new size.",
            ),
            3310: (
                "For the KDS list service, the continuation area contains inconsistent data. It must be binary zero for the initial call and be returned unchanged for subsequent calls.",
                "User action: Check that the continuation area is correct and not being changed for subsequent calls.",
            ),
            3311: (
                "The search criteria length specified for the KDS list service is greater than 500 bytes.",
                "User action: Correct the length of the search criteria.",
            ),
            3312: (
                "A search criteria specified for the KDS list service was in an incorrect format.",
                "User action: Correct the search criteria.",
            ),
            3313: (
                "The search criterion in a search criteria structure was not recognized for the KDS list service.",
                "User action: Correct the search criteria.",
            ),
            3314: (
                "The length field in a search criteria structure was incorrect for the KDS list service.",
                "User action: Correct the search criteria.",
            ),
            3315: (
                "The PKCS #11 token name specified in the label filter for the KDS list service was not found in the TKDS.",
            ),
            3317: (
                "The date type in a search criteria for the KDS list service was not recognized.",
                "User action: Correct the search criteria.",
            ),
            3318: (
                "The comparison operator in a search criteria for the KDS list service was not recognized.",
                "User action: Correct the search criteria.",
            ),
            3319: (
                "A reserved length parameter was not zero.",
                "User action: Specify a length of zero for the reserved length parameters.",
            ),
            3320: (
                "The label filter for the KDS list service was not syntactically correct.",
                "User action: Correct the label filter.",
            ),
            3321: (
                "The label filter length for the KDS list service was too long.",
                "User action: Correct the label filter.",
            ),
            3322: (
                "The TKDS object type in the search criteria for the KDS list service is incorrect.",
                "User action: Correct the search criteria.",
            ),
            3323: (
                "The CKDS key type in the search criteria for the KDS list service is incorrect.",
                "User action: Correct the search criteria or rule array.",
            ),
            3324: (
                "The key type bit specified in the structure for the unsupported or weak CCA keys search criterion for the KDS list service is not valid.",
                "User action: Specify a valid metadata tag.",
            ),
            3331: (
                "The metadata type in a structure in the metadata list for the KDS metadata write service is read only. The metadata block specified cannot be changed.",
                "User action: Remove the metadata tag that is read only.",
            ),
            3332: (
                "The IBM variable-length metadata blocks are read only. The metadata blocks cannot be changed.",
                "User action: Remove the IBM variable metadata block from the metadata list.",
            ),
            3333: (
                "A date in a structure in the action area for the KDS metadata write service is incorrect.",
                "User action: Correct the date.",
            ),
            3334: (
                "The metadata list for the KDS metadata write service is incomplete. The metadata list length parameter does not match the sum of the lengths of the structures in the metadata list.",
                "User action: Correct the action area and length parameters.",
            ),
            3335: (
                "The object handle specified for the KDS metadata read and KDS metadata write services for the TKDS is not the handle of a token object.",
                "User action: Only token objects have metadata. Tokens and session objects cannot have metadata.",
            ),
            3336: (
                "The value specified for the input metadata length for the KDS metadata read and KDS metadata write services is incorrect. The value is either not large enough to contain valid date or is too large for the service.",
                "User action: Check the input metadata length and the metadata area.",
            ),
            3337: (
                "The format of the input metadata for the KDS metadata read and KDS metadata write services is incorrect.",
                "User action: Check the format of the input metadata structure.",
            ),
            3338: (
                "A data type in the input metadata for the KDS metadata read and KDS metadata write services is not recognized.",
                "User action: Check the contents of the input metadata structure.",
            ),
            3339: (
                "A block in the input metadata area has a length specified that is inconsistent for the metadata type.",
                "User action: Check the contents of the input metadata structure.",
            ),
            3340: (
                "The variable-length installation metadata in the input metadata area for the KDS metadata write service cannot be written to the record because the total limit of installation metadata would be exceeded.",
                "User action: Check the contents of the input metadata structure.",
            ),
            3342: (
                "A service passed the label of a KDS record which is not yet active. The key material validity start date is in the future. The key material of the record is not available.",
                "User action: Determine if the KDS label is correct. If so, contact the ICSF administrator and determine if the record should be made active.",
            ),
            3343: (
                "A service passed the label of a deactivated KDS record. The key material validity end date has passed. The key material of the record is not available.",
                "User action: Determine if the KDS label is correct. If so, contact the ICSF administrator and determine if the record should be made active.",
            ),
            3344: (
                "A service passed the label of an archived KDS record. The key material of the record is not available.",
                "User action: Determine if the KDS label is correct. If so, contact the ICSF administrator and determine if the record should be recalled.",
            ),
            3345: (
                "The value of a metadata flag for the KDS metadata write service or the KDS list service is incorrect.",
                "User action: Supply a proper value.",
            ),
            3360: (
                "The KDS multi-Purpose callable service is in use.",
                "User action: Try again later.",
            ),
            3394: (
                "ARPC generation failed.",
                "User action: Ensure that the correct key mode was specified and the issuer master key being used is valid for ARPC generation.",
            ),
            3395: (
                "Secure messaging with integrity failure.",
                "User action: Ensure that the correct key mode was specified and the issuer master key being used is valid for EMV scripting with integrity.",
            ),
            3396: (
                "Secure messaging with confidentiality failure.",
                "User action: Ensure that the correct key mode was specified and the issuer master key being used is valid for EMV scripting with confidentiality.",
            ),
            3399: (
                "Failure to decrypt the encrypted counter.",
                "User action: Ensure that a valid encrypted counter was passed and the correct issuer master key was used.",
            ),
            3422: (
                "A service passed the label of an archived key. The service requested was not a data decryption service and the CSF.KDS.KEY.ARCHIVE.DATA.DECRYPT control is enabled. The control disallows the use of an archived key in data encryption services.",
                "User action: Determine if the label is correct. Determine if the service requested is correct. If so, contact your ICSF administrator for guidance.",
            ),
            3424: (
                "The Key Record Write service checked the control vector of a key-encrypting key that has the NOCV bit on. The control vector was found not be to be the default control vector for an DES IMPORTER or EXPORTER key.",
                "User action: Rebuild the key token with the default control vector. The key form bits may indicate any valid length except single-length key. The ENH-ONLY bit may be enabled.",
            ),
            3502: (
                "The Options Data Set Refresh function completed. No changes were made.",
                "User action: Check the ICSF joblog.",
            ),
            3505: (
                "The Options Data Set Refresh function ended. A syntax error was encountered in the options data set.",
                "User action: Check the ICSF joblog. Correct the syntax of the option parameters in the options data set. Re-run the Options Data Set Refresh function.",
            ),
            3506: (
                "The Options Data Set Refresh function ended. An error was encountered with the data set.",
            ),
            3508: (
                "The Options Data Set Refresh function ended. An error was encountered while attempting to allocate the options data set.",
            ),
            3509: (
                "The Options Data Set Refresh function ended. An error was encountered while retrieving the option information.",
            ),
            3520: (
                "The KDS name passed as input is not the active KDS for the KDS type specified.",
                "User action: The CSFKDU service only supports the updating of the active KDS in use by ICSF. Update your program to pass the active KDS name.",
            ),
            3521: (
                "The length of the original record is larger than the largest record size supported for the specified KDS type.",
                "User action: Only pass valid records to the service.",
            ),
            3522: (
                "The length of the new record is larger than the largest record size supported for the specified KDS type.",
                "User action: Only pass valid records to the service.",
            ),
            3523: (
                "The function code passed to the CSFKDU service is not a valid function.",
                "User action: Pass only documented function values.",
            ),
            3524: (
                "A request to create, update, or delete a record has failed because the state of the current record does not match what was passed as the original state.",
                "User action: Update your program to pass an original state of the record that matches what is in the KDS.",
            ),
            3525: (
                "A request to update a record has failed because the before and after labels are different.",
                "User action: Ensure that the before and after record labels match exactly.",
            ),
            3526: (
                "The input parameter with option flags has flags turned on that are not currently supported.",
                "User action: Clear the option flags field and only set supported option flags.",
            ),
            3528: (
                "For a TKDS update, the record passed is at a higher version than what the current release of ICSF supports.",
                "User action: Only attempt to create new records at a version that is supported by the ICSF release you are running. Optionally, ask your system programmer to install a more recent level of ICSF that supports the TKDS version desired.",
            ),
            3529: (
                "A key identifier was supplied to a callable service as a key token or the label of a key token in a key data set. Either the key type of the key or the algorithm of the key is unsupported by the cryptographic features available to ICSF.",
                "User action: Supply a key identifier supported by the cryptographic features.",
            ),
            3530: (
                "The record type is not valid.",
                "User action: Ensure that the record has a valid KDS type and object type, if appropriate.",
            ),
            3531: (
                "The CSFKDU service encountered an unexpected error while trying to create a TKDS record. This is most commonly caused by attempting to create an object for which no token record exists.",
            ),
            3535: (
                "The cryptographic usage statistic to be updated by CSFSTAT is not enabled.",
                "User action: Enable the cryptographic usage statistic for tracking. For more details, see z/OS Cryptographic Services ICSF Administrator's Guide.",
            ),
            3538: (
                "The operation failed because an attempt was made to use or manage a compliant-tagged key token which is not supported on this system.",
                "User action: Retry the operation on a system that supports the compliant-tagged token being used.",
            ),
            3542: (
                "The value specified in the input_PAN_data_length, the PAN_data_length, or the reference_PAN_data_length parameter is not valid.",
                "User action: Correct the input_PAN_data_length or the PAN_data_length parameter.",
            ),
            3543: (
                "The value specified in the output_PAN_data_length is not valid.",
                "User action: Correct the output_PAN_data_length parameter.",
            ),
            3544: (
                "The value specified in the input_PIN_profile_length or the reference_PIN_profile_length parameter is not valid.",
                "User action: Correct the input_PIN_profile_length or the reference_PIN_profile_length parameter.",
            ),
            3545: (
                "The value specified in the output_PIN_profile_length is not valid.",
                "User action: Correct the output_PIN_profile_length parameter.",
            ),
            3998: (
                "On a call to PCI Interface Callable Service, TKE sent a request to a specific PCI card queue using domain index 0 which is not one of the control domain indices listed in the LPAR activation profile. This occurs when using an older TKE workstation with a newer machine.",
                "User action: Use the level of TKE workstation that is required when ordering the newer machine or mark domain 0 as a control domain in the LPAR activation profile.",
            ),
            3999: (
                "On a call to CKDS Key Record Delete or CKDS Key Record Write2, the label refers to a Variable-length Symmetric key token with an unrecognized algorithm or key type in the associated data section. Only key tokens with a recognized algorithm or key type can be managed on this release of ICSF.",
                "User action: Call CKDS Key Record Delete or CKDS Key Record Write2 on a release of ICSF which recognizes the algorithm and key type of this token.",
            ),
            4000: (
                "The encipher and decipher callable services sometime require text (plaintext or ciphertext) to have a length that is an exact multiple of 8 bytes. Padding schemes always create ciphertext with a length that is an exact multiple of 8. If you want to decipher ciphertext that was produced by a padding scheme, and the text length is not an exact multiple of 8, then an error has occurred. The CBC mode of enciphering requires a text length that is an exact multiple of 8.",
                "User action: Review the requirements of the service you are using. Either adjust the text you are processing or use another process rule.",
                "REASONCODES: TSS 033 (051)",
            ),
            5009: (
                "The provided TR-31 Optional Block contains data that cannot be used by the HSM.",
                "User action: Use supported optional block data.",
            ),
            6015: (
                "An ECC curve type is invalid, its usage is inconsistent, or the required hardware level is not available.",
                "User action: Supply a valid ECC curve type.",
            ),
            6018: (
                "One or more of the parameters passed to this callable service are in error.",
                "User action: Refer to the parameter descriptions in this publication under the appropriate callable service to ensure the parameter values specified by your application are valid.",
            ),
            10000: (
                "A key identifier was passed to a service or token. It is checked in detail to ensure that it is a valid token, and that the fields within it are valid values. There is a token validation value (TVV) in the token, which is a non-cryptographic value. This value was again computed from the rest of the token, and compared to the stored TVV. If these two values are not the same, this reason code is returned.",
                "User action: The contents of the token have been altered because it was created by ICSF or TSS. Review your program to see how this could have been caused.",
                "REASONCODES: TSS 0C (12) and 1D (29)",
            ),
            10004: (
                "A key identifier was passed to a service. The master key verification pattern in the token shows that the key was created with a master key that is neither the current master key nor the old master key. Therefore, it cannot be reenciphered to the current master key.",
                "User action: Re-import the key from its importable form (if you have it in this form), or repeat the process you used to create the operational key form. If you cannot do one of these, you cannot repeat any previous cryptographic process that you performed with this token.",
                "REASONCODES: TSS 030 (048)",
            ),
            10012: (
                "A key label was supplied for a key identifier parameter. This label is the label of a key in the in-storage CKDS or PKDS. A key record with that label (and the specific type if required by the ICSF callable service) could not be found. For a retained key label, this error code is also returned if the key is not found in the CCA coprocessor specified in the PKDS record.",
                "User action: Check with your administrator if you believe that this key should be in the in-storage CKDS or the PKDS. The administrator may be able to bring it into storage. If this key cannot be in storage, use a different label.",
                "REASONCODES: TSS 01E (030)",
            ),
            10016: (
                "You specified a value for a key_type parameter that is not an ICSF-defined name.",
                "User action: Review the ICSF key types and use the appropriate one.",
                "REASONCODES: TSS 03D (061)",
            ),
            10020: (
                "You specified the word TOKEN for a key_type parameter, but the corresponding key identifier, which implies the key type to use, has a value that is not valid in the control vector field. Therefore, a valid key type cannot be determined.",
                "User action: Review the value that you stored in the corresponding key identifier. Check that the value for key_type is obtained from the appropriate key_identifier parameter.",
                "REASONCODES: TSS 027 (039)",
            ),
            10028: (
                "One of the following occurred:",
                "    Either the left half of the control vector in a key identifier (internal or external) equates to a key type that is not valid for the service you are using or the value is not that of any ICSF control vector. For example, an exporter key-encrypting key is not valid in the key import callable service.",
                "    An attempt was made to export a non-DATA key to CPACF protected key format. The key may be a CIPHER key which does not have the XPRTCPAC bit set in the control vector.",
                "User action: Determine which key identifier is in error and use the key identifier that is required by the service. If this is an attempt to export a key to CPACF protected key format, either use a DATA key or a CIPHER key with the XPRTCPAC bit set in the control vector.",
                "REASONCODES: TSS 027 (039)",
            ),
            10032: (
                "Either the right half of the control vector in a key identifier (internal or external) equates to a key type that is not valid for the service you are using, or the value is not that of any ICSF control vector. For example, an exporter key-encrypting key is not valid in the key import callable service.",
                "User action: Determine which key identifier is in error and use the key identifier that is required by the service.",
                "REASONCODES: TSS 027 (039)",
            ),
            10036: (
                "Either the complete control vector (CV) in a key identifier (internal or external) equates to a key type that is not valid for the service you are using, or the value is not that of any ICSF control vector.",
                "The difference between this and reason codes 10028 and 10032 is that each half of the control vector is valid, but as a combination, the whole is not valid. For example, the left half of the control vector may be the importer key-encrypting key and the right half may be the input PIN-encrypting (IPINENC) key.",
                "User action: Determine which key identifier is in error and use the key identifier that is required by the service.",
                "REASONCODES: TSS 027 (039)",
            ),
            10040: (
                "Key identifiers contain a version number. One of the following situations is possible:",
                "    The version number in a supplied key identifier (internal or external) is inconsistent with one or more fields in the key identifier, making the key identifier unusable.",
                "    The version number in a supplied key token, or token retrieved by a supplied label, is not consistent or not valid with another parameter you specified. For example, a DES key token (version 0 or 1) is not valid with the rule array keyword AES in the Symmetric Key Encipher callable service.",
                "User action: Use a token, or the label of a token, containing the required version number.",
                "REASONCODES: TSS 031 (049)",
            ),
            10044: (
                "A cross-check of the control vector the key type implies has shown that it does not correspond with the control vector present in the supplied internal key identifier.",
                "User action: Change either the key type or key identifier.",
                "REASONCODES: TSS 0B7 (183)",
            ),
            10048: (
                "The key_type parameter does not contain one of the valid types for the service or the keyword TOKEN.",
                "User action: Check the supplied parameter with the ICSF key types. If you supplied the keyword TOKEN, check that you have padded it on the right with blanks.",
                "REASONCODES: TSS 03D (061)",
            ),
            10052: (
                "A null key identifier was supplied and the key_type parameter contained the word TOKEN. This combination of parameters is not valid.",
                "User action: Use either a null key identifier or the word TOKEN, not both.",
                "REASONCODES: TSS 027 (039)",
            ),
            10056: (
                "You called the key import callable service. The importer key-encrypting key is a NOCV importer and you specified TOKEN for the key_type parameter. This combination is not valid.",
                "User action: Specify a value in the key_type parameter for the operational key form.",
            ),
            10060: (
                "You called the key export callable service. A label was supplied in the key_identifier parameter for the key to be exported and the key_type was TOKEN. This combination is not valid because the service needs a key type in order to retrieve a key from the CKDS.",
                "User action: Specify the type of key to be exported in the key_type parameter.",
                "REASONCODES: TSS 03D (061)",
            ),
            10068: (
                "A flag in a key identifier indicates the master key verification pattern (MKVP) is not present in an internal key token. This setting is not valid.",
                "User action: Use a token containing the required flag values.",
                "REASONCODES: TSS 02F (047)",
            ),
            10072: (
                "A flag in a key identifier indicates the encrypted key is not present in an external token. This setting is not valid.",
                "User action: Use a token containing the required flag values.",
                "REASONCODES: TSS 02F (047)",
            ),
            10076: (
                "A flag in a key identifier indicates the control vector is not present. This setting is not valid.",
                "User action: Use a token containing the required flag values.",
                "REASONCODES: TSS 02F (047)",
            ),
            10080: (
                "An ICSF private flag in a key identifier has been set to a value that is not valid.",
                "User action: Use a token containing the required flag values. Do not modify ICSF or the reserved flags for your own use.",
            ),
            10088: (
                "If you supplied a label in the key_identifier parameter, a record with the supplied label was found in the CKDS, but the key type (CV) is not valid for the service. If you supplied an internal key token for the key_identifier parameter, it contained a key type that is not valid.",
                "User action: Check with your ICSF administrator if you believe that this key should be in the in-storage CKDS. The administrator may be able to bring it into storage. If this key cannot be in storage, use a different label.",
                "REASONCODES: TSS 027 (039)",
            ),
            10120: (
                "The internal key token you supplied, or the key token that was retrieved by the label you supplied, contains a flag setting or data encryption algorithm bit that is not valid for this service.",
                "User action: Ensure that you supply a key token, or label, for a non-ANSI key type.",
            ),
            10124: (
                "The key identifier you supplied cannot be exported because there is a prohibit-export restriction on the key.",
                "User action: Use the correct key for the service.",
                "REASONCODES: TSS 027 (039)",
            ),
            10128: (
                "The keyword you supplied in the rule_array parameter is not consistent or not valid with another parameter you specified. For example, the keyword SINGLE is not valid with the key type of EXPORTER in the key token build callable service.",
                "User action: Correct either the rule_array parameter or the other parameter.",
                "REASONCODES: TSS 09C (156)",
            ),
            10129: (
                "NOCV KEKs are not permitted in the RKX service.",
            ),
            11000: (
                "The value specified for length parameter for a key token, key, or text field is not valid. This can also occur if either the key type of the key or the algorithm of the key is unsupported by the callable service.",
                "User action: Correct the appropriate length field parameter.",
                "REASONCODES: TSS 048 (072)",
            ),
            11004: (
                "The hash value (of the secret quantities) in the private key section of the internal token failed validation. The values in the token are corrupted. You cannot use this key.",
                "User action: Re-create the token using the appropriate combination of the PKA key token build, PKA key generate, and PKA key import callable services.",
                "REASONCODES: TSS 02F (047)",
            ),
            11008: (
                "The public or private key values are not valid (for example, the modulus or an exponent is zero or the exponent is even) or the key could not have created the signature (for example, the modulus value is less than the signature value). In any case, the key cannot be used to verify the signature.",
                "User action: You might need to re-create the token by using the PKA key token build or PKA key import callable service or regenerate the key values on another platform.",
                "REASONCODES: TSS 302 (770)",
            ),
            11012: (
                "The internal or external private key token contains flags that are not valid.",
                "User action: You may need to re-create the token using the PKA key token build or PKA key import callable service.",
                "REASONCODES: TSS 02F (047)",
            ),
            11016: (
                "The calculated hash of the public information in the PKA token does not match the hash in the private section of the token. The values in the token are corrupted.",
                "User action: Verify the public key section and the key name section of the token. If the token is still rejected, then you need to re-create the token using the appropriate combination of the PKA key token build, PKA key generate, and PKA key import callable services.",
                "REASONCODES: TSS 02F (047)",
            ),
            11020: (
                "The hash pattern of the master key in the supplied internal PKA private key token does not match the current system's PKA master key. This indicates the master key has changed since the token was created. You cannot use the token.",
                "User action: Re-create the token using the appropriate combination of the PKA key token build, PKA key generate, and PKA key import callable services.",
                "REASONCODES: TSS 030 (048)",
            ),
            11024: (
                "The PKA tokens have incomplete values, for example, a PKA public key token without modulus.",
                "User action: Re-create the key.",
                "REASONCODES: TSS 02F (047)",
            ),
            11028: (
                "The modulus of the PKA key is too short for processing the hash or PKCS block.",
                "User action: Either use a PKA key with a larger modulus size, use a hash algorithm that generates a smaller hash (digital signature services), or specify a shorter DATA key size (symmetric key export, symmetric key generate).",
                "REASONCODES: TSS 048 (072)",
            ),
            11032: (
                "The supplied private key can be used only for digital signature. Key management services are disallowed.",
                "User action: Supply a key with key management enabled.",
                "REASONCODES: TSS 040 (064)",
            ),
            11040: (
                "The recovered encryption block was not a valid PKCS-1.2 or zero-pad format. (The format is verified according to the recovery method specified in the rule-array.) If the recovery method specified was PKCS-1.2, refer to PKCS-1.2 for the possible error in parsing the encryption block. For the PKCS #11 services CSFPUWK and CSFPSKD, this reason could also indicate a non-RSA encryption block length problem.",
                "User action: Ensure that the parameters passed to CSNDSYI or CSNFSYI are correct. Possible causes for this error are incorrect values for the RSA private key or incorrect values in the RSA_enciphered_key parameter, which must be formatted according to PKCS-1.2 or zero-pad rules when created.",
                "REASONCODES: TSS 42 (66)",
            ),
            11044: (
                "The first section of a supplied PKA token was not a private or public key section.",
                "User action: Re-create the key.",
                "REASONCODES: TSS 0B5(181)",
            ),
            11048: (
                "The eyecatcher on the PKA internal private token is not valid.",
                "User action: Reimport the private token using the PKA key import callable service.",
            ),
            11052: (
                "An incorrect PKA token was supplied. One of the following situations is possible:",
                "    The service requires a private key token of the correct type.",
                "    The supplied token may be of a type that is not supported on this system.",
                "User action: Check that the supplied token is:",
                "    a PKA private key token of the correct type.",
                "    a type supported by this system.",
            ),
            11056: (
                "The input PKA token contains length fields that are not valid.",
                "User action: Re-create the key token.",
            ),
            11064: (
                "The RSA-OAEP block did not verify when it decomposed. The block type is incorrect (must be X'03').",
                "User action: Re-create the RSA-OAEP block.",
                "REASONCODES: TSS 2CF (719)",
            ),
            11068: (
                "The RSA-OAEP block did not verify when it decomposed. The verification code is not correct (must be all zeros).",
                "User action: Re-create the RSA-OAEP block.",
                "REASONCODES: TSS 2D1 (721)",
            ),
            11072: (
                "The RSA-OAEP block did not verify when it decomposed. The random number I is not correct (must be non-zero with the high-order bit equal to zero).",
                "User action: Re-create the RSA-OAEP block.",
                "REASONCODES: TSS 2D0 (720)",
            ),
            11080: (
                "The RSA public or private key specified a modulus length that is incorrect for this service.",
                "User action: Re-invoke the service with an RSA key with the proper modulus length.",
                "REASONCODES: See reason codes 41 (65) and 2F8 (760)",
            ),
            11084: (
                "This service requires an RSA public key and the key identifier specified is not a public key.",
                "User action: Re-invoke the service with an RSA public key.",
            ),
            11088: (
                "This service requires an RSA private key that is for signature use only.",
                "User action: Re-invoke the service with a supported private key.",
            ),
            11092: (
                "There was an invalid subsection in the PKA token.",
                "User action: Correct the PKA token.",
            ),
            11096: (
                "This service requires an RSA private key that is for signature use. The specified key may be used for key management purposes only.",
                "User action: Re-invoke the service with a supported private key.",
                "REASONCODES: TSS 040 (064)",
            ),
            16000: (
                "Either SAF or the Security Service Exit failed your request to use this service or SAF failed your request to use this PKCS #11 token. If SAF failed the request, it is caused by either the CSFSERV or CRYPTOZ class.",
                "User action: Contact your ICSF or security administrator if you need this service.",
            ),
            16004: (
                "SAF failed your request to use the key label or token. This may be caused by either the CSFKEYS or XCSFKEY class, depending on the setting of the Granular Keylabel Access Controls and the type of token provided. Both key labels and the private-key name in a PKA secure private key are subject to controls implemented using the CSFKEYS class.",
                "User action: Contact your ICSF or security administrator if you need this key.",
            ),
            16008: (
                "Clear key generation denied by policy. Secure PKCS #11 services are not available and the caller's access to CRYPTOZ class resource CLEARKEY.token-label does not permit the generation of non-secure (clear) PKCS #11 keys.",
                "User action: Contact your ICSF administrator",
                "ICSF administrator action: Either configure ICSF for secure PKCS #11 services or have your security administrator grant the user authority to use clear keys",
            ),
            16012: (
                "You requested the conversion service, but you are not running in an authorized state.",
                "User action: You must be running in supervisor state to use the conversion service. Contact your ICSF administrator.",
            ),
            16016: (
                "The input/output field contained a valid internal token with the NOCV bit on and processing failed due to one of the following reasons:",
                "    The key type was incorrect.",
                "    The key type did not match the type of the generated or imported key.",
                "    The control vector was not the default control vector.",
                "    The generated or imported token would have been wrapped with the WRAPENH3 method.",
                "User action: Correct the calling application.",
                "REASONCODES: TSS 027 (039)",
            ),
            16020: (
                "You called a service and specified the label of a CKDS system key, which is not allowed.",
                "User action: Correct the calling application.",
                "REASONCODES: TSS 0B5 (181)",
            ),
            16024: (
                "You called the CKDS key record write callable service, but the key token you supplied is not valid.",
                "User action: Check with your ICSF administrator if you believe that this key should be in the in-storage CKDS. The administrator may be able to bring it into storage. If this key cannot be in storage, use a different label.",
            ),
            16032: (
                "Invalid syntax for CKDS, PKDS or TKDS label name.",
                "User action: Correct key_label syntax.",
                "REASONCODES: TSS 020 (032)",
            ),
            16036: (
                "The key record create callable service requires that the key created not already exist in the CKDS, PKDS, or TKDS. A key of the same label was found.",
                "User action: Make sure the application specifies the correct label. If the label is correct, contact your ICSF security administrator or system programmer.",
                "REASONCODES: TSS 02C (044)",
            ),
            16040: (
                "Data in the PKDS record did not match the expected data. This occurs if the record does not contain a null PKA token and CHECK was specified.",
                "User action: If the record is to be overwritten regardless of its content, specify OVERLAY.",
            ),
            16044: (
                "One or more key labels specified as input to the PKA key generate or PKA key import service incorrectly refer to a retained private key. If generating a retained private key, this error may result from one of these conditions:",
                "    The private key name of the retained private key being generated is the same as an existing PKDS record, but the PKDS record label was not specified as the input skeleton (source) key identifier.",
                "    The label specified in the generated_key_token parameter as the target for the retained private key was not the same as the private-key name.",
                "If generating or importing a non-retained key, this error occurs when the label specified as the target key specifies a retained private key. The retained private key cannot be over-written.",
                "User action: Make sure the application specifies the correct label. If the label is correct, contact your ICSF security administrator or system programmer.",
            ),
            16048: (
                "Retained keys on the PKDS cannot be deleted or updated using the PKDS key record delete or PKDS key record write callable services, respectively.",
                "User action: Use the retained key delete callable service to delete retained keys.",
            )
        },
        12: {
            0: (
                "ICSF is not available. One of the following situations is possible:",
                "    ICSF is not started",
                "    ICSF is started, but the DES-MK, AES-MK, or ECC-MK is not defined.",
                "    ICSF is started, but the requested function is not available. For instance, an ECC operation was requested but the required hardware is not installed.",
                "User action: Check the availability of ICSF with your ICSF administrator.",
                "OR",
                "CKDS Key Record Create2 or CKDS Key Record Write2 was called to add a variable-length key record to a fixed-length CKDS. A variable-length symmetric key token can only be added to a CKDS that supports variable-length records.",
                "User action: Contact the security administrator or system programmer to activate (refresh) a CKDS that supports variable-length records.",
            ),
            4: (
                "The CKDS or PKDS management service you called is not available because it has been disallowed by the ICSF User Control Functions panel.",
                "User action: Contact the security administrator or system programmer to determine why the CKDS or PKDS management services have been disallowed.",
            ),
            8: (
                "The service or algorithm is not available on current hardware. Your request cannot be processed.",
                "User action: Correct the calling program or run on applicable hardware.",
            ),
            12: (
                "The service that you called is unavailable because the installation exit for that service had previously failed.",
                "User action: Contact your ICSF administrator or system programmer.",
            ),
            16: (
                "A requested installation service routine could not be found. Your request was not processed.",
                "User action: Contact your ICSF administrator or system programmer.",
            ),
            28: (
                "Cryptographic asynchronous processor failed.",
                "User action: Contact your IBM support center.",
            ),
            40: (
                "The callable service that you called is unsupported for AMODE(64) applications. Your request cannot be processed.",
            ),
            44: (
                "The callable service that you called was linked with the AMODE(64) stub. The application is not running AMODE(64). Your request cannot be processed.",
                "User action: Link your application with the service stub with the appropriate addressing mode.",
            ),
            197: (
                "I/O error reading or writing to the DASD copy of the CKDS or PKDS in use by ICSF.",
                "User action: Contact your ICSF security administrator or system programmer. The RPL feedback code will be placed in the high-order halfword of the reason code field.",
            ),
            324: (
                "There was insufficient coprocessor memory available to process your request. This could include the Flash EPROM used to store keys, profiles and other application data.",
                "User action: Contact your system programmer or the IBM Support Center.",
            ),
            764: (
                "The master key is not in a valid state.",
                "User action: Contact your ICSF administrator.",
                "REASONCODES: ICSF 2B08 (11016)",
            ),
            769: (
                "A cryptographic internal device driver component detected data contained in a cryptographic request that is not valid.",
            ),
            2006: (
                "TKE: PCB service error.",
            ),
            2007: (
                "TKE: Change type in PCB is not recognized.",
            ),
            2015: (
                "Domain in CPRB not enabled by EMB mask.",
            ),
            2017: (
                "MKVP mismatch on Set MK.",
            ),
            2021: (
                "Cryptographic coprocessor adapter disabled.",
            ),
            2025: (
                "Enforcement mask error.",
            ),
            2035: (
                "Intrusion latch has been tripped. Services disabled.",
            ),
            2037: (
                "The domain specified is not valid.",
            ),
            2043: (
                "OA certificate not found.",
            ),
            2073: (
                "The coprocessor has been disabled on the Support Element. It must be enabled on the Support Element prior to TKE accessing it.",
                "User action: Permit the selected coprocessor for TKE Commands on the Support Element and then re-open the host on TKE.",
            ),
            2101: (
                "AES flags in the function control vector are not valid.",
            ),
            2105: (
                "The processing for high performance secure keys fails due to a hardware error.",
                "User action: Contact your IBM support center.",
            ),
            3005: (
                "The KDS I/O subtask timed out waiting for an exclusive ENQ on the SYSZxKDS.xKDSdsn resource, where x indicates the KDS type (C for CKDS, P for PKDS, and T for TKDS). A timeout will occur if one or more members of the ICSF sysplex group has not relinquished its ENQ on the resource. The KDS update operation has failed.",
                "User action: Issue D GRS,RES=(nnnnn), where nnnnn is the KDS resource name from message CSFM302A, to determine which system or systems hold the resource. Determine if action should be taken to cause the holding system to release its ENQ on the KDS resource.",
            ),
            3006: (
                "Failure after exhausting retry attempts. IXCMSGO issued from CSFMIOST.",
                "User action: Contact your system programmer or the IBM Support Center.",
            ),
            3007: (
                "The CKDS service failed due to unexpected termination of the ICSF Cross-System Services environment. The termination of the ICSF Cross-System Services environment was caused by a failure when ICSF issued the IXCMSGI macro. Message CSFM603 has been issued.",
                "User action: Report the occurrence of this error to your ICSF system programmer.",
            ),
            3014: (
                "There is an I/O error reading or writing to the DASD copy of the TKDS in use by ICSF.",
                "User action: Report the occurrence of this error to your ICSF system programmer.",
            ),
            3015: (
                "A bad header record is detected for the TKDS.",
                "User action: Report the occurrence of this error to your ICSF system programmer.",
            ),
            3023: (
                "The PKCS #11 TKDS is not available for processing.",
                "User action: Report the occurrence of this error to your ICSF system programmer.",
            ),
            3046: (
                "An RSA retained key can no longer be generated with its key-usage flag set to allow key unwrapping (KM-ONLY or KEY-MGMT). Key usage must be SIG-ONLY.",
                "User action: None required.",
            ),
            3048: (
                "The services using encrypted AES keys, encrypted DES, or encrypted ECC keys are not available because the master key is required but not loaded or there is no access to any cryptographic processors. Your request cannot be processed.",
                "User action: Check the availability of ICSF with your ICSF administrator",
            ),
            3072: (
                "The serialization subtask terminated for an unexpected reason prior to completing the request. No dynamic CKDS or PKDS update services are possible at this point.",
                "User action: Contact your system programmer who can investigate the problem and restart the I/O subtask by stopping and restarting ICSF.",
            ),
            3073: (
                "An error occurred attempting to obtain the system ENQ for a key data set update.",
                "User action: If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3075: (
                "A symmetric key token was supplied in a key identifier parameter which is wrapped using the enhanced X9.24 key wrapping method. The cryptographic coprocessors available to process the request do not support the enhanced key wrapping.",
                "User action: Contact system personnel to get coprocessors installed on your system which will support the enhanced X9.24 key wrapping.",
            ),
            3078: (
                "The CKDS was created with an unsupported LRECL.",
            ),
            3081: (
                "An attempt was made to load a PKDS that only uses the ECC master key on a pre-HCR7780 release of ICSF. Pre-HCR7780 systems do not support the ECC master key and use of an ECC MK-only PKDS is not allowed.",
                "User Action: Change the PKDS selected. Specify a PKDS that is empty, uses an RSA master key, or uses both RSA and ECC master keys.",
            ),
            3082: (
                "A callable service generated or updated a symmetric key token and the X9.24 enhanced wrapping method was used to wrap the key. This key token is not usable on your system and ICSF will not allow the key to be generated. The key was wrapped with the enhanced wrapping method because a CCA Cryptographic coprocessor that is a CEX3C or later has the default wrapping configuration set to enhanced. This was most likely done by TKE changing the configuration.",
                "User Action: Have the ICSF administrator set the default wrapping configuration to original for the LPAR that this system is running in.",
            ),
            3095: (
                "While performing a coordinated KDS change master key operation, the sysplex KDS cluster members' new AES master key registers were loaded with different values. All sysplex KDS cluster members' (same active KDS) new AES master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new AES master key registers are loaded with the same value or all are empty and retry the function.",
            ),
            3096: (
                "One or more sysplex KDS cluster members' new DES master key registers were loaded and others were empty during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new DES master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new DES master key registers are loaded with the same value or all are empty and retry the function.",
            ),
            3097: (
                "The sysplex KDS cluster members' new DES master key registers were loaded with different values during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new DES master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new DES master key registers are loaded with the same value or all are empty and retry the function.",
            ),
            3098: (
                "A coordinated KDS change master key was attempted with empty new master key registers. At least one of the new master key registers must be loaded with a value to perform a coordinated KDS change master key.",
                "User action: Load at least one of the new master key registers on all sysplex KDS cluster members with the same value and retry the function.",
            ),
            3099: (
                "An ICSF subtask terminated during coordinated KDS refresh or coordinated KDS change master key processing.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3100: (
                "An error occurred attempting to obtain an ENQ for performing either a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3101: (
                "A target system (member of the sysplex KDS cluster) was unable to open the new KDS for either a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3102: (
                "One or more sysplex KDS cluster members' new AES master key registers were loaded and others were empty during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new AES master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members new AES master key registers are loaded with the same value or all are empty and retry the function.",
            ),
            3115: (
                "Either a coordinated KDS refresh or coordinated KDS change master key was cancelled.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3116: (
                "A catalog problem occurred during either a coordinated KDS refresh or coordinated KDS change master key. The problem occurred when looking up either the active KDS or new KDS in the catalog.",
                "User action: Ensure both the active KDS and new KDS are cataloged and retry the function.",
            ),
            3117: (
                "A coordinated KDS refresh or coordinated KDS change master key was attempted when the cryptographic coprocessor level on the originating system is lower than the cryptographic coprocessor level on one or more of the other sysplex KDS cluster members.",
                "User action: Perform the coordinated KDS function from the system running the highest cryptographic coprocessor level. The cryptographic coprocessor levels can be checked by issuing the operator command D ICSF,CARDS,SYSPLEX=Y.",
            ),
            3118: (
                "A coordinated KDS change master key was attempted with the DES new master key register loaded but with no current DES master key set. In order to perform a coordinated KDS change master key to a new DES master key, a valid DES master key must have previously been set.",
                "User action: Set a valid DES master key and then use the coordinated KDS change master key to change the DES master key.",
            ),
            3119: (
                "A coordinated KDS change master key was attempted with the AES new master key register loaded but with no current AES master key set. In order to perform a coordinated KDS change master key to a new AES master key, a valid AES master key must have previously been set.",
                "User action: Set a valid AES master key and then use the coordinated KDS change master key to change the AES master key.",
            ),
            3122: (
                "A sysplex communication failure occurred during either coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated CKDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3123: (
                "A failure occurred processing KDS updates during a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3124: (
                "An internal failure occurred in a coordinated KDS subtask while performing either a coordinated KDS refresh or a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3125: (
                "An internal failure occurred in a coordinated KDS subtask while performing either a coordinated KDS refresh or a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3126: (
                "An internal failure occurred in the sysplex subtask while performing either a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3127: (
                "An internal failure occurred in the serialization subtask while performing either a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3128: (
                "An internal failure occurred in the I/O subtask while performing a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function may be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3129: (
                "A coordinated KDS change master key was attempted and at least one ICSF instance in the sysplex reported that it was unable to process the request. The coordinated KDS change master key functions are only available when all ICSF instances in the sysplex, regardless of active KDS, are running at a sufficient level to process the request.",
                "User action: Remove or upgrade all ICSF instances in the sysplex that are running without sufficient support and retry the function.",
            ),
            3130: (
                "A target system (member of the sysplex KDS cluster) is not being responsive to a system that is originating either a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3131: (
                "The active KDS could not be reenciphered to the new KDS during a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3134: (
                "A failure occurred either renaming the active KDS to the archive KDS or renaming the new KDS to the active KDS during a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3136: (
                "A coordinated KDS refresh or coordinated KDS change master key was originated from a system at a lower ICSF FMID release level than one or more of the target systems (sysplex KDS cluster members). The coordinated KDS functions must be originated from a system running the highest ICSF FMID level.",
                "User action: Retry the function from a sysplex KDS cluster member running the highest ICSF FMID level.",
            ),
            3137: (
                "An internal failure occurred during the set master key step of a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3138: (
                "A failure occurred trying to back out from a failed rename of the active KDS to the archive KDS or a failed rename of the new KDS to the active KDS during a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3139: (
                "A failure occurred switching the new KDS to the active KDS during either a coordinated KDS refresh or a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3140: (
                "A coordinated KDS refresh or a coordinated KDS change master key failed because one of the target systems (sysplex KDS cluster members) had not finished ICSF initialization.",
                "User action: Allow all sysplex KDS cluster members to finish ICSF initialization and retry the function.",
            ),
            3141: (
                "A coordinated KDS change master key was attempted with the RSA new master key register loaded but with no current RSA master key set. In order to perform a coordinated KDS change master key to a new RSA master key, a valid RSA master key must have previously been set.",
                "User action: Set a valid RSA master key and then use the coordinated KDS change master key to change the RSA master key.",
            ),
            3142: (
                "A coordinated KDS change master key was attempted with the ECC new master key register loaded but with no current ECC master key set. In order to perform a coordinated KDS change master key to a new ECC master key, a valid ECC master key must have previously been set.",
                "User action: Set a valid ECC master key and then use the coordinated KDS change master key to change the ECC master key.",
            ),
            3143: (
                "A coordinated KDS change master key was attempted with the PKCS #11 new master key register loaded but with no current PKCS #11 master key set. In order to perform a coordinated KDS change master key to a new PKCS #11 master key, a valid PKCS #11 master key must have previously been set.",
                "User action: Set a valid PKCS #11 master key and then use the coordinated KDS change master key to change the PKCS #11 master key.",
            ),
            3144: (
                "The sysplex KDS cluster members' new RSA master key registers were loaded with different values during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new RSA master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new RSA master key registers are loaded with the same value or are all empty, and retry the function.",
            ),
            3145: (
                "The sysplex KDS cluster members' new ECC master key registers were loaded with different values during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new ECC master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new ECC master key registers are loaded with the same value or are all empty, and retry the function.",
            ),
            3146: (
                "One or more sysplex KDS cluster members' new RSA master key registers were loaded and others were empty during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new RSA master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new RSA master key registers are loaded with the same value or all are empty and retry the function.",
            ),
            3147: (
                "One or more sysplex KDS cluster members' new ECC master key registers were loaded and others were empty during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new ECC master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new ECC master key registers are loaded with the same value or are all empty and retry the function.",
            ),
            3148: (
                "The sysplex KDS cluster members' new PKCS #11 master key registers were loaded with different values or missing new PKCS #11 master key values during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new PKCS #11 master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new PKCS #11 master key registers are loaded with the same value or are all empty and retry the function.",
            ),
            3149: (
                "One or more sysplex KDS cluster members' new P11 master key registers were loaded and others were empty during a coordinated KDS change master key. All sysplex KDS cluster members' (same active KDS) new P11 master key registers must be loaded with the same value or all must be empty when performing a coordinated KDS change master key.",
                "User action: Ensure all sysplex KDS cluster members' new P11 master key registers are loaded with the same value or are all empty and retry the function.",
            ),
            3161: (
                "A coordinated KDS change master key was attempted, but one or more of the sysplex members failed to complete processing in the time allotted.",
                "User action: See z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            3200: (
                "Key object's compliance mode is different than current setting of the Enterprise PKCS #11 coprocessors",
                "User action: Contact your ICSF administrator or system programmer.",
                "ICSF administrator action: The compliance mode setting on the Enterprise PKCS #11 coprocessors must be set to a value at least as restrictive as the key object that failed. Using the PKCS #11 Token Browser ISPF panels, examine the IBM CARD COMPLIANCE value for the key that failed. Set each Enterprise PKCS #11 coprocessor to this value using TKE.",
            ),
            3202: (
                "A PKCS #11 Service found an error in DER encoded data returned from the Enterprise PKCS #11 Coprocessor.",
                "User action: Contact your system programmer or the IBM Support Center.",
            ),
            3203: (
                "A coprocessor has been configured into an unsupported configuration. Message CSFM737E has additional details.",
                "User action: Contact the ICSF administrator to modify the coprocessor configuration to one that is supported.",
            ),
            3204: (
                "The application requested an object that is not session bound, but all EP11 coprocessors require session bound objects.",
                "User action: Correct the calling program or run on applicable hardware.",
            ),
            3205: (
                "The application requested an object that is session bound, but no active EP11 coprocessors support session bound objects.",
                "User action: Correct the calling program or run on applicable hardware.",
            ),
            3361: (
                "The subtask for the KDS multi-purpose callable service is not active.",
                "User action: Contact your system operator to stop and then start ICSF.",
            ),
            3362: (
                "The subtask for the KDS multi-purpose callable service is terminating.",
            ),
            3363: (
                "An attempt was made to use a KDS which has a KDS cluster identifier that matches an active KDS. This reason code is accompanied by message CSFM663I.",
                "User action: See the ICSF joblog for message CSFM663I and refer to z/OS Cryptographic Services ICSF Messages for information on how to proceed.",
            ),
            3364: (
                "ICSF encountered continuous ISGQUERY failures while attempting a KDS operation. This reason code is accompanied by message CSFM664I.",
                "User action: See the ICSF joblog for message CSFM664I and refer to z/OS Cryptographic Services ICSF Messages for information on how to proceed.",
            ),
            3367: (
                "There is no cryptographic coprocessor capable of performing the wrapping operation.",
                "User action: Check the required hardware section for the callable service being invoked.",
            ),
            3381: (
                "z/OS UNIX System Services are not available.",
                "User action: Contact your system programmer.",
                "System programmer action: z/OS UNIX System Services may be temporarily unavailable. Check for console messages indicating that z/OS UNIX Systems is restarting and is now available. If the problem persists, contact the IBM Support Center.",
            ),
            3420: (
                "The master key required for the TR-31 key block is active, but the corresponding CMACZERO verification pattern is not present in the KDS header.",
                "User action: Contact your ICSF administrator or system programmer to update the KDS with the required CMACZERO verification pattern.",
            ),
            3421: (
                "A request was made for a function that is not available because ICSF is running without an active CKDS or PKDS defined in the options data set.",
                "User action: If you wish to perform the function, you must restart ICSF with an active CKDS or PKDS defined in the options data set.",
            ),
            3504: (
                "The Options Data Set Refresh function ended. An error was encountered while reading the options data set.",
            ),
            3507: (
                "The Options Data Set Refresh function ended abnormally.",
            ),
            3527: (
                "ICSF is running with the requested KDS in an older format. The CSFKDU service can only be used when the requested KDS is in KDSR format.",
                "User action: Contact your system programmer to migrate the KDS to KDSR format.",
            ),
            3536: (
                "The operation failed because one or more cryptographic coprocessors were in a compliance mode that disallows the operation.",
                "User action: Change the operation to a compliant one to achieve the wanted results. If the cryptographic coprocessor is in compliance mode in error, configure the cryptographic coprocessor out of the compliance mode.",
            ),
            3537: (
                "The operation failed because the compliance mode required to perform the operation (including attempting to use a compliant-tagged token) is unavailable.",
                "User action: If this is an attempt to reencipher a CKDS that once held compliant-tagged key tokens but no longer does, perform a refresh of the CKDS to clear the compliant-tagged indicator and retry the request. Otherwise, configure one or more cryptographic coprocessors in the required compliance mode and retry the request.",
            ),
            3539: (
                "Unable to export a secure key to a CPACF protected key due to a problem with the internal transport key. This should be a temporary condition and should resolve on its own.",
                "User action: Retry the request. If the problem persists, contact the IBM Support Center.",
            ),
            3540: (
                "The operation failed because there is no cryptographic coprocessor available in migration mode.",
                "User action: Configure one or more cryptographic coprocessors in migration mode.",
            ),
            3550: (
                "The Dilithium operation failed because the minimum hardware requirement was not met.",
                "User action: Ensure that the current hardware environment is IBM z15 or later.",
            ),
            3551: (
                "A service was called to add or update a record in either the CKDS or PKDS. The LRECL of the KDS is insufficient for the record that would be written. One possible cause is trying to write a Dilithium key token to a PKDS which is not KDSRL format.",
                "User action: Contact your ICSF administrator.",
            ),
            6009: (
                "One or more target systems (sysplex KDS cluster members) did not successfully load the new KDS during a coordinated KDS refresh or coordinated KDS change master key. This a common result of an unresponsive target system.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated CKDS administration failure. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            6016: (
                "A DASD IO error was encountered during access of the CKDS, PKDS, or TKDS.",
                "User action: Contact your ICSF security administrator or system programmer. The SVC 99 error code will be placed in the high-order halfword of the reason code field.",
            ),
            6028: (
                "ESTAE could not be established in common I/O routines.",
                "User action: Contact your system programmer or the IBM Support Center.",
            ),
            6032: (
                "The dynamic allocation of the DASD copy of the CKDS, PKDS, or TKDS in use by ICSF failed.",
                "User action: Contact your ICSF security administrator or system programmer. The SVC 99 error code will be placed in the high-order halfword of the reason code field.",
            ),
            6036: (
                "A dynamic deallocation error occurred when closing and deallocating a CKDS, PKDS, or TKDS.",
                "User action: Contact your security administrator or system programmer. The SVC 99 error code will be placed in the high-order halfword of the reason code field.",
            ),
            6037: (
                "A failure occurred routing KDS updates to the originating system of a coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            6038: (
                "The I/O subtask became out of sync with the sysplex KDS cluster during a coordinated KDS change master key. The I/O subtask will be restarted to get back in sync with the sysplex KDS cluster.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            6039: (
                "ICSF was unable to attach a coordinated KDS subtask for either a coordinated KDS refresh or coordinated KDS change master key.",
                "User action: Refer to the z/OS Cryptographic Services ICSF Administrator's Guide for information on recovering from a coordinated KDS administration failure. The function can be retried. If the error is common and persistent, contact your system programmer or the IBM Support Center.",
            ),
            10020: (
                "A key retrieved from the in-storage CKDS failed the MAC verification (MACVER) check and is unusable.",
                "User action: Contact your ICSF administrator.",
            ),
            10024: (
                "A key retrieved from the in-storage CKDS or a key to be written to the PKDS was rejected for use by the installation exit.",
                "User action: Contact your ICSF administrator or system programmer.",
            ),
            10028: (
                "You cannot use the secure key import or multiple secure key import callable services because the cryptographic processor is not enabled for processing. The cryptographic coprocessor is not in special secure mode.",
                "User action: Contact your ICSF administrator (your administrator can enable the processing mode).",
            ),
            10036: (
                "More than one key with the same label was found in the CKDS or PKDS. This function requires a unique key per label. The probable cause may be the use of an incorrect label pointing to a key type that allows multiple keys per label.",
                "User action: Make sure the application specifies the correct label. If the label is correct, contact your ICSF security administrator or system programmer to verify the contents of the CKDS or PKDS.",
            ),
            10044: (
                "OPEN of the PKDS in use by ICSF failed.",
                "User action: Contact your ICSF security administrator or system programmer.",
            ),
            10048: (
                "I/O error reading or writing to the DASD copy of the CKDS or PKDS in use by ICSF.",
                "User action: Contact your ICSF security administrator or system programmer. The RPL feedback code will be placed in the high-order halfword of the reason code field.",
                "REASONCODES: TSS 0C5 (197)",
            ),
            10060: (
                "The I/O subtask terminated for an unexpected reason prior to completing the request. No dynamic CKDS, PKDS, or TKDS update services are possible at this point.",
                "User action: Contact your system programmer who can investigate the problem and restart the I/O subtask by stopping and restarting ICSF.",
            ),
            11016: (
                "The master key is not in a valid state.",
                "User action: Contact your ICSF administrator.",
                "REASONCODES: TSS 2FC (764)",
            ),
            11020: (
                "The modulus of the public or private key is larger than allowed and configured in the CCC or FCV. You cannot use this key on this system.",
                "User action: Regenerate the key with a smaller modulus size.",
            ),
            11024: (
                "The RSA master key is not active. Possible reasons for this include:",
                "    The RSA master key is not loaded.",
                "    The master key verification pattern in the PKDS does not match the verification pattern of the RSA current master key.",
                "    The system administrator has used the ICSF User Control Functions panel to disable the RSA functions.",
                "User action: Contact the ICSF administrator to determine the problem and to make the RSA master key active.",
            ),
            11036: (
                "A PKDS is not available for processing.",
                "User action: Contact your ICSF administrator.",
            ),
            11040: (
                "The PKDS Control Record hash pattern is not valid.",
                "User action: Contact your ICSF administrator.",
            ),
            11044: (
                "The PKDS could not be accessed.",
                "User action: Contact your ICSF administrator.",
            ),
            11048: (
                "The coprocessor failed.",
                "User action: Contact your IBM support center.",
            ),
            11052: (
                "The specific coprocessor requested for service is temporarily unavailable. PKDS could not be accessed. The specific coprocessor may be attempting some recovery action. If recovery action is successful, the coprocessor will be made available. If the recovery action fails, the coprocessor will be made permanently unavailable.",
                "User action: Retry the function.",
            ),
            11056: (
                "The coprocessor failed. The response from the processor was incomplete.",
                "User action: Contact your IBM support center.",
            ),
            11060: (
                "The service could not be performed because the required coprocessor was not active or did not have a master key set, or the coprocessor did not have the required firmware update.",
                "User action: If the service required a specific coprocessor, verify that the value specified is correct. Reissue the request when the required coprocessor is available and has the master key set and the required firmware is present.",
            ),
            11064: (
                "Service could not be performed because of a hardware error on the coprocessor.",
            ),
            11072: (
                "Coprocessor configuration change. A CCA or EP11 coprocessor has been configured as an accelerator. TKE does not recognize coprocessors configured as accelerators.",
            ),
            11073: (
                "Coprocessor configuration change. Either a CCA coprocessor has been reconfigured to be a EP11 coprocessor, or a PKCS #11 coprocessor has been reconfigured to be a CCA coprocessor.",
            ),
            12000: (
                "You cannot use the Clear PIN Generate callable services because ICSF is not in special secure mode.",
                "User action: Contact your ICSF administrator (your administrator can enable the processing mode).",
            ),
            36002: (
                "CSFPCI was called to set the RSA master key in any CCA cryptographic coprocessor. This function is disabled because dynamic RSA master key change is enabled and the RSA master key can only be changed from the ICSF TSO Change asymmetric master key utility.",
            ),
            36020: (
                "A refresh of the CKDS failed because the DASD copy of the CKDS is enciphered under the wrong master key. This may have resulted from an automatic refresh during processing of the CKDS key record create callable service.",
                "User action: Contact your ICSF administrator.",
            ),
            36068: (
                "A failure occurred during a coordinated KDS change master key operation because the DASD copy of the CKDS is enciphered under the wrong master key.",
                "User action: Contact your ICSF administrator.",
            ),
            36069: (
                "A failure occurred during a coordinated KDS change master key operation because the DASD copy of the TKDS is enciphered under the wrong master key.",
                "User action: Contact your ICSF administrator.",
            ),
            36084: (
                "The master keys cannot be changed because ICSF is running in compatibility mode.",
                "User action: See 'Migration from PCF to z/OS ICSF' in z/OS Cryptographic Services ICSF System Programmer's Guide for an explanation of compatibility mode and how to change the master keys. Note that the coordinated change master key utility cannot be used to change master keys when running in compatibility mode.",
            ),
            36116: (
                "The PKDS specified for refresh, reencipher or activate has an incorrect dataset attribute.",
                "User action: Create a larger PKDS. See z/OS Cryptographic Services ICSF System Programmer's Guide.",
            ),
            36156: (
                "A PKCS #11 service is being requested. The service is disabled due to an ICSF FIPS self test failure. The request is not processed.",
                "User action: Report the problem to your IBM support center",
            ),
            36160: (
                "The attempt to reencipher the CKDS failed because there is an enhanced wrapped token in the CKDS.",
                "User Action: Reencipher the CKDS on a system that supports the enhanced wrapping method.",
            ),
            36168: (
                "A key data set has an LRECL attribute that is not valid. This could be because your release of ICSF does not support the KDS with that LRECL or a supplied KDS does not have the same LRECL as another KDS required for the utility being invoked.",
                "User Action: Use a KDS with an LRECL supported by the release of ICSF that you are using or supply a KDS with the same LRECL.",
            ),
            36173: (
                "A failure occurred during a coordinated KDS change master key operation because the DASD copy of the PKDS is enciphered under the wrong master key.",
                "User Action: Contact your ICSF administrator.",
            ),
            36174: (
                "A failure occurred during a coordinated KDS change master key operation because the DASD copy of the PKDS is enciphered under the wrong master key.",
                "User Action: Contact your ICSF administrator.",
            ),
            36182: (
                "A coprocessor failure was detected during initialization.",
                "User action: The error is accompanied by the CSFM540I message. Follow instructions associated with that message.",
            ),
            36186: (
                "A request was made to reencipher a CKDS. The CKDS specified cannot be reenciphered on this release of ICSF because the CKDS contains Variable-length Symmetric key tokens with an unrecognized algorithm or key type in the associated data section. Only key tokens with a recognized algorithm or key type can be managed on this release of ICSF.",
                "User action: Perform the reencipher operation on a release of ICSF which recognizes the algorithm and key type of all tokens in the specified CKDS.",
            ),
            36189: (
                "The TKDS has an incorrect dataset attribute.",
                "User action: Create a TKDS with valid dataset attributes. See z/OS Cryptographic Services ICSF System Programmer's Guide",
            ),
            36211: (
                "A request was made to process a key data set (CKDS, PKDS, or TKDS) which has an LRECL that is not supported for this operation at this release of ICSF.",
                "User Action: Retry the operation on a release that supports the LRECL.",
            )
        },
        16: {
            4: (
                "ICSF: Your call to an ICSF callable service resulted in an abnormal ending.",
                "User action: Contact your system programmer or the IBM Support Center.",
            ),
            336: (
                "An error occurred in the cryptographic hardware component.",
                "User action: Contact your system programmer or the IBM Support Center.",
                "REASONCODES: ICSF 4 (4)",
            ),
            556: (
                "The request parameter block failed consistency checking.",
                "User action: Contact your system programmer or the IBM Support Center.",
                "REASONCODES: ICSF 4 (4)",
            ),
            708: (
                "Inconsistent data was returned from the cryptographic engine.",
                "User action: Contact your system programmer or the IBM Support Center.",
                "REASONCODES: ICSF 4 (4)",
            ),
            709: (
                "Cryptographic engine internal error; could not access the master key data.",
                "User action: Contact your system programmer or the IBM Support Center.",
                "REASONCODES: ICSF 4 (4)",
            ),
            712: (
                "An unexpected error occurred in the Master Key manager.",
                "User action: Contact your system programmer or the IBM Support Center.",
                "REASONCODES: ICSF 4 (4)",
            ),
            3066: (
                "Service terminated because ICSF is going down.",
                "User action: Contact your system programmer to restart ICSF.",
            )
        }
    }
}

def _do(verb_name, kw):
    # build parameter list for ICSF call
    valid = True
    missing = []
    args = []
    parms = list(_verb[verb_name]['parms'][_verb[verb_name][_plat]['parm_index']])
    for parm in parms:
        match = None
        try:
            match = kw[parm[0]]
        except KeyError:
            if (parm[2] == _ZCD_IN or parm[2] == _ZCD_BOTH) and parm[3] == _ZCO_MAN:
                missing.append(parm[0])
                valid = False
        buf = _load_parm(args, parm, match)
        if ctypes.sizeof(buf) == 0:
            args.append(None)
        else:  
            args.append(buf)
    if not valid:
        print("ERROR: Mandatory input parameters not supplied:", missing)
        return
    # call the ICSF verb
    csfd = ctypes.CDLL(_dll[_plat])
    fn = getattr(csfd, _verb[verb_name][_plat]['name'])
    x = fn(*args)
    # load response
    response = {}
    for i in range(0, len(args)):
        value = args[i]
        if value != None:
            # special processing
            if (parms[i][7] // 65536) * 65536 == _ZCS_NDSWPINT and ('NUM-DECT' in response['rule_array'] or 'SIZEWPIN' in response['rule_array']):
                value = _buffer_to_int(ctypes.create_string_buffer(value.value[:_intlen], 4))
            elif (parms[i][7] // 65536) * 65536 == _ZCS_NULL2SP:
                value = bytes(bytearray(value).replace(0, b' '))
            else:
                if parms[i][1] == _ZCT_INT:
                    value = _buffer_to_int(value)
                elif parms[i][1] == _ZCT_BIN:
                    value = bytes(value)
                elif parms[i][1] == _ZCT_CHAR:
                    value = bytes(value).decode(_cp[_plat])
                elif parms[i][1] == _ZCT_KEYID:
                    value = bytes(value)
                    if len(value) > 0 and value[0] > 0x1f:
                        value = value.decode(_cp[_plat])
        response[parms[i][0]] = value
    _rc = response['return_code']
    _rsn = response['reason_code']
    print(f"({_verb[verb_name][_plat]['name'].ljust(8)[:8]} - {_verb[verb_name][_plat]['description'].ljust(38)[:38]}) rc={_rc}, reason={_rsn}")
    #
    #  TODO: Fix handling of zcerrsay
    #
    if _rc != 0 or _rsn != 0:
        try:
            for i, line in enumerate(_error[_plat][_rc][_rsn]):
                print(_wrapper.fill(line))
                if i < len(_error[_plat][_rc][_rsn]) - 1:
                    print()
        except KeyError:
            pass
    
    return response

def _load_parm(args, parm, match):
    # get length of parameter value for ICSF call
    parm_len = _get_parm_len(args, parm)
    if match is None:
        if parm[1] == _ZCT_CHAR:
            # allocate a space-filled buffer
            buffer = ctypes.create_string_buffer(b' ' * parm_len)
        else:
            # allocate a null-filled buffer
            buffer = ctypes.create_string_buffer(parm_len)
    else:
        if parm[1] == _ZCT_INT:
            buffer = _int_to_buffer(match)
        elif parm[1] == _ZCT_CHAR:
            buffer = _string_to_spaced_buffer(match, parm_len)
        elif parm[1] == _ZCT_KEYID:
            if isinstance(match, str):
                buffer = _string_to_spaced_buffer(match, parm_len)
            else:
                buffer = ctypes.create_string_buffer(match[:parm_len], parm_len)
        elif parm[1] == _ZCT_BIN:
            buffer = ctypes.create_string_buffer(match[:parm_len], parm_len)
    return buffer
            
def _int_to_buffer(value: int) -> bytes:
    # Create buffer initialized with null bytes
    buf = ctypes.create_string_buffer(_intlen)  
    # Cast the buffer to a pointer to a 64-bit integer and assign the value
    if _intlen == 8:
        ctypes.cast(buf, ctypes.POINTER(ctypes.c_int64))[0] = value
    else:
        ctypes.cast(buf, ctypes.POINTER(ctypes.c_int32))[0] = value
    return buf

def _string_to_spaced_buffer(input_str: str, buffer_size: int):
    # Create buffer pre-filled with spaces
    buffer = ctypes.create_string_buffer(buffer_size)
    space = ' '
    ctypes.memset(buffer, _space[_plat], buffer_size)
    
    # Encode string to bytes and truncate if needed
    encoded = input_str.encode(_cp[_plat])[:buffer_size]
    
    # Overwrite the beginning of the buffer
    buffer[:len(encoded)] = encoded
    return buffer

def _get_parm_len(args, parm):
    length = parm[4]
    if parm[1] == _ZCT_INT:
        length = _intlen
    if length == _ZCL_VAR:
        index = parm[5] - 1
        multiplier = parm[6]
        length = multiplier * _buffer_to_int(args[index])
        # print(f"varlen {parm[0]} length={length}")
    return length
    
def _buffer_to_int(value) -> int:
    if _intlen == 8:
        value = struct.unpack('q', value.raw)[0]
    else:
        value = struct.unpack('i', value.raw)[0]
    return value
